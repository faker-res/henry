'use strict';

define(['js/app'], function (myApp) {
    let playerController = function ($sce, $compile, $scope, $filter, $location, $log, authService, socketService, utilService, commonService, CONFIG, $cookies, $timeout, $http, uiGridExporterService, uiGridExporterConstants, $interval) {
        let $translate = $filter('translate');
        let $noRoundTwoDecimalPlaces = $filter('noRoundTwoDecimalPlaces');
        let $noRoundTwoDecimalToFix = $filter('noRoundTwoDecimalToFix');
        let vm = this;

        // For debugging:
        window.VM = vm;

        //init local var data
        vm.updatePlatform = {};
        vm.editPlayer = {};
        vm.merchantTopupTypeJson = $scope.merchantTopupTypeJson;
        vm.provinceList = [];
        vm.provinceList2 = [];
        vm.provinceList3 = [];
        vm.cityList = [];
        vm.cityList2 = [];
        vm.cityList3 = [];
        vm.districtList = [];
        vm.districtList2 = [];
        vm.districtList3 = [];
        vm.creditChange = {};
        vm.existPhone = false;
        vm.existRealName = false;
        vm.rewardPointsChange = {};
        vm.rewardPointsConvert = {};
        vm.platformPageName = 'Player';

        // constants declaration
        vm.constPartnerCommisionType = {
            CLOSED_COMMISSION: 0,
            DAILY_BONUS_AMOUNT: 1,
            WEEKLY_BONUS_AMOUNT: 2,
            BIWEEKLY_BONUS_AMOUNT: 3,
            MONTHLY_BONUS_AMOUNT: 4,
            WEEKLY_CONSUMPTION: 5,
            OPTIONAL_REGISTRATION: 6,
            DAILY_CONSUMPTION: 7
        };

        vm.constPartnerCommisionTypeOption = {
            DAILY_BONUS_AMOUNT: 1,
            WEEKLY_BONUS_AMOUNT: 2,
            BIWEEKLY_BONUS_AMOUNT: 3,
            MONTHLY_BONUS_AMOUNT: 4,
            WEEKLY_CONSUMPTION: 5,
            DAILY_CONSUMPTION: 7
        };
        vm.proposalStatusList = { // removed APPROVED and REJECTED
            PREPENDING: "PrePending",
            PENDING: "Pending",
            PROCESSING: "Processing",
            SUCCESS: "Success",
            FAIL: "Fail",
            CANCEL: "Cancel",
            EXPIRED: "Expired",
            UNDETERMINED: "Undetermined",
            CSPENDING: "CsPending",
            NOVERIFY: "NoVerify",
            APPROVED: "approved"
        };
        vm.allProposalStatus = [
            "PrePending",
            "Pending",
            "AutoAudit",
            "Processing",
            "Approved",
            "Rejected",
            "Success",
            "Fail",
            "Cancel",
            "Expired",
            "Undetermined",
            "Recover",
            "CsPending",
            "NoVerify",
            "approved"
        ];

        vm.constProposalType = {
            UPDATE_PLAYER_INFO: "UpdatePlayerInfo",
            UPDATE_PLAYER_INFO_PARTNER: "UpdatePlayerInfoPartner",
            UPDATE_PLAYER_INFO_LEVEL: "UpdatePlayerInfoLevel",
            UPDATE_PLAYER_INFO_ACC_ADMIN: "UpdatePlayerInfoAccAdmin",
            UPDATE_PLAYER_CREDIT: "UpdatePlayerCredit",
            FIX_PLAYER_CREDIT_TRANSFER: "FixPlayerCreditTransfer",
            UPDATE_PLAYER_EMAIL: "UpdatePlayerEmail",
            UPDATE_PLAYER_PHONE: "UpdatePlayerPhone",
            UPDATE_PLAYER_QQ: "UpdatePlayerQQ",
            UPDATE_PLAYER_WECHAT: "UpdatePlayerWeChat",
            UPDATE_PLAYER_BANK_INFO: "UpdatePlayerBankInfo",
            ADD_PLAYER_REWARD_TASK: "AddPlayerRewardTask",
            UPDATE_PARTNER_BANK_INFO: "UpdatePartnerBankInfo",
            UPDATE_PARTNER_PHONE: "UpdatePartnerPhone",
            UPDATE_PARTNER_EMAIL: "UpdatePartnerEmail",
            UPDATE_PARTNER_QQ: "UpdatePartnerQQ",
            UPDATE_PARTNER_WECHAT: "UpdatePartnerWeChat",
            UPDATE_PARTNER_INFO: "UpdatePartnerInfo",
            UPDATE_PARTNER_COMMISSION_TYPE: "UpdatePartnerCommissionType",
            FULL_ATTENDANCE: "FullAttendance",
            PLAYER_CONSUMPTION_RETURN: "PlayerConsumptionReturn",
            PARTNER_CONSUMPTION_RETURN: "PartnerConsumptionReturn",
            FIRST_TOP_UP: "FirstTopUp",
            PARTNER_INCENTIVE_REWARD: "PartnerIncentiveReward",
            PARTNER_REFERRAL_REWARD: "PartnerReferralReward",
            GAME_PROVIDER_REWARD: "GameProviderReward",
            PLATFORM_TRANSACTION_REWARD: "PlatformTransactionReward",
            PLAYER_MANUAL_TOP_UP: "ManualPlayerTopUp",
            PLAYER_ALIPAY_TOP_UP: "PlayerAlipayTopUp",
            PLAYER_WECHAT_TOP_UP: "PlayerWechatTopUp",
            PLAYER_TOP_UP: "PlayerTopUp",
            PLAYER_BONUS: "PlayerBonus",
            PLAYER_TOP_UP_RETURN: "PlayerTopUpReturn",
            PLAYER_CONSUMPTION_INCENTIVE: "PlayerConsumptionIncentive",
            PLAYER_LEVEL_UP: "PlayerLevelUp",
            PARTNER_TOP_UP_RETURN: "PartnerTopUpReturn",
            PLAYER_TOP_UP_REWARD: "PlayerTopUpReward",
            PLAYER_REFERRAL_REWARD: "PlayerReferralReward",
            PARTNER_BONUS: "PartnerBonus",
            PLAYER_CONSUMPTION_RETURN_FIX: "PlayerConsumptionReturnFix",
            PLAYER_REGISTRATION_REWARD: "PlayerRegistrationReward",
            PARTNER_COMMISSION: "PartnerCommission",
            MANUAL_UNLOCK_PLAYER_REWARD: "ManualUnlockPlayerReward",
            PLAYER_DOUBLE_TOP_UP_REWARD: "PlayerDoubleTopUpReward",
            UPDATE_PARTNER_CREDIT: "UpdatePartnerCredit",
            PLAYER_CONSECUTIVE_LOGIN_REWARD: "PlayerConsecutiveLoginReward",
            PLAYER_REGISTRATION_INTENTION: "PlayerRegistrationIntention",
            PLAYER_EASTER_EGG_REWARD: "PlayerEasterEggReward",
            PLAYER_QUICKPAY_TOP_UP: "PlayerQuickpayTopUp",
            PLAYER_TOP_UP_PROMO: "PlayerTopUpPromo",
            PLAYER_LEVEL_MIGRATION: "PlayerLevelMigration",
            PLAYER_CONSECUTIVE_CONSUMPTION_REWARD: "PlayerConsecutiveConsumptionReward",
            PLAYER_PACKET_RAIN_REWARD: "PlayerPacketRainReward",
            PLAYER_PROMO_CODE_REWARD: "PlayerPromoCodeReward",
            PLAYER_LIMITED_OFFER_INTENTION: "PlayerLimitedOfferIntention",
            PLAYER_LIMITED_OFFER_REWARD: "PlayerLimitedOfferReward",
            PLAYER_CONSECUTIVE_REWARD_GROUP: "PlayerConsecutiveRewardGroup",
            PLAYER_TOP_UP_RETURN_GROUP: "PlayerTopUpReturnGroup",
            REFERRAL_REWARD_GROUP: "ReferralRewardGroup",
            PLAYER_RANDOM_REWARD_GROUP: "PlayerRandomRewardGroup",
            PLAYER_CONSUMPTION_REWARD_GROUP: "PlayerConsumptionRewardGroup",
            PLAYER_FREE_TRIAL_REWARD_GROUP: "PlayerFreeTrialRewardGroup",
            PLAYER_ADD_REWARD_POINTS: "PlayerAddRewardPoints",
            PLAYER_MINUS_REWARD_POINTS: "PlayerMinusRewardPoints",
            PLAYER_CONVERT_REWARD_POINTS: "PlayerConvertRewardPoints",
            PLAYER_AUTO_CONVERT_REWARD_POINTS: "PlayerAutoConvertRewardPoints"
        };

        vm.inputDevice = {
            BACKSTAGE: 0,
            WEB_PLAYER: 1,
            WEB_AGENT: 2,
            H5_PLAYER: 3,
            H5_AGENT: 4,
            APP_PLAYER: 5,
            APP_AGENT: 6,
            APP_NATIVE_PLAYER: 7,
            APP_NATIVE_PARTNER: 8
        };

        vm.allPlayerCreditTransferStatus = {
            SUCCESS: 1,
            FAIL: 2,
            REQUEST: 3,
            SEND: 4,
            TIMEOUT: 5
        };
        vm.allGameStatusString = {
            ENABLE: 1,
            MAINTENANCE: 2,
            DISABLE: 3,
            DELETED: 4
        };
        vm.allGameStatusKeys = ['ENABLE', 'MAINTENANCE', 'DISABLE', 'DELETED'];
        vm.allPartnersStatusString = {
            NORMAL: 1,
            FORBID: 2
        };
        vm.allPartnersStatusKeys = ['NORMAL', 'FORBID'];
        vm.partnerCommissionPeriodConst = {
            DAY: "DAY",
            WEEK: "WEEK",
            HALF_MONTH: "HALF_MONTH",
            MONTH: "MONTH"
        };
        vm.partnerCommissionSettlementModeConst = {
            OPSR: "operationAmount - platformFee - serviceFee - totalRewardAmount",
            TB: "TopUp - Bonus"
        };
        vm.allPlayersStatusString = {
            NORMAL: 1,
            FORBID_GAME: 2,
            FORBID: 3,
            BALCKLIST: 4,
            ATTENTION: 5,
            LOGOFF: 6,
            CHEAT_NEW_ACCOUNT_REWARD: 7,
            TOPUP_ATTENTION: 8,
            HEDGING: 9,
            TOPUP_BONUS_SPAM: 10,
            MULTIPLE_ACCOUNT: 11,
            BANNED: 12,
            FORBID_ONLINE_TOPUP: 13,
            BAN_PLAYER_BONUS: 14
        };

        vm.allPlayersStatusKeys = ['NORMAL', 'FORBID_GAME', 'FORBID', 'BALCKLIST', 'ATTENTION', 'LOGOFF',
            'CHEAT_NEW_ACCOUNT_REWARD', 'TOPUP_ATTENTION', 'HEDGING', 'TOPUP_BONUS_SPAM',
            'MULTIPLE_ACCOUNT', 'BANNED', 'FORBID_ONLINE_TOPUP', 'BAN_PLAYER_BONUS'];

        vm.depositMethodList = $scope.depositMethodList;

        vm.allPlayerFeedbackString = {
            NORMAL: "Normal",
            MISSED_CALL: "MissedCall",
            PLAYER_BUSY: "PlayerBusy",
            OTHER: "Other",
            LAST_CALL: "LastCall"
        };
        vm.playerLvlPeriod = {
            NONE: "NONE",
            DAY: "DAY",
            WEEK: "WEEK",
            MONTH: "MONTH"
        };
        vm.allPlayerLevelUpPeriod = {
            DAY: 1,
            WEEK: 2,
            MONTH: 3
            // 1: "DAY",
            // 2: "WEEK",
            // 3: "MONTH"
        };
        vm.topUpTypeList = {
            1: 'TOPUPMANUAL',
            2: 'TOPUPONLINE',
            3: 'TOPUPALIPAY',
            4: 'TOPUPWECHAT',
            5: 'TOPUPQUICKPAY'
        };
        vm.allSettlePeriod = {
            DAILY: 1,
            WEEKLY: 2
        };

        vm.newPlayerListStatus = {
            SUCCESS: "SUCCESS",
            ATTEMPT: "ATTEMPT",
            MANUAL: "MANUAL",
            NOVERIFY: "NoVerify"
        };

        vm.soundChoice = {
            "tone1": "1.wav",
            "tone2": "2.wav",
            "tone3": "3.mp3",
            "tone4": "4.wav",
            "tone5": "5.mp3",
            "tone6": "6.wav",
            "tone7": "7.wav",
            "tone8": "8.ogg",
            "tone9": "9.ogg",
            // "tone10": "10.wav",
            // "tone11": "11.wav",
            // "tone12": "12.wav"
        };

        vm.constProposalStatus = {
            PREPENDING: "PrePending",
            PENDING: "Pending",
            AUTOAUDIT: "AutoAudit",
            PROCESSING: "Processing",
            APPROVED: "Approved",
            REJECTED: "Rejected",
            SUCCESS: "Success",
            FAIL: "Fail",
            CANCEL: "Cancel",
            EXPIRED: "Expired",
            UNDETERMINED: "Undetermined",
            RECOVER: "Recover",
            MANUAL: "Manual",
            NOVERIFY: "NoVerify"
        };

        vm.constRegistrationIntentRecordStatus = {
            INTENT: 1,
            VERIFICATION_CODE: 2,
            SUCCESS: 3,
            FAIL: 4,
            MANUAL: 5,
        };


        // player advertisement
        vm.currentImageButtonNo = 2;
        vm.playerAdvertisementStatus = {
            CLOSE: 0,
            OPEN: 1
        };
        vm.playerAdvertisementTitle = [];
        vm.editPlayerAdvertisementList = [];
        vm.addedButtonName = "activityBtn";
        vm.playerAdvertisementGroup = {};
        vm.playerAdvertisementGroup.orderNo = 0;
        vm.playerAdvertisementGroup.imageButton = [
            {
                buttonName: "activityBtn1",
                url: "",
                hyperLink: "",
                css: "position:absolute; width: auto; height: auto; top:87%; left: 20%",
                hoverCss: ":hover{filter: contrast(200%);}"
            },
            {
                buttonName: "activityBtn2",
                url: "",
                hyperLink: "",
                css: "position:absolute; width: auto; height: auto; top:87%; left: 70%",
                hoverCss: ":hover{filter: contrast(200%);}"
            }
        ];

        vm.rewardInterval = {
            1: "daily",
            2: "weekly",
            3: "Biweekly",
            4: "Monthly",
            5: "No Interval"
        };

        // partner advertisement
        vm.currentPartnerImageButtonNo = 2;
        vm.partnerAdvertisementStatus = {
            CLOSE: 0,
            OPEN: 1
        };
        vm.partnerAdvertisementTitle = [];
        vm.editPartnerAdvertisementList = [];
        vm.addedPartnerButtonName = "activityBtn";
        vm.partnerAdvertisementGroup = {};
        vm.partnerAdvertisementGroup.orderNo = 0;
        vm.partnerAdvertisementGroup.imageButton = [
            {
                buttonName: "activityBtn1",
                url: "",
                hyperLink: "",
                css: "position:absolute; width: auto; height: auto; top:87%; left: 20%",
                hoverCss: ":hover{filter: contrast(200%);}"
            },
            {
                buttonName: "activityBtn2",
                url: "",
                hyperLink: "",
                css: "position:absolute; width: auto; height: auto; top:87%; left: 70%",
                hoverCss: ":hover{filter: contrast(200%);}"
            }
        ];
        vm.editFrontEndDisplay = false;
        vm.commonTableOption = {
            dom: 'Zrtlp',
            "autoWidth": true,
            "scrollX": true,
            // "scrollY": "455px",
            columnDefs: [{targets: '_all', defaultContent: ' '}],
            "scrollCollapse": true,
            "destroy": true,
            "paging": false,
            //"dom": '<"top">rt<"bottom"ilp><"clear">Zlfrtip',
            "language": {
                "emptyTable": $translate("No data available in table"),
            },
        }

        vm.merchantTopupType = { // for reward points purpose only
            '1': 'NetPay',
            //'2': 'WechatQR',
            '3': 'AlipayQR',
            '4': 'WechatApp',
            //'5': 'AlipayApp',
            '6': 'FASTPAY',
            '7': 'QQPAYQR',
            '8': 'UnPayQR',
            '9': 'JdPayQR',
            '10': 'WXWAP',
            '11': 'ALIWAP',
            '12': 'QQWAP',
            //'13': 'PCard',
            '14': 'JDWAP'
        };

        vm.getDepositMethodbyId = {
            1: 'Online',
            2: 'ATM',
            3: 'Counter',
            4: 'AliPayTransfer',
            5: 'weChatPayTransfer',
            6: 'CloudFlashPay',
            7: 'CloudFlashPayTransfer'
        };

        vm.commissionType = {
            0: 'CLOSED_COMMISSION',
            1: 'DAILY_BONUS_AMOUNT',
            2: 'WEEKLY_BONUS_AMOUNT',
            3: 'BIWEEKLY_BONUS_AMOUNT',
            4: 'MONTHLY_BONUS_AMOUNT',
            5: 'WEEKLY_CONSUMPTION'
        };

        vm.partnerCommissionLog= {};

        vm.prepareToBeDeletedProviderGroupId = [];

        vm.longestDelayStatus = "rgb(0,180,0)";

        // Basic library functions
        var Lodash = {
            keyBy: (array, keyName) => {
                var obj = {};
                array.forEach(
                    item => obj[item[keyName]] = item
                );
                return obj;
            },
            cloneDeep: function (value) {
                return value instanceof Array
                    ? value.map(i => Lodash.cloneDeep(i))
                    : $.extend(true, {}, value);
            }
        };
        //specific proposal template
        vm.proposalTemplate = {
            1: '#modalProposal',
            2: '#newPlayerModal'
        };

        vm.createInnerTable = function (id) {
            var content = $('<div>', {
                style: "display:inline-block"
            });
            var div1 = $('<div>', {
                class: 'divTableIndentWrap',
                style: 'width:' + vm.tableIndentWidth + 'px;'
            });
            var label = $('<label>', {
                class: "margin-left-5",
                id: id + 'label',
                style: 'width:100%;display: block'
            });

            div1.append($('<div>', {
                class: 'tableWrapRight',
                style: 'margin-left:' + vm.tableIndentWidth / 3 + 'px;width:' + vm.tableIndentWidth / 3 + 'px;'
            }))
            var div2 = $('<div>', {
                style: 'display: inline-block;width:calc(100% - ' + vm.tableIndentWidth + 'px',
            });
            div2.append(label);
            div2.append($('<table>', {
                id: id,
                "data-curPage": 1,
                "data-limit": 10,
                class: 'display',
                style: 'width:100%'
            }));
            div2.append($('<div>', {
                id: id + 'Page',
                style: 'width:100%'
            }));
            content.append(div1, div2);
            return content.html();
        };
        vm.getGameByIds = function (id) {
            if (!id) return;
            return new Promise(function (resolve, reject) {
                socketService.$socket($scope.AppSocket, 'getGames', {_ids: id}, function (data) {
                    vm.allGame = data.data;
                    console.log('selected game', vm.allGame);
                    $scope.safeApply();
                    resolve();
                }, function (data) {
                    console.log("cannot get game name", data);
                    reject(new Error());
                });
            });

        };

        vm.toggleShowPlatformDropDownList = function () {
            vm.showPlatformDropDownList = !vm.showPlatformDropDownList;

            $scope.safeApply();
        };

        vm.showPlatformDetailTab = function (tabName) {

            vm.selectedPlatformDetailTab = tabName == null ? "backstage-settings" : tabName;
            if (tabName && tabName == "player-display-data") {
                vm.initPlayerDisplayDataModal();
            } else if (tabName && tabName == "partner-display-data") {
                vm.initPartnerDisplayDataModal();
            } else if (tabName && tabName == "system-settlement") {
                vm.prepareSettlementHistory();
            } else if (tabName && tabName == "frontend-module-setting"){
                vm.initFrontendModuleSettingModal();
            }
        };
        vm.isValidCompanyId = function (live800CompanyIdTXT) {
            let live800Arr = live800CompanyIdTXT.split(",");
            live800Arr = live800Arr.filter(item => {
                return item != ''
            });
            vm.showPlatform.live800CompanyId = live800Arr;
            console.log(vm.showPlatform.live800CompanyId);
        }
        vm.isValidCSDepartment = function (departments) {
            if (!vm.showPlatform.csDepartmentTXT || vm.showPlatform.csDepartmentTXT == '') {
                return
            }
            let result = vm.getDepartmentObjId(departments);
            Q.all([result]).then(data => {
                let cData = data[0];
                if (cData.data.length > 0) {
                    vm.showPlatform.csDepartment = cData.data ? cData.data : [];
                }
                if (cData.errMsg) {
                    vm.csDepartmentError = cData.errMsg;
                } else {
                    vm.csDepartmentError = null;
                }
                $scope.safeApply();
            })
        };
        vm.isValidQIDepartment = function (departments) {
            if (!vm.showPlatform.qiDepartmentTXT || vm.showPlatform.qiDepartmentTXT == '') {
                return
            }
            let result = vm.getDepartmentObjId(departments);
            Q.all([result]).then(data => {
                let qData = data[0];
                if (qData.data.length > 0) {
                    vm.showPlatform.qiDepartment = qData.data ? qData.data : [];
                }
                if (qData.errMsg) {
                    vm.qiDepartmentError = qData.errMsg;
                } else {
                    vm.qiDepartmentError = null;
                }
                $scope.safeApply();
            })

        };
        vm.getDepartmentObjId = function (departments) {
            var deferred = Q.defer();
            socketService.$socket($scope.AppSocket, 'getAllDepartments', {}, function (data) {
                let allDpt = data.data;
                let noExist = 0;
                vm.qiDepartmentError = null;
                let result = [];
                let departmentObjId = [];
                let departArr = departments.split(',').map(item => {
                    return item.trim();
                })
                let errMsg = '';
                let errDPT = [];
                for (var d in departArr) {
                    let dpExist = allDpt.filter(item => {
                        if (item.departmentName == departArr[d]) {
                            result.push(item);
                            departmentObjId.push(item._id)
                            return item;
                        }
                    });
                    if (dpExist.length <= 0) {
                        errDPT.push(departArr[d])
                    }
                }
                if (errDPT.length > 0) {
                    let errDptArr = errDPT.join(',');
                    errMsg = errDptArr + '找不到相关部门，请再次输入';
                }
                deferred.resolve({data: departmentObjId, 'errMsg': errMsg});
                $scope.safeApply();
            }, function (err) {
                deferred.reject({});
            });
            return deferred.promise;
        }

        //////////Lin Hao:: Provider List Delay Popup
        // utilService.setupPopover({
        //     context: ulMenu,
        //     elem: '.providerListPopover',
        //     content: function () {
        //         // vm.getProviderLatestTimeRecord();
        //         $scope.safeApply();
        //         return $compile($('#providerListPopover').html())($scope);
        //     },
        //     callback: function () {
        //         let thisPopover = utilService.$getPopoverID(this);
        //         $scope.safeApply();
        //     }
        // });

        vm.getProviderLatestTimeRecord = function () {
            let longestDelayDate = new Date().toString();

            let providerIdArr = [];

            vm.platformProviderList.forEach(p => {
                if (p && p.providerId) {
                    providerIdArr.push(p.providerId);
                }
            })

            let sendData = {
                platformObjId: vm.selectedPlatform.id,
                providerIdList: providerIdArr
            }

            socketService.$socket($scope.AppSocket, 'getProviderLatestTimeRecord', sendData, function (data) {
                $scope.$evalAsync(() => {
                    console.log("getProviderLatestTimeRecord", data.data)
                    if (data && data.data && data.data.length > 0) {
                        data.data.map(d => {
                            if (d) {
                                if (d.createTime) {
                                    d.createTime = vm.dateReformat(d.createTime);

                                    if (d.createTime < longestDelayDate) {
                                        longestDelayDate = d.createTime
                                        vm.longestDelayStatus = d.delayStatusColor;
                                    }
                                }
                            }

                            return;
                        })

                        vm.providerLatestTimeRecord = data.data;
                    }
                })
            });
        };

        vm.setPlatformFooter = function (platformAction) {
            vm.platformAction = platformAction;
        };

        vm.getFrontEndPresetModuleSetting = function() {
            vm.presetModuleSettingData = [];

            if(vm.showPlatform.presetModuleSetting && vm.showPlatform.presetModuleSetting.length > 0){
                vm.showPlatform.presetModuleSetting.forEach(p => {

                    p.displayStatus = ( p.displayStatus == 0 || p.displayStatus == 1 )? p.displayStatus.toString() : null ;
                    vm.presetModuleSettingData.push($.extend({}, p));
                })
            }
        };

        vm.retrievePlatformData = function(platformData) {

            let newList = [
                'csEmailImageUrlList',
                'csPhoneList',
                'csQQList',
                'csUrlList',
                'csWeixinList',
                'csSkypeList',
                'csDisplayUrlList',
                'playerInvitationUrlList',
                'weixinPhotoUrlList',
                'playerWebLogoUrlList',
                'csPartnerEmailList',
                'csPartnerPhoneList',
                'csPartnerUrlList',
                'csPartnerQQList',
                'csPartnerWeixinList',
                'csPartnerSkypeList',
                'csPartnerDisplayUrlList',
                'partnerInvitationUrlList',
                'partnerWeixinPhotoUrlList',
                'partnerWebLogoUrlList'
            ];

            // check if using new data list, else show up the old data
            let newListBoolean = false;
            for(let i = 0; i <newList.length; i++){
                if (platformData[newList[i]] && platformData[newList[i]].length > 0) {
                    newListBoolean = true;
                    break;
                }
            }

            newList.forEach( listName => {

                if (!newListBoolean) {
                    //check the platform data is old or new
                    let nativeFieldName = listName.substr(0, listName.length - 4);
                    if (platformData[nativeFieldName] && platformData[nativeFieldName].length > 0 && (!platformData[listName] || platformData[listName].length == 0)) {
                        let oldData = platformData[nativeFieldName];
                        platformData[listName] = [{content: oldData}];
                    }
                }

                if(platformData[listName] && platformData[listName].length > 0){
                    platformData[listName].forEach(p => {
                        p.isImg = typeof p.isImg === 'number' ? p.isImg.toString() : null ;

                    })
                }
            })

            return platformData;
        };

        vm.populatePlatformData = function () {
            vm.showPlatform = $.extend({}, vm.selectedPlatform.data);
        };

        vm.checkIsImg = function (data){
           data.forEach(p => {
                p.isImg = typeof p.isImg === 'number' ? p.isImg.toString() : null ;

            })
            return data
        }

        vm.showTopupTab = function (tabName) {
            vm.selectedTopupTab = tabName == null ? "manual" : tabName;
        };

        vm.showRewardSettingsTab = function (tabName) {
            vm.selectedRewardSettingsTab = tabName == null ? "manual-reward" : tabName;

            if (tabName == "reward-progress") {
                vm.currentFreeAmount = null;
                vm.playerCreditDetails = null;
                $('#rewardTaskLogTbl').empty();

                $scope.$socketPromise('getPrevious10PlayerRTG', {
                    platformId: vm.selectedPlatform.id,
                    playerId: vm.selectedSinglePlayer._id
                })
                    .then(last30Data => console.log('Player last 30 RTG', last30Data));
            }
        };

        vm.showReapplyLostOrderTab = function (tabName) {
            vm.selectedReapplyLostOrderTab = tabName == null ? "credit" : tabName;
        };

        vm.showRewardPointsAdjustmentTab = function (tabName) {
            vm.selectedRewardPointsAdjustmentTab = tabName == null ? "change" : tabName;
            if (tabName === 'convert') {
                vm.playerRewardPointsDailyLimit = 0;
                vm.playerRewardPointsDailyConvertedPoints = 0;
                vm.playerRewardPointsConversionRate = 0;
                vm.getPlayerRewardPointsDailyLimit();
                vm.getPlayerRewardPointsDailyConvertedPoints();
                vm.getPlayerRewardPointsConversionRate();
            }
        };

        vm.showSmsTab = function (tabName) {
            if (!tabName && (vm.selectedSinglePlayer && vm.selectedSinglePlayer.permission && vm.selectedSinglePlayer.permission.SMSFeedBack === false)) {
                vm.smsModalTab = "smsLogPanel";
                vm.initSMSLog("single");
            }
            else {
                vm.smsModalTab = tabName ? tabName : "smsToPlayerPanel";
            }
        };

        vm.showPlayerAccountingDetailTab = function (tabName) {
            vm.selectedPlayerAccountingDetailTab = tabName == null ? "current-credit" : tabName;
        };

        //before update platform
        function beforeUpdatePlatform () {
            let idStr = vm.showPlatform.department;
            vm.showPlatform.department = {_id: idStr};
            vm.updatePlatform._id = vm.selectedPlatform.id;
        }

        function getProposalTypeByPlatformId (id) {
            socketService.$socket($scope.AppSocket, 'getProposalTypeByPlatformId', {platformId: id}, function (data) {
                $scope.$evalAsync(() => vm.allProposalType = utilService.processProposalType(data.data));
            });
        }

        //set selected platform node
        async function selectPlatformNode (platformObj, option)  {
            vm.selectedPlatform = {
                text: platformObj.name,
                id: platformObj._id,
                selectable: true,
                data: platformObj,
                image: {
                    url: platformObj.icon,
                    width: 30,
                    height: 30,
                }
            };
            vm.curPlatformText = vm.selectedPlatform.text;
            vm.isNotAllowEdit = true;
            vm.isCreateNewPlatform = false;
            $cookies.put("platform", vm.selectedPlatform.text);

            if (vm.selectedPlatform && vm.selectedPlatform.data && vm.selectedPlatform.data.topUpSystemType) {
                commonService.getPaymentSystemName($scope, vm.selectedPlatform.data.topUpSystemType).catch(err => Promise.resolve('')).then(v => {
                    vm.paymentSystemName = v;
                });
            }

            vm.showPlatform = commonService.convertDepartment(vm.selectedPlatform.data);
            beforeUpdatePlatform();
            vm.retrievePlatformData(vm.showPlatform);

            // if (option && !option.loadAll) {
            //     $scope.safeApply();
            //     return;
            // }
            getProposalTypeByPlatformId(vm.selectedPlatform.id);

            // Zero dependencies variable
            [vm.rewardList, vm.promoTypeList, vm.allAlipaysAcc, vm.allWechatpaysAcc, vm.allBankTypeList,
             vm.allProviders, vm.allRewardEvent, vm.rewardEventGroup, vm.rewardPointsAllEvent, vm.allPartnerCommSettPreview,
             vm.playerFeedbackTopic, vm.partnerFeedbackTopic, vm.allPlayerFeedbackResults,vm.allPartnerFeedbackResults,
             [vm.allGameTypesList, vm.allGameTypes], vm.allRewardTypes, [vm.allGameProviders, vm.gameProvidersList],
                vm.credibilityRemarks, vm.platformRewardtype, vm.allPlayerLvl, vm.smsTemplate, vm.allActiveBankTypeList
            ] = await Promise.all([
                commonService.getRewardList($scope, vm.selectedPlatform.id).catch(err => Promise.resolve([])),
                commonService.getPromotionTypeList($scope, vm.selectedPlatform.id).catch(err => Promise.resolve([])),
                commonService.getAllAlipaysByAlipayGroup($scope, $translate, vm.selectedPlatform.data.platformId).catch(err => Promise.resolve([])),
                commonService.getAllWechatpaysByWechatpayGroup($scope, $translate, vm.selectedPlatform.data.platformId).catch(err => Promise.resolve([])),
                commonService.getBankTypeList($scope, vm.selectedPlatform.id).catch(err => Promise.resolve({})),
                commonService.getPlatformProvider($scope, vm.selectedPlatform.id).catch(err => Promise.resolve([])),
                commonService.getRewardEventsByPlatform($scope, vm.selectedPlatform.id).catch(err => Promise.resolve([])),
                commonService.getRewardEventsGroupByPlatform($scope, vm.selectedPlatform.id).catch(err => Promise.resolve([])),
                commonService.getAllRewardPointsEvent($scope).catch(err => Promise.resolve([])),
                commonService.getAllPartnerCommSettPreview($scope, vm.selectedPlatform.id).catch(err => Promise.resolve([])),
                commonService.getPlayerFeedbackTopic($scope, vm.selectedPlatform.id).catch(err => Promise.resolve([])),
                commonService.getPartnerFeedbackTopic($scope, vm.selectedPlatform.id).catch(err => Promise.resolve([])),
                commonService.getAllPlayerFeedbackResults($scope).catch(err => Promise.resolve([])),
                commonService.getAllPartnerFeedbackResults($scope).catch(err => Promise.resolve([])),
                commonService.getAllGameTypes($scope).catch(err => Promise.resolve([[], []])),
                commonService.getAllRewardTypes($scope).catch(err => Promise.resolve([])),
                commonService.getAllGameProviders($scope, vm.selectedPlatform.id).catch(err => Promise.resolve([[], []])),
                commonService.getCredibilityRemarks($scope, vm.selectedPlatform.id).catch(err => Promise.resolve([[], []])),
                commonService.getPlatformRewardProposal($scope, vm.selectedPlatform.id).catch(err => Promise.resolve([])),
                commonService.getAllPlayerLevels($scope, vm.selectedPlatform.id).catch(err => Promise.resolve([])),
                commonService.getSMSTemplate($scope, vm.selectedPlatform.id).catch(err => Promise.resolve([])),
                commonService.getActiveBankTypeList($scope, vm.selectedPlatform.id).catch(err => Promise.resolve({}))
            ]);

            // 1st dependencies variable
            const preValue1 = await Promise.all([
                commonService.getAllBankCard($scope, $translate, vm.selectedPlatform.data.platformId, vm.allBankTypeList).catch(err => Promise.resolve([])),
            ]);

            vm.bankCards = preValue1[0];

            vm.getAllCredibilityRemarks();

            // Initiate player table
            // vm.getPlatformPlayersData(true, true);
            vm.drawPlayerTable([]);

            // check settlement buttons
            let nowDate = new Date().toLocaleDateString();
            let dailyDate = new Date(vm.selectedPlatform.data.lastDailySettlementTime).toLocaleDateString();
            let weeklyDate = new Date(vm.selectedPlatform.data.lastWeeklySettlementTime).toLocaleDateString();
            vm.showDailySettlement = nowDate != dailyDate;
            vm.showWeeklySettlement = (nowDate != weeklyDate) && (vm.selectedPlatform.data.weeklySettlementDay == new Date().getDay());
            vm.platformSettlement = {};
            vm.getCredibilityRemarks();
            vm.partnerAdvanceSearchQuery = {
                creditsOperator: ">=",
                dailyActivePlayerOperator: ">=",
                weeklyActivePlayerOperator: ">=",
                monthlyActivePlayerOperator: ">=",
                validPlayersOperator: ">=",
                totalPlayerDownlineOperator: ">=",
                totalChildrenDepositOperator: ">=",
                totalChildrenBalanceOperator: ">=",
                totalSettledCommissionOperator: ">=",
            };
            vm.playerAdvanceSearchQuery = {
                creditOperator: ">=",
                playerType: 'Real Player (all)'
            };
            vm.advancedQueryObj = {
                creditOperator: ">=",
                playerType: 'Real Player (all)'
            };

            Q.all([vm.getAllPlayerLevels(), vm.getAllPartnerLevels(), vm.getAllPlayerLevelByAllPlatform()]).then(
                function (data) {
                    $scope.$evalAsync(() => {
                        vm.playersQueryCreated = false;
                        vm.loadAlldepartment();
                        vm.rewardTabClicked();
                        vm.getAllPromoCode();
                        vm.getPlatformGameData();
                        vm.loadProposalTypeData();
                        vm.loadBankCardGroupData();
                        vm.loadMerchantGroupData();
                        vm.loadAlipayGroupData();
                        vm.loadWechatPayGroupData();
                        vm.loadQuickPayGroupData();
                        vm.getCredibilityRemarks();
                        vm.getBlacklistIpConfig();
                        vm.onGoingLoadPlatformData = false;
                    })
                },
                function (error) {
                    console.log("error getting all levels", error);
                }
            ).done();
        }

        //search and select platform node
        function searchAndSelectPlatform (text, option) {
            var findNodes = vm.allPlatformData.filter(e => e.name === text);
            if (findNodes && findNodes.length > 0) {
                selectPlatformNode(findNodes[0], option);
            } else {
                selectPlatformNode(vm.allPlatformData[0], option);
            }
        }

        //build platform list based on platform data from server
        function buildPlatformList (data) {
            vm.platformList = [];
            for (var i = 0; i < data.length; i++) {
                vm.platformList.push(vm.createPlatformNode(data[i]));
            }
            var searchText = (vm.platformSearchText || '').toLowerCase();
            var platformsToDisplay = vm.platformList.filter(platformData => platformData.data.name.toLowerCase().includes(searchText));
            $('#platformTree').treeview(
                {
                    data: platformsToDisplay,
                    highlightSearchResults: false,
                    showImage: true,
                    showIcon: false,
                }
            );
            $('#platformTree').on('nodeSelected', function (event, data) {
                selectPlatformNode(data);
                vm.showPlatformDropDownList = false;
            });
        }

        //get all platform data from server
        function loadPlatformData (option) {
            if (vm.onGoingLoadPlatformData) {
                return;
            }

            if (option && option.noParallelTrigger) {
                vm.onGoingLoadPlatformData = true;
            }

            if ($('#platformRefresh').hasClass('fa-spin')) {
                return
            }
            $('#platformRefresh').addClass('fa-spin');

            socketService.$socket($scope.AppSocket, 'getPlatformByAdminId', {adminId: authService.adminId}, function (data) {
                vm.allPlatformData = data.data;
                commonService.sortAndAddPlatformDisplayName(vm.allPlatformData);
                //select platform from cookies data
                let storedPlatform = $cookies.get("platform");
                if (storedPlatform) {
                    searchAndSelectPlatform(storedPlatform, option);
                }
            }, function (err) {
                $('#platformRefresh').removeClass('fa-spin');
            });
        }

        $scope.$on('switchPlatform', () => {
            initPageParam();
            loadPlatformData({loadAll: true, noParallelTrigger: true});
        });

        ////////////////Mark::Platform functions//////////////////
        vm.toggleShowPlatformList = function (flag) {
            if (flag) {
                vm.leftPanelClass = 'widthto25';
                vm.rightPanelClass = 'widthto75';
                vm.showPlatformList = true;
            } else {
                vm.leftPanelClass = 'widthto5 subAll0';
                vm.rightPanelClass = 'widthto95';
                vm.showPlatformList = false;
            }
            $cookies.put("platformShowLeft", vm.showPlatformList);
            $scope.safeApply();
        }
        //search platform by name
        vm.getAllDepartmentData = function (callback) {
            if (!authService.checkViewPermission('Platform', 'PlatformSetting', 'Read')) {
                return;
            }
            socketService.$socket($scope.AppSocket, 'getDepartmentTreeById', {departmentId: authService.departmentId()}, success);

            function success(data) {
                vm.departments = data.data;
                console.log('all departments', vm.departments);
                $scope.safeApply();
            }
        };
        vm.getDepartNamebyId = function (id) {
            if (!id || !vm.departments || vm.departments.length == 0) return '';
            var result = '';
            $.each(vm.departments, function (i, v) {
                if (v._id == id) {
                    result = v.departmentName;
                    return true;
                }
            })
            return result;
        }

        vm.searchPlatform = function () {
            //select cur platform name
            if (vm.platformSearchText) {
                vm.searchAndSelectPlatform(vm.platformSearchText);
            }
        };

        vm.syncPlatform = function () {
            socketService.$socket($scope.AppSocket, 'syncPlatform', {}, function (data) {

            })
        };

        vm.showPlatformDetailModal = function () {
            //$('#platformDetail').html();
            $('.platformName').popover({
                template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title platformDetailClass"></h3><div class="popover-content platformDetailClass"></div></div>',
                html: true,
                title: function () {
                    return $translate('PLATFORM_DETAIL')
                },
                content: function () {
                    return $('#platformDetail').css('color', 'blueviolet').html();
                }
            });
        }

        vm.rebuildPlatformListDebounced = $scope.debounceSearch(() => buildPlatformList(vm.allPlatformData));

        vm.prepareDemoPlayerPrefix = function () {
            vm.alphabetArr = [];
            let alphabet = 97; //represent alphabet a
            let totalNumberOfAlphabet = 26;
            for (let i = 0; i < totalNumberOfAlphabet; i++) {
                let character = String.fromCharCode(alphabet + i);
                vm.alphabetArr.push(character);
            }
        };

        vm.jiguang = {};
        vm.jiguang.appKey = "";
        vm.jiguang.masterKey = "";
        vm.jiguang.tittle = "";
        vm.jiguang.text = "";

        vm.pushNotification = function () {
            if (vm.jiguang && !vm.jiguang.appKey) {
                alert("请先到编辑平台里设置推送API用的App Key。");
                return;
            }

            if (vm.jiguang && !vm.jiguang.masterKey) {
                alert("请先到编辑平台里设置推送API用的Master Key。");
                return;
            }

            if (vm.jiguang && !vm.jiguang.tittle) {
                alert("请先填写标题。");
                return;
            }

            if (vm.jiguang && !vm.jiguang.text) {
                alert("请先填写内容。");
                return;
            }

            socketService.$socket($scope.AppSocket, 'pushNotification', {
                appKey: vm.jiguang.appKey,
                masterKey: vm.jiguang.masterKey,
                tittle: vm.jiguang.tittle,
                text: vm.jiguang.text
            }, function (data) {
                if (data && data.success) {
                    alert("发送成功！");
                }
                else {
                    alert("发送失败！");
                }
            });
        };

        vm.initPlatform = function (bool) {
            vm.editFrontEndDisplay = true;
            vm.pickDay = null;
            vm.pickWeek = null;
            vm.listArray = [];
            //$("form[name='form_new_platform'] input").attr('disabled', !bool);
            $("form[name='form_new_platform'] select").attr('disabled', !bool);
            $("form[name='form_new_platform'] button").attr('disabled', !bool);
            console.log("init ed");
            $scope.safeApply();
        }
        vm.clearShowPlatform = function () {
            vm.showPlatform = {};
            vm.showPlatform.dailySettlementHour = 0;
            vm.showPlatform.dailySettlementMinute = 0;
            vm.showPlatform.weeklySettlementDay = 0;
            vm.showPlatform.weeklySettlementHour = 0;
            vm.showPlatform.weeklySettlementMinute = 0;
            vm.isNotAllowEdit = false;
            vm.isCreateNewPlatform = true;
            $scope.safeApply();
        }
        vm.getDayName = function (d) {
            switch (d) {
                case 1:
                    return $translate('MON');
                case 2:
                    return $translate('TUE');
                case 3:
                    return $translate('WED');
                case 4:
                    return $translate('THU');
                case 5:
                    return $translate('FRI');
                case 6:
                    return $translate('SAT');
                case 0:
                    return $translate('SUN');
                // default:
                //     return '---';
            }
        }
        vm.getHourName = function (num) {
            if (num == 0) return 0;
            // else if (num == 24 || !num) return '--';
            else return num;
        }
        vm.getMinName = function (num) {
            if (num == 0) return 0;
            // else if (num == 60 || !num) return '--';
            else return num;
        }
        // vm.checkSettlementTime = function () {
        //     var temp = $.extend({}, vm.showPlatform);
        //     temp.dailySettlementTime = new Date();
        //     temp.dailySettlementTime.setHours(temp.dailySettlementHour, temp.dailySettlementMinute);
        //     temp.weeklySettlementTime = new Date();
        //     temp.weeklySettlementTime.setHours(temp.weeklySettlementHour, temp.weeklySettlementMinute);
        //     temp.weeklySettlementTime.setDate(new Date().getDate() - new Date().getDay() + temp.weeklySettlementDay);
        //     return temp;
        // };
        //Send data to server to create new platform
        vm.createNewPlatform = function () {
            console.log('vm.showPlatform', vm.showPlatform);
            if (vm.showPlatform.hasOwnProperty('department') && !vm.showPlatform.department.hasOwnProperty('_id')) {
                vm.showPlatform.department._id = vm.showPlatform.department;
                vm.showPlatform.department = vm.showPlatform.department._id;
                delete vm.showPlatform.department._id;
            }
            socketService.$socket($scope.AppSocket, 'createPlatform', vm.showPlatform, function (data) {
                vm.curPlatformText = data.data.name;
                loadPlatformData();
                vm.syncPlatform();
            });
        };

        //Delete selected platform
        vm.deletePlatform = function () {
            socketService.$socket($scope.AppSocket, 'deletePlatformById', {_ids: [vm.selectedPlatform.id]}, function (data) {
                vm.curPlatformText = "";
                vm.selectedPlatform = null;
                loadPlatformData();
                vm.syncPlatform();
            });
        };

        //Daily settlement
        vm.settlementModal = function (type) {
            vm.settlementType = type;
            vm.settlementTableTotals = {};
            $('#modalPlatformSettlement').modal();
            $('#platformSettlementLoadingIcon').show();
            var sendQuery = {
                platformId: vm.selectedPlatform.id,
                period: type == "Daily Settlement" ? 1 : 2
            }
            socketService.$socket($scope.AppSocket, 'getPlatformConsumptionReturnDetail', sendQuery, success, failfunc);
            $scope.safeApply();

            function success(data) {
                $('#platformSettlementLoadingIcon').hide();
                console.log("getPlatformConsumptionReturnDetail:", data);
                vm.drawSettlementTable(data.data);
                var consumptionSum = 0;
                var returnSum = 0;
                for (var player of data.data) {
                    for (var gameTypeId in player) {
                        var record = player[gameTypeId];
                        if (typeof record === 'object' && typeof record.consumptionAmount === 'number') {
                            consumptionSum += record.consumptionAmount;
                        }
                        if (typeof record === 'object' && typeof record.returnAmount === 'number') {
                            returnSum += record.returnAmount;
                        }
                    }
                }
                vm.settlementTableTotals = {
                    totalConsumption: consumptionSum.toFixed(2),
                    totalReturn: returnSum.toFixed(2),
                };
                $scope.safeApply();
            }

            function failfunc(error) {
                $('#platformSettlementLoadingIcon').hide();
                console.error("getPlatformConsumptionReturnDetail:", error);
            }
        }
        vm.drawSettlementTable = function (data) {
            if (data && data.length) {
                data = data.map(item => {
                    item.totalAmount$ = item.totalAmount.toFixed(2);
                    item.totalConsumptionAmount$ = item.totalConsumptionAmount.toFixed(2);
                    return item;
                })
            }
            var option = $.extend({}, {
                data: data,
                columns: [{
                    'title': $translate('PLAYER_NAME'),
                    data: 'playerName'
                }, {
                    'title': $translate('PLAYERID'),
                    data: 'playerId'
                }, {
                    'title': $translate('Total Amount'),
                    data: 'totalAmount$', sClass: "alignRight"
                }, {
                    'title': $translate('CONSUMPTION'),
                    data: 'totalConsumptionAmount$', sClass: "alignRight"
                }]
            }, vm.generalDataTableOptions);
            $('#settlementTable').DataTable(option);
        }
        vm.performSettlement = function () {
            var socketAPI;
            if (vm.settlementType == "Daily Settlement") {
                socketAPI = "startPlatformDailySettlement"
            } else if (vm.settlementType == "Weekly Settlement") {
                socketAPI = "startPlatformWeeklySettlement"
            }
            vm.platformSettlement.message = '';
            vm.platformSettlement.processing = true;
            socketService.$socket($scope.AppSocket, socketAPI, {platformId: vm.selectedPlatform.id}, success, failfunc);

            function success(data) {
                vm.platformSettlement.processing = false;
                vm.platformSettlement.message = 'Success';
                console.log('settle result', data);
                $scope.safeApply();
            }

            function failfunc(error) {
                vm.platformSettlement.processing = false;
                vm.platformSettlement.message = error.error.message;
                console.log(error);
                $scope.safeApply();
            }
        }
        vm.dailySettlement = function (callback, bFix) {
            vm.platformSettlement.processing = true;
            var actionName = bFix ? "fixPlatformDailySettlement" : "startPlatformDailySettlement";
            socketService.$socket($scope.AppSocket, actionName, {platformId: vm.selectedPlatform.id}, success, failfunc);

            function success(data) {
                vm.platformSettlement.processing = false;
                if (callback) {
                    callback(data);
                }
                loadPlatformData();
            };

            function failfunc(error) {
                console.log(error);
                vm.platformSettlement.processing = false;
                if (callback) {
                    callback(error);
                }
            };
        };

        //Weekly settlement
        vm.weeklySettlement = function (callback, bFix) {
            vm.platformSettlement.processing = true;
            var actionName = bFix ? "fixPlatformWeeklySettlement" : "startPlatformWeeklySettlement";
            socketService.$socket($scope.AppSocket, actionName, {platformId: vm.selectedPlatform.id}, success, failfunc);

            function success(data) {
                if (callback) {
                    callback(data);
                }
                vm.platformSettlement.processing = false;
                loadPlatformData();
            };

            function failfunc(error) {
                console.log(error);
                vm.platformSettlement.processing = false;
                if (callback) {
                    callback(error);
                }
            };
        };

        //Weekly reward settlement
        vm.weeklyRewardSettlement = function () {
            socketService.$socket($scope.AppSocket, 'startPlatformRewardEventSettlement', {platformId: vm.selectedPlatform.id}, success, failfunc);

            function success(data) {
                console.log(success);
            };

            function failfunc(error) {
                console.log(error);
            };
        };

        vm.prepareSettlementHistory = function () {
            vm.initQueryTimeFilter('modalUpdatePlatform');
            vm.queryPara.modalUpdatePlatform.interval = 'daily';
            $scope.safeApply();
            // vm.processDataTableinModal('#modalUpdatePlatform', '#platformSettlementHistoryTbl');
            // vm.getSettlementHistory();
        }
        vm.getSettlementHistory = function () {
            socketService.$socket($scope.AppSocket, 'getSettlementHistory', {
                query: {
                    type: "platform",
                    interval: vm.queryPara.modalUpdatePlatform.interval,
                    id: vm.selectedPlatform.id,
                    createTime: {
                        $gte: vm.queryPara.modalUpdatePlatform.startTime.data('datetimepicker').getLocalDate(),
                        $lt: vm.queryPara.modalUpdatePlatform.endTime.data('datetimepicker').getLocalDate(),
                    }
                }
            }, success, failfunc);

            function success(data) {
                console.log('settlement history', data);
                vm.platformSettlementHis = data.data;
                $scope.safeApply();
                vm.updateDataTableinModal('#modalUpdatePlatform', '#platformSettlementHistoryTbl');
            };

            function failfunc(error) {
                console.log(error);
            };
        }

        vm.startPlatformPartnerCommissionSettlement = function ($event) {
            vm.partnerCommissionSettlement = {
                data: [],
                result: false,
                status: 'ready'
            };

            let modes = [1, 2, 3, 4, 5];
            /* flags to disable settlement mode button after submit sucessfully*/
            vm.partnerSettlementSubmitted = {
                1 : false,
                2 : false,
                3 : false,
                4 : false,
                5 : false
            };

            $scope.$socketPromise("getPlatformPartnerSettLog", {
                platformObjId: vm.selectedPlatform.id,
                modes: modes
            }).then(
                logs => {
                    $scope.$evalAsync(() => {
                        vm.partnerCommissionSettlement.data = logs.data;
                        $('#partnerCommissionSettlementModal').modal('show');
                    })
                }
            )

            commonService.getAllPartnerCommSettPreview($scope, vm.selectedPlatform.id).then(
                previewData => {
                    vm.allPartnerCommSettPreview = previewData;
                }
            );
        };

        vm.generatePartnerCommSettPreview = (modeObj) => {
            $scope.$socketPromise("generatePartnerCommSettPreview", {
                platformObjId: vm.selectedPlatform.id,
                settMode: modeObj.mode,
                startTime: modeObj.settStartTime,
                endTime: modeObj.settEndTime
            }).then(
                () => {
                    vm.startPlatformPartnerCommissionSettlement()
                },
                error => {
                    socketService.showErrorMessage($translate(error.error.error));
                }
            );
        };

        vm.skipNextPartnerCommissionPeriod = (modeObj, toLatest = false, isConfirm = false) => {
            if (!isConfirm) {
                vm.modalYesNo = {};
                vm.modalYesNo.modalTitle = $translate("Skip next partner commission settlement period");

                if (toLatest) {
                    vm.modalYesNo.modalTitle = $translate("Skip to latest available commission settlement period");
                }

                vm.modalYesNo.modalText = $translate("Are you sure");
                vm.modalYesNo.actionYes = () => vm.skipNextPartnerCommissionPeriod(modeObj, toLatest, true);
                $('#modalYesNo').modal();
            }
            else {
                $scope.$socketPromise("skipNextPartnerCommissionPeriod", {
                    platformObjId: vm.selectedPlatform.id,
                    settMode: modeObj.mode,
                    startTime: modeObj.settStartTime,
                    endTime: modeObj.settEndTime,
                    toLatest: toLatest
                }).then(
                    () => {
                        vm.startPlatformPartnerCommissionSettlement();
                    },
                    error => {
                        socketService.showErrorMessage($translate(error.error.error));
                    }
                )
            }
        };

        vm.initSettlePartnerComm = (prev) => {
            vm.partnerCommVar = {};
            vm.partnerDLCommDetailTotal = {};

            vm.partnerCommVar.platformFeeTab = 0;
            vm.partnerCommVar.settMode = prev.settMode;
            vm.partnerCommVar.startTime = prev.startTime;
            vm.partnerCommVar.endTime = prev.endTime;
            if (!vm.partnerSettlementSubmitted) {
                vm.partnerSettlementSubmitted = {
                    1: false,
                    2: false,
                    3: false,
                    4: false,
                    5: false
                };
            }

            vm.selectedSettlePartnerCommPrev = prev;

            $scope.$socketPromise("initSettlePartnerComm", {
                platformObjId: vm.selectedPlatform.id,
                settMode: prev.settMode,
                startTime: prev.startTime,
                endTime: prev.endTime
            }).then(
                res => {
                    console.log('res', res);
                }
            );

            $scope.$socketPromise("getPartnerCommissionLog", {
                platformObjId: vm.selectedPlatform.id,
                commissionType: prev.settMode,
                startTime: prev.startTime,
                endTime: prev.endTime
            }).then(
                partnerCommObj => {
                    vm.partnerCommissionLog = partnerCommObj.data;
                    vm.partnerCommissionLog.forEach( partner => {
                            if (partner){
                                partner.isAnyCustomPlatformFeeRate = false;
                                if (partner.rawCommissions && partner.rawCommissions.length > 0) {
                                    (partner.rawCommissions).forEach((group, idxgroup) => {
                                            group.commissionRate = +(group.commissionRate*100).toFixed(2);
                                            partner.isAnyCustomPlatformFeeRate = group.isCustomPlatformFeeRate ? true : partner.isAnyCustomPlatformFeeRate;
                                            if (group.isCustomPlatformFeeRate == true) {
                                                vm.partnerCommVar.platformFeeTab = idxgroup;
                                            }
                                        }
                                    );
                                }
                            }
                        }
                    );
                    console.log('partnerCommissionLog', vm.partnerCommissionLog);
                    $('#modalPartnerCommPreview').modal();
                }
            )
        };

        /* Calculate sum for partner downlines commission details */
        vm.calculatePartnerDLTotalDetail= function (partnerDownLineCommDetail, detailType){
            for (var i in vm.partnerDLCommDetailTotal){
                delete vm.partnerDLCommDetailTotal[i];
            }

            if (partnerDownLineCommDetail && partnerDownLineCommDetail.length > 0){
                if (!partnerDownLineCommDetail[0]) {
                    partnerDownLineCommDetail.push({});
                }
                (Object.keys(partnerDownLineCommDetail[0][detailType])).forEach( key => {
                    if (key === "consumptionProviderDetail") {
                        (Object.keys(partnerDownLineCommDetail[0][detailType][key])).forEach( subkey1 => {
                            vm.partnerDLCommDetailTotal[subkey1] = {};
                            (Object.keys(partnerDownLineCommDetail[0][detailType][key][subkey1])).forEach( subkey2 => {
                                vm.partnerDLCommDetailTotal[subkey1][subkey2] =
                                    partnerDownLineCommDetail.length !== 0 ? partnerDownLineCommDetail.reduce((a, item) =>
                                        a + (Number.isFinite(item[detailType][key][subkey1][subkey2]) ? item[detailType][key][subkey1][subkey2] : 0), 0) : 0;
                            });
                        });
                    }
                    else {
                        vm.partnerDLCommDetailTotal = vm.partnerDLCommDetailTotal || {};
                        vm.partnerDLCommDetailTotal[key] = $scope.calculateTotalSum(partnerDownLineCommDetail, detailType, key);
                    }
                });
            }
            $scope.safeApply();
        };

        /* Check for no remark entry if settleMethod is not normal settlement */
        vm.checkPartnerCommissionLogRemark = function () {
            delete vm.partnerCommVar.checkedRemark;
            let applyPartnerCommSettlementArray = [];
            vm.partnerCommissionLog.forEach( partner => {
                if (partner) {
                    applyPartnerCommSettlementArray.push(
                        {
                            logId: partner._id,
                            settleType: parseInt(partner.settleMethod),
                            remark: partner.remarks ? partner.remarks : ""
                        }
                    );
                    if (partner.settleMethod != "1") {
                        if (!partner.remarks || partner.remarks == ""){
                            vm.partnerCommVar.checkedRemark = "Please Add Remark If Not Normal Executed!";
                        }
                    }
                }
            });

            if (!vm.partnerCommVar.checkedRemark){
                vm.partnerSettlementSubmitted[vm.partnerCommVar.settMode] = true;
                vm.bulkApplyPartnerCommission(applyPartnerCommSettlementArray);
            }
        };

        /* Cancel preview */
        vm.cancelPreview = (isConfirm = false) => {
            if (!isConfirm) {
                vm.modalYesNo = {};
                vm.modalYesNo.modalTitle = $translate("CANCEL PREVIEW");
                vm.modalYesNo.modalText = $translate("Are you sure");
                vm.modalYesNo.actionYes = () => vm.cancelPreview(true);
                $('#modalYesNo').modal();
            }
            else {
                let sendData = {
                    commSettLog: vm.selectedSettlePartnerCommPrev,
                };
                let partnerCommLogIdArr = [];

                vm.partnerCommissionLog.forEach( partnerCommLog => {
                    if (partnerCommLog) {
                        partnerCommLogIdArr.push(partnerCommLog._id);
                    }
                });

                sendData.partnerCommLogId = partnerCommLogIdArr;

                socketService.$socket($scope.AppSocket, 'cancelPartnerCommissionPreview', sendData, function (data) {
                    vm.loadTab('Partner');
                });
            }
        };

        /* Apply bulk partner commission settlement */
        vm.bulkApplyPartnerCommission = function (applyPartnerCommSettlementArray) {
            let sendData = {
                applySettlementArray: applyPartnerCommSettlementArray,
                platformObjId: vm.selectedPlatform.data._id,
                commissionType: vm.partnerCommVar.settMode,
                startTime: vm.partnerCommVar.startTime,
                endTime: vm.partnerCommVar.endTime
            };

            socketService.$socket($scope.AppSocket, 'bulkApplyPartnerCommission', sendData, function (data) {
                console.log('returnOutput', data);
            });
        };


        vm.performPartnerCommissionSetlement = function () {
            vm.partnerCommissionSettlement.status = 'processing';
            socketService.$socket($scope.AppSocket, 'startPlatformPartnerCommissionSettlement',
                {platformId: vm.selectedPlatform.id},
                function (data) {
                    console.log('partnercommission', data);
                    vm.partnerCommissionSettlement.status = 'completed';
                    vm.partnerCommissionSettlement.result = $translate('Success');
                    $scope.safeApply();
                }, function (err) {
                    console.log('err', err);
                    vm.partnerCommissionSettlement.status = 'completed';
                    vm.partnerCommissionSettlement.result = err.error ? (err.error.message ? err.error.message : err.error) : '';
                    $scope.safeApply();
                });
        };

        function getConsumptionReturnPeriodTime(event) {
            return $scope.$socketPromise('getConsumptionReturnPeriodTime', {period: event.settlementPeriod}).then(res => {
                $scope.$evalAsync(() => {
                    event.settlementStartTime = vm.dateReformat(res.data.startTime);
                    event.settlementEndTime = vm.dateReformat(res.data.endTime);
                })
            })
        };

        vm.startPlatformPlayerConsumptionReturnSettlement = function ($event) {
            vm.playerConsumptionReturnSettlement = {
                result: false,
                status: 'ready'
            };

            let p = Promise.resolve();

            vm.allRewardEvent.map(event => {
                if (event && event.settlementPeriod && event.type.name == "PlayerConsumptionReturn") {
                    p = p.then(() => getConsumptionReturnPeriodTime(event))
                }
            });

            $('#playerConsumptionReturnSettlementModal').modal('show');
        };

        vm.startPlatformRTGEventSettlement = function (event) {
            vm.platformRTGEventSettlement = {
                result: false,
                status: 'ready'
            };

            vm.selectedSettlementRewardEvent = event;

            let socketName;

            switch (event.condition.interval) {
                case "1":
                case 1:
                    socketName = "getYesterdaySGTime";
                    break;
                case "2":
                case 2:
                    socketName = "getLastWeekSGTime";
                    break;
                case "3":
                case 3:
                    socketName = "getLastBiWeekSGTime";
                    break;
                case "4":
                case 4:
                    socketName = "getLastMonthSGTime";
            }

            socketService.$socket($scope.AppSocket, socketName,
                {},
                ret => {
                    vm.platformRTGEventSettlement.startTime = vm.dateReformat(ret.data.startTime);
                    vm.platformRTGEventSettlement.endTime = vm.dateReformat(ret.data.endTime);
                    $scope.safeApply();
                });

            $('#platformRTGEventSettlementModal').modal('show');
            $scope.safeApply();
        };

        vm.performRTGApplySettlement = function (event) {
            if (!event) {
                return;
            }

            vm.platformRTGEventSettlement.status = 'processing';
            let eventCode = event.code;

            $scope.$socketPromise('startPlatformRTGEventSettlement', {
                platformId: vm.selectedPlatform.id,
                eventCode: eventCode
            }).then(
                data => {
                    vm.platformRTGEventSettlement.status = 'completed';
                    vm.platformRTGEventSettlement.result = $translate('Success');
                    $scope.safeApply();
                },
                err => {
                    console.log('err', err);
                    vm.platformRTGEventSettlement.status = 'completed';
                    vm.platformRTGEventSettlement.result = err.error ? (err.error.message ? err.error.message : err.error) : '';
                    $scope.safeApply();
                }
            );
        };

        vm.performPlayerConsumptionReturnSettlement = function () {
            let eventArr = [];
            let socketParam = {platformId: vm.selectedPlatform.id};

            vm.playerConsumptionReturnSettlement.status = 'processing';

            $('#playerConsumptionReturnSettlementTbl tbody input[type="checkbox"]:checked').each((i, v) => {
                let filteredArr = vm.allRewardEvent.filter(function (rewardEvent) {
                    if (rewardEvent && rewardEvent.type) {
                        return rewardEvent.type.name == "PlayerConsumptionReturn";
                    } else {
                        return false;
                    }
                });
                eventArr.push(filteredArr[v.value]);
            });

            if (eventArr.length > 0) {
                socketParam.selectedEvent = eventArr;
            }

            console.log("sendData startPlatformPlayerConsumptionReturnSettlement", socketParam);
            socketService.$socket($scope.AppSocket, 'startPlatformPlayerConsumptionReturnSettlement',
                socketParam,
                function (data) {
                    console.log('playerConsumptionReturn', data);
                    vm.playerConsumptionReturnSettlement.status = 'completed';
                    vm.playerConsumptionReturnSettlement.result = $translate('Success');
                    $scope.safeApply();
                }, function (err) {
                    console.log('err', err);
                    vm.playerConsumptionReturnSettlement.status = 'completed';
                    vm.playerConsumptionReturnSettlement.result = err.error ? (err.error.message ? err.error.message : err.error) : '';
                    $scope.safeApply();
                });
        };

        vm.startPlayerLevelSettlement = function ($event) {
            vm.playerLevelSettlement = {
                result: false,
                status: 'ready'
            };

            let socketActionLvlUp = '';
            let socketActionLvlDown = '';
            switch (vm.selectedPlatform.data.playerLevelUpPeriod) {
                case vm.allPlayerLevelUpPeriod.DAY:
                    socketActionLvlUp = 'getYesterdaySGTime';
                    break;
                case vm.allPlayerLevelUpPeriod.WEEK:
                    socketActionLvlUp = 'getLastWeekSGTime';
                    break;
                case vm.allPlayerLevelUpPeriod.MONTH:
                    socketActionLvlUp = 'getLastMonthSGTime';
                    break;
            }

            switch (vm.selectedPlatform.data.playerLevelDownPeriod) {
                case vm.allPlayerLevelUpPeriod.DAY:
                    socketActionLvlDown = 'getYesterdaySGTime';
                    break;
                case vm.allPlayerLevelUpPeriod.WEEK:
                    socketActionLvlDown = 'getLastWeekSGTime';
                    break;
                case vm.allPlayerLevelUpPeriod.MONTH:
                    socketActionLvlDown = 'getLastMonthSGTime';
                    break;
            }

            socketService.$socket($scope.AppSocket, socketActionLvlUp,
                {},
                ret => {
                    vm.playerLevelSettlement.lvlUpStartTime = vm.dateReformat(ret.data.startTime);
                    vm.playerLevelSettlement.lvlUpEndTime = vm.dateReformat(ret.data.endTime);
                    $scope.safeApply();
                });

            socketService.$socket($scope.AppSocket, socketActionLvlDown,
                {},
                ret => {
                    let dateStart = new Date(ret.data.startTime);
                    let dateEnd = new Date(ret.data.endTime);
                    // dateStart.setHours(dateStart.getHours() + 12);
                    // dateEnd.setHours(dateEnd.getHours() + 12);
                    vm.playerLevelSettlement.lvlDownStartTime = vm.dateReformat(dateStart);
                    vm.playerLevelSettlement.lvlDownEndTime = vm.dateReformat(dateEnd);
                    $scope.safeApply();
                });

            $('#playerLevelSettlementModal').modal('show');
            $scope.safeApply();
        };

        vm.performPlayerLevelSettlement = function (upOrDown) {
            vm.playerLevelSettlement.status = 'processing';
            socketService.$socket($scope.AppSocket, 'startPlatformPlayerLevelSettlement',
                {platformId: vm.selectedPlatform.id, upOrDown: upOrDown, isPlayer: true},
                function (data) {
                    console.log('playerLevelSettlement', data);
                    vm.playerLevelSettlement.status = 'completed';
                    vm.playerLevelSettlement.result = $translate('Success');
                    $scope.safeApply();
                }, function (err) {
                    console.log('err', err);
                    vm.playerLevelSettlement.status = 'completed';
                    vm.playerLevelSettlement.result = err.error ? (err.error.message ? err.error.message : err.error) : '';
                    $scope.safeApply();
                });
        };

        vm.startPlatformPlayerConsumptionIncentiveSettlement = function ($event) {
            vm.playerConsumptionIncentiveSettlement = {
                result: false,
                status: 'ready'
            };

            socketService.$socket($scope.AppSocket, 'getYesterdaySGTime',
                {},
                ret => {
                    vm.playerConsumptionIncentiveSettlement.startTime = vm.dateReformat(ret.data.startTime);
                    vm.playerConsumptionIncentiveSettlement.endTime = vm.dateReformat(ret.data.endTime);
                    $scope.safeApply();
                });


            $('#playerConsumptionIncentiveSettlementModal').modal('show');
            $scope.safeApply();
        }
        vm.performPlayerConsumptionIncentiveSettlement = function () {
            vm.playerConsumptionIncentiveSettlement.status = 'processing';
            socketService.$socket($scope.AppSocket, 'startPlatformPlayerConsumptionIncentiveSettlement',
                {platformId: vm.selectedPlatform.id},
                function (data) {
                    console.log('playerConsumptionIncentive', data);
                    vm.playerConsumptionIncentiveSettlement.status = 'completed';
                    vm.playerConsumptionIncentiveSettlement.result = $translate('Success');
                    $scope.safeApply();
                }, function (err) {
                    console.log('err', err);
                    vm.playerConsumptionIncentiveSettlement.status = 'completed';
                    vm.playerConsumptionIncentiveSettlement.result = err.error ? (err.error.message ? err.error.message : err.error) : '';
                    $scope.safeApply();
                });
        };

        vm.startPlayerConsecutiveConsumptionSettlement = function ($event) {
            vm.playerConsecutiveConsumptionSettlement = {
                result: false,
                status: 'ready'
            };

            socketService.$socket($scope.AppSocket, 'getYesterdayConsumptionReturnSGTime',
                {},
                ret => {
                    vm.playerConsecutiveConsumptionSettlement.startTime = vm.dateReformat(ret.data.startTime);
                    vm.playerConsecutiveConsumptionSettlement.endTime = vm.dateReformat(ret.data.endTime);
                    $scope.safeApply();
                });

            $('#playerConsecutiveConsumptionSettlementModal').modal('show');
            $scope.safeApply();
        };

        vm.performPlayerConsecutiveConsumptionSettlement = function () {
            vm.playerConsecutiveConsumptionSettlement.status = 'processing';
            socketService.$socket($scope.AppSocket, 'startPlayerConsecutiveConsumptionSettlement',
                {platformId: vm.selectedPlatform.id},
                function (data) {
                    console.log('playerConsecutiveConsumptionSettlement', data);
                    vm.playerConsecutiveConsumptionSettlement.status = 'completed';
                    vm.playerConsecutiveConsumptionSettlement.result = $translate('Success');
                    $scope.safeApply();
                }, function (err) {
                    console.log('err', err);
                    vm.playerConsecutiveConsumptionSettlement.status = 'completed';
                    vm.playerConsecutiveConsumptionSettlement.result = err.error ? (err.error.message ? err.error.message : err.error) : '';
                    $scope.safeApply();
                });
        };

        vm.initTransferAllPlayersCreditFromProvider = function ($event) {
            $('#modalTransferOutAllPlayerCreditFromGameProvider').modal('show');
            $scope.safeApply();
        };

        vm.updatePlatformConfig = function () {
            vm.isNotAllowEdit = false;
            vm.isCreateNewPlatform = false;
        };

        vm.cancelUpdatePlatformConfig = function () {
            vm.isNotAllowEdit = true;
            if (vm.isCreateNewPlatform) {
                vm.bindSelectedPlatformData();
            }
            vm.isCreateNewPlatform = false;
            if (vm.selectedPlatform && vm.selectedPlatform.data) {
                if (vm.showPlatform) {
                    vm.showPlatform.demoPlayerPrefix = vm.selectedPlatform.data.demoPlayerPrefix;
                    vm.getFrontEndPresetModuleSetting();
                }
            }
        };

        vm.bindSelectedPlatformData = function () {
            if (vm.selectedPlatform && vm.selectedPlatform.data) {
                vm.showPlatform = $.extend({}, vm.selectedPlatform.data);
                beforeUpdatePlatform();
            }
        }

        //update selected platform data
        vm.updatePlatformAction = function () {
            if (vm.showPlatform.department.hasOwnProperty('_id')) {
                vm.showPlatform.department = vm.showPlatform.department._id;
            }

            if (vm.presetModuleSettingData){
                vm.showPlatform.presetModuleSetting =  vm.presetModuleSettingData;
            }

            socketService.$socket($scope.AppSocket, 'updatePlatform',
                {
                    query: {_id: vm.selectedPlatform.id},
                    updateData: vm.showPlatform
                },
                function (data) {
                    vm.curPlatformText = vm.showPlatform.name;
                    loadPlatformData({loadAll: false});
                    vm.editFrontEndDisplay = false;
                    vm.getFrontEndPresetModuleSetting();
                    vm.syncPlatform();
                });
        };

        vm.initSendMultiMessage = function () {
            //vm.getSMSTemplate();
            vm.sendMultiMessage = {
                totalCount: 0,
                playerType: 'Real Player (all)',
                playerLevel: '',
                topUpTimesValue: null,
                topUpTimesValueTwo: null,
                topUpTimesOperator: '>=',
                loginTimesValue: null,
                loginTimesValueTwo: null,
                loginTimesOperator: '>=',
                channelMaxChar: 100,
                wordCount: 0,
                phoneCount: 0,
                numUsedMessage: 0,
                checkAllRow: false,
                numReceived: 0,
                numFailed: 0,
                numRecipient: 0,
                messageType: "sms",
                sendBtnText: $translate("SEND")
            };
            $scope.getUsableChannelList(function () {
                vm.sendMultiMessage.channel = $scope.channelList ? $scope.channelList[0] : null;
            });
            setTimeout(
                () => {
                    vm.setupRemarksMultiInputMultiMsg();
                },0);
            utilService.actionAfterLoaded('#mutilplePlayerTablePage', function () {
                vm.sendMultiMessage.accStartTime = utilService.createDatePicker('#sendMultiMessageQuery .accStart');
                vm.sendMultiMessage.accEndTime = utilService.createDatePicker('#sendMultiMessageQuery .accEnd');
                vm.sendMultiMessage.regStartTime = utilService.createDatePicker('#sendMultiMessageQuery .regStart');
                vm.sendMultiMessage.regEndTime = utilService.createDatePicker('#sendMultiMessageQuery .regEnd');

                utilService.clearDatePickerDate('#sendMultiMessageQuery .accStart');
                utilService.clearDatePickerDate('#sendMultiMessageQuery .accEnd');
                utilService.clearDatePickerDate('#sendMultiMessageQuery .regStart');
                utilService.clearDatePickerDate('#sendMultiMessageQuery .regEnd');

                vm.sendMultiMessage.pageObj = utilService.createPageForPagingTable("#mutilplePlayerTablePage", {pageSize: 100}, $translate, function (curP, pageSize) {
                    vm.commonPageChangeHandler(curP, pageSize, "sendMultiMessage", vm.searchPlayersForSendingMessage)
                });
                vm.searchPlayersForSendingMessage(true);
            })
        };

        // vm.getSMSTemplate = function () {
        //     vm.smsTemplate = [];
        //     $scope.$socketPromise('getMessageTemplatesForPlatform', {
        //         platform: vm.selectedPlatform.id,
        //         format: 'smstpl'
        //     }).then(function (data) {
        //         vm.smsTemplate = data.data;
        //         console.log("vm.smsTemplate", vm.smsTemplate);
        //         $scope.safeApply();
        //     }).done();
        // };

        vm.useSMSTemplate = function () {
            vm.sendMultiMessage.messageContent = vm.smsTplSelection[0] ? vm.smsTplSelection[0].content : '';
            vm.messagesChange();
        };

        vm.changeSMSTemplate = function () {
            vm.smsPlayer.message = vm.smstpl ? vm.smstpl.content : '';
        };

        vm.searchPlayersForSendingMessage = function (newSearch) {
            if (!vm.selectedPlatform) {
                return;
            }
            $('#mutilplePlayerTable tbody tr').removeClass('selected');
            $('#mutilplePlayerTable tbody input[type="checkbox"]').prop("checked", vm.sendMultiMessage.checkAllRow);
            vm.smsTplSelection = null;
            vm.sendMultiMessage = $.extend({}, vm.sendMultiMessage, {
                checkAllRow: false,
                numReceived: 0,
                numFailed: 0,
                numRecipient: 0,
                sendBtnText: $translate("SEND")
            });

            var playerQuery = {
                registrationTime: {
                    $gte: vm.sendMultiMessage.regStartTime.data('datetimepicker').getLocalDate() || new Date(0),
                    $lt: vm.sendMultiMessage.regEndTime.data('datetimepicker').getLocalDate() || new Date(),
                },
                lastAccessTime: {
                    $gte: vm.sendMultiMessage.accStartTime.data('datetimepicker').getLocalDate() || new Date(0),
                    $lt: vm.sendMultiMessage.accEndTime.data('datetimepicker').getLocalDate() || new Date(),
                }
            };
            if (vm.sendMultiMessage.credibilityRemarks) {
                playerQuery.credibilityRemarks = vm.sendMultiMessage.credibilityRemarks;
            }
            if (vm.sendMultiMessage.playerLevel) {
                playerQuery.playerLevel = vm.sendMultiMessage.playerLevel;
            }
            if (vm.sendMultiMessage.playerType) {
                playerQuery.playerType = vm.sendMultiMessage.playerType
            }
            if (vm.sendMultiMessage && vm.sendMultiMessage.topUpTimesValue != null && vm.sendMultiMessage.topUpTimesOperator) {
                let topUpTimesValue = vm.sendMultiMessage.topUpTimesValue;
                let topUpTimesValueTwo = vm.sendMultiMessage.topUpTimesValueTwo;
                let topUpTimesOperator = vm.sendMultiMessage.topUpTimesOperator;

                switch (topUpTimesOperator) {
                    case '<=':
                        playerQuery.topUpTimes = {$lte: topUpTimesValue};
                        break;
                    case '>=':
                        playerQuery.topUpTimes = {$gte: topUpTimesValue};
                        break;
                    case '=':
                        playerQuery.topUpTimes = topUpTimesValue;
                        break;
                    case 'range':
                        if (topUpTimesValueTwo != null) {
                            playerQuery.topUpTimes = {$gte: topUpTimesValue, $lte: topUpTimesValueTwo};
                        }
                        break;
                }
            }
            if (vm.sendMultiMessage.bankAccount) {
                playerQuery.bankAccount = vm.sendMultiMessage.bankAccount;
            }
            if (vm.sendMultiMessage && vm.sendMultiMessage.loginTimesValue != null && vm.sendMultiMessage.loginTimesOperator) {
                let loginTimesValue = vm.sendMultiMessage.loginTimesValue;
                let loginTimesValueTwo = vm.sendMultiMessage.loginTimesValueTwo;
                let loginTimesOperator = vm.sendMultiMessage.loginTimesOperator;

                switch (loginTimesOperator) {
                    case '<=':
                        playerQuery.loginTimes = {$lte: loginTimesValue};
                        break;
                    case '>=':
                        playerQuery.loginTimes = {$gte: loginTimesValue};
                        break;
                    case '=':
                        playerQuery.loginTimes = loginTimesValue;
                        break;
                    case 'range':
                        if (loginTimesValueTwo != null) {
                            playerQuery.loginTimes = {$gte: loginTimesValue, $lte: loginTimesValueTwo};
                        }
                        break;
                }
            }
            var sendQuery = {
                platformId: vm.selectedPlatform.id,
                query: playerQuery,
                index: vm.sendMultiMessage.index || 0,
                limit: vm.sendMultiMessage.limit || 100,
                sortCol: vm.sendMultiMessage.sortCol
            };
            socketService.$socket($scope.AppSocket, 'getPagePlayerByAdvanceQuery', sendQuery, function (data) {
                console.log('playerData', data);

                var size = data.data.size || 0;
                var result = data.data.data || [];
                vm.drawSendMessagesTable(result.map(item => {
                    if (!item.name && item.partnerName) {
                        item.name = item.partnerName;
                    }
                    item.lastAccessTime$ = vm.dateReformat(item.lastAccessTime);
                    item.registrationTime$ = vm.dateReformat(item.registrationTime);
                    return item;
                }), size, newSearch);
                vm.sendMultiMessage.totalCount = size;
                vm.sendMultiMessage.pageObj.init({maxCount: size}, newSearch);
                $scope.safeApply();
            });
        }
        vm.initVertificationSMS = function () {
            vm.smsRecordQuery = {};
            vm.smsRecordQuery.purpose = "";
            vm.smsRecordQuery.accountStatus = "";
            vm.smsRecordQuery.inputDevice = "";
            vm.smsRecordQuery.index = 0;
            vm.smsRecordQuery.limit = 10;
            vm.initQueryTimeFilter('smsRecordQueryDiv', function () {
            });
            utilService.actionAfterLoaded('#vertificationSMSRecordTable', function () {
                vm.smsRecordQuery.pageObj = utilService.createPageForPagingTable("#vertificationSMSRecordTablePage", {}, $translate, function (curP, pageSize) {
                    vm.commonPageChangeHandler(curP, pageSize, "smsRecordQuery", vm.submitSMSRecordQuery)
                });
                vm.submitSMSRecordQuery(true);
            })
        }
        vm.submitSMSRecordQuery = function (newSearch) {
            var sendQuery = {
                recipientName: vm.smsRecordQuery.recipientName,
                purpose: vm.smsRecordQuery.purpose,
                accountStatus: vm.smsRecordQuery.accountStatus,
                inputDevice: vm.smsRecordQuery.inputDevice,
                type: 'registration',
                status: 'all',
                tel: vm.smsRecordQuery.phoneNumber || '',
                startTime: vm.queryPara['smsRecordQueryDiv'].startTime.data('datetimepicker').getLocalDate() || new Date(0),
                endTime: vm.queryPara['smsRecordQueryDiv'].endTime.data('datetimepicker').getLocalDate() || new Date(0),
                index: newSearch ? 0 : vm.smsRecordQuery.index,
                limit: newSearch ? 10 : vm.smsRecordQuery.limit,
                platformObjId: vm.selectedPlatform.data._id,
                sortCol: vm.smsRecordQuery.sortCol
            };

            $('#loadVertificationSMSIcon').show();
            console.log("vertificationSMSQuery sendQuery", sendQuery);
            socketService.$socket($scope.AppSocket, 'vertificationSMSQuery', sendQuery, function (data) {
                console.log("vertificationSMSQuery result", data);
                vm.smsRecordQuery.loading = false;
                var size = data.data.size || 0;
                var result = data.data.data || [];
                vm.vertificationSMSQuery = result;
                vm.drawVertificationSMSTable(result.map(item => {
                    item.createTime = vm.dateReformat(item.createTime);
                    item.status = $translate(item.status);
                    item.purpose$ = $translate(item.purpose);
                    switch (item.validationStatus$) {
                        case 0:
                        case 1:
                            item.validationStatus$$ = "try";
                            break;
                        case -1:
                            item.validationStatus$$ = "success";
                            break;
                        default:
                            item.validationStatus$$ = "-";
                    }
                    return item;
                }), size, newSearch);

                vm.smsRecordQuery.totalCount = size;
                vm.smsRecordQuery.pageObj.init({maxCount: size}, newSearch);
                $('#loadVertificationSMSIcon').hide();
                $scope.safeApply();
            });
        }
        vm.drawVertificationSMSTable = function (data, size, newSearch) {
            var option = $.extend({}, vm.generalDataTableOptions, {
                data: data,
                order: vm.smsRecordQuery.aaSorting || [[2, 'desc']],
                aoColumnDefs: [
                    {'sortCol': 'createTime', bSortable: true, 'aTargets': [2]},
                    {targets: '_all', defaultContent: ' ', bSortable: false}
                ],
                columns: [
                    {'title': $translate('ACCOUNT'), data: 'recipientName'},
                    {
                        'title': $translate('STATUS'),
                        render: function (data, type, row) {
                            return $translate(row.validationStatus$$) + "(" + row.currentCount$ + "/" + row.totalCount$ + ")";
                        }
                    },
                    {'title': $translate('SENT TIME'), data: 'createTime', bSortable: true},
                    {'title': $translate('VERIFICATION_CODE'), data: 'message'},
                    {'title': $translate('Type'), data: 'purpose$'},
                    {
                        'title': $translate('DEVICE'),
                        data: 'inputDevice',
                        render: function (data, type, row) {
                            for (let i = 0; i < Object.keys(vm.inputDevice).length; i++) {
                                if (vm.inputDevice[Object.keys(vm.inputDevice)[i]] == data) {
                                    return $translate(Object.keys(vm.inputDevice)[i]);
                                }
                            }
                        }
                    },
                    {
                        'title': $translate('PHONE'),
                        sClass: "wordWrap realNameCell",
                        data: 'tel',
                        render: function (data, type, row) {
                            if (!(row.data && row.data.isRegistered) && row.purpose == "demoPlayer") {
                                var link = $('<a>', {
                                    'ng-click': "vm.callDemoPlayer(" + JSON.stringify(row) + ")",
                                }).text(data);
                                return link.prop('outerHTML');
                            } else {
                                return data;
                            }
                        }
                    },
                    {'title': $translate('Proposal No'), data: 'proposalId'},
                    {'title': $translate('SEND') + $translate('STATUS'), data: 'status'},
                ],
                bSortClasses: false,
                paging: false,
                fnRowCallback: vm.smsRecordTableRow
            });
            vm.smsRecordQuery.tableObj = $('#vertificationSMSRecordTable').DataTable(option);
            $('#vertificationSMSRecordTable').off('order.dt');
            $('#vertificationSMSRecordTable').on('order.dt', function (event, a, b) {
                vm.commonSortChangeHandler(a, 'smsRecordQuery', vm.submitSMSRecordQuery);
            });
            setTimeout(function () {
                $('#vertificationSMSRecordTable').resize();
            }, 100);
        }

        vm.smsRecordTableRow = function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
            $compile(nRow)($scope);
            vm.platformSmsRecordTableRow(nRow, aData, iDisplayIndex, iDisplayIndexFull);
            //console.log("row", nRow, aData, iDisplayIndex, iDisplayIndexFull);
        };

        vm.platformSmsRecordTableRow = function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
            switch (aData.validationStatus$) {
                case 0: {
                    $(nRow).css('background-color', 'rgba(255, 209, 202, 100)', 'important');
                    // $(nRow).css('background-color > .sorting_1', 'rgba(255, 209, 202, 100)','important');
                    break;
                }
                case 1: {
                    $(nRow).css('background-color', 'rgba(200, 200, 200, 20)', 'important');
                    // $(nRow).css('background-color > .sorting_1', 'rgba(255, 209, 202, 100)','important');
                    break;
                }
            }
        };

        vm.checkPlayerExist = function (key, val) {
            if (!key || !val) {
                $('#playerValidFalse').addClass('hidden');
                $('#playerValidTrue').addClass('hidden');
                vm.playerApplyRewardPara.referPlayer = false;
                $scope.safeApply();
                return;
            }
            var sendObj = {};
            sendObj[key] = val;
            socketService.$socket($scope.AppSocket, 'getPlayerInfo', sendObj, function (data) {
                if (data.data) {
                    $('#playerValidFalse').addClass('hidden');
                    $('#playerValidTrue').removeClass('hidden');
                    vm.playerApplyRewardPara.referPlayer = true;
                } else {
                    $('#playerValidFalse').removeClass('hidden');
                    $('#playerValidTrue').addClass('hidden');
                    vm.playerApplyRewardPara.referPlayer = false;
                }
                $scope.safeApply();
            })
        }
        vm.drawSendMessagesTable = function (data, size, newSearch) {
            var option = $.extend({}, vm.generalDataTableOptions, {
                data: data,
                order: vm.sendMultiMessage.aaSorting || [[5, 'desc']],
                aoColumnDefs: [
                    {'sortCol': 'topUpTimes', bSortable: true, 'aTargets': [5]},
                    {
                        targets: [8],
                        title: '<input type="checkbox" class="toggleCheckAll">',
                        orderable: false,
                        render: function (data, type, row) {
                            '<input type="checkbox">'
                        }
                    },
                    {targets: '_all', defaultContent: ' ', bSortable: false}
                ],
                columns: [
                    {'title': $translate('PLAYER_NAME'), data: 'name'},
                    // {'title': $translate('PLAYERID'), data: 'playerId'},
                    {'title': $translate('realName'), sClass: "wordWrap realNameCell", data: 'realName'},
                    {
                        title: $translate("CREDIBILITY"),
                        data: "credibilityRemarks",
                        advSearch: false,
                        orderable: false,
                        sClass: "remarkCol",
                        render: (data, type, row) => {
                            let emptyOutput = "-";
                            if (!data || data.length === 0) {
                                return emptyOutput;
                            }

                            let output = "";
                            let remarkMatches = false;
                            data.map(function (remarkId) {
                                for (let i = 0; i < vm.credibilityRemarks.length; i++) {
                                    if (vm.credibilityRemarks[i]._id === remarkId) {
                                        if (output) {
                                            output += "<br>";
                                        }
                                        output += vm.credibilityRemarks[i].name;
                                        remarkMatches = true;
                                    }
                                }
                            });

                            if (remarkMatches) {
                                return output;
                            } else {
                                return emptyOutput;
                            }
                        }
                    },
                    {'title': $translate('playerLevel'), data: 'playerLevel.name'},
                    {'title': $translate('LOGIN_TIMES'), data: 'loginTimes'},
                    {'title': $translate('topUpTimes'), data: 'topUpTimes', bSortable: true},
                    {'title': $translate('lastAccessTime'), data: 'lastAccessTime$'},
                    {'title': $translate('registrationTime'), data: 'registrationTime$'},
                    {
                        render: function () {
                            var link = $('<input>', {class: "checkRow", type: 'checkbox'})
                            return link.prop('outerHTML');
                        }
                    }
                ],
                paging: false,
            });
            vm.sendMultiMessage.tableObj = $('#mutilplePlayerTable').DataTable(option);
            $('#mutilplePlayerTable').off('order.dt');
            $('#mutilplePlayerTable').on('order.dt', function (event, a, b) {
                vm.commonSortChangeHandler(a, 'sendMultiMessage', vm.searchPlayersForSendingMessage);
            });

            function updateNumReceipient() {
                $scope.$evalAsync(() => {
                    vm.sendMultiMessage.numRecipient = $('#mutilplePlayerTable tbody input:checked[type="checkbox"]').length;
                    resetMultiMessageStatus();
                });
            };
            $('.toggleCheckAll').off('click');
            $('.toggleCheckAll').on('click', function (event, a, b) {
                vm.sendMultiMessage.checkAllRow = $(this).prop('checked');
                if (vm.sendMultiMessage.checkAllRow) {
                    $('#mutilplePlayerTable tbody tr').addClass('selected');
                    $('#mutilplePlayerTable tbody input[type="checkbox"]').prop("checked", vm.sendMultiMessage.checkAllRow);
                } else {
                    $('#mutilplePlayerTable tbody tr').removeClass('selected');
                    $('#mutilplePlayerTable tbody input[type="checkbox"]').prop("checked", vm.sendMultiMessage.checkAllRow);
                }
                updateNumReceipient();
            });
            $('#mutilplePlayerTable .checkRow').off('click');
            $('#mutilplePlayerTable .checkRow').on('click', function (event) {
                $(this).closest('tr').toggleClass('selected');
                if ($(this).prop('checked') == false) {
                    $('#mutilplePlayerTable_wrapper .toggleCheckAll').prop('checked', false);
                }
                updateNumReceipient();
            });

            setTimeout(function () {
                $('#mutilplePlayerTable').resize();
            }, 100);
        }

        function resetAllSelection() {
            $('#mutilplePlayerTable tbody tr').removeClass('selected');
            $('#mutilplePlayerTable tbody input[type="checkbox"]').prop("checked", vm.sendMultiMessage.checkAllRow);
            vm.sendMultiMessage.numRecipient = 'All';
        }

        function resetMultiMessageStatus() {
            vm.sendMultiMessage.sendInitiated = false;
            vm.sendMultiMessage.sendCompleted = false;
            vm.sendMultiMessage.numReceived = 0;
            vm.sendMultiMessage.numFailed = 0;
            vm.sendMultiMessage.singleBtnText = $translate('SEND');
            // vm.sendMultiMessage.singleSendResultText = '';
            vm.sendMultiMessage.singleSendDisable = false;
            updateMultiMessageButton();
        }

        vm.messagesChange = function () {
            vm.sendMultiMessage.wordCount = vm.sendMultiMessage.messageContent.length;
            vm.sendMultiMessage.numUsedMessage = Math.ceil(vm.sendMultiMessage.wordCount / vm.sendMultiMessage.channelMaxChar);
            resetMultiMessageStatus();
        };
        vm.phonesChange = function () {
            vm.sendMultiMessage.phoneCount = (vm.toPhoneNumber).split(/\r\n|\r|\n/).length;
        };
        vm.sentMailToAllPlayers = function () {
            resetAllSelection();
        };
        vm.sendMessages = function () {

            // console.log(vm.sendMultiMessage.tableObj.rows('.selected').data());
            vm.sendMultiMessage.sendInitiated = true;
            updateMultiMessageButton();

            $scope.AppSocket.removeAllListeners('_sendSMSToPlayer');
            $scope.AppSocket.on('_sendSMSToPlayer', function (data) {
                $scope.$evalAsync(() => {
                    console.log('retData', data);
                    if (data.success) {
                        vm.sendMultiMessage.numReceived++;
                        $('#messageSentReceived').text(vm.sendMultiMessage.numReceived);
                    } else {
                        vm.sendMultiMessage.numFailed++;
                        $('#messageSentFailed').text(vm.sendMultiMessage.numFailed);
                    }
                    if (vm.sendMultiMessage.numFailed + vm.sendMultiMessage.numReceived === vm.sendMultiMessage.numRecipient) {
                        vm.sendMultiMessage.sendCompleted = true;
                    }
                    vm.sendMultiMessage.messageTitle = "";
                    vm.sendMultiMessage.messageContent = "";
                    updateMultiMessageButton();
                });
            });

            $scope.AppSocket.removeAllListeners('_sendPlayerMailFromAdminToPlayer');
            $scope.AppSocket.on('_sendPlayerMailFromAdminToPlayer', function (data) {
                console.log(data);
                vm.sendMultiMessage.sendCompleted = true;
                vm.sendMultiMessage.messageTitle = "";
                vm.sendMultiMessage.messageContent = "";
                updateMultiMessageButton();
            });

            if (vm.sendMultiMessage.messageType === "sms") {
                vm.sendMultiMessage.tableObj.rows('.selected').data().each(function (data) {
                    $scope.AppSocket.emit('sendSMSToPlayer', {
                        playerId: data.playerId,
                        platformId: vm.selectedPlatform.data.platformId,
                        channel: vm.sendMultiMessage.channel,
                        message: vm.sendMultiMessage.messageContent
                    });
                });
            } else if (vm.sendMultiMessage.messageType === "mail") {
                let playerIds = vm.sendMultiMessage.tableObj.rows('.selected').data().reduce((tempPlayersId, selectedPlayers) => {
                    if (selectedPlayers._id) {
                        tempPlayersId.push(selectedPlayers._id);
                    }
                    return tempPlayersId;
                }, []);

                let sendData = {
                    playerId: playerIds,
                    adminName: authService.adminName,
                    platformId: vm.selectedPlatform.id,
                    title: vm.sendMultiMessage.messageTitle,
                    content: vm.sendMultiMessage.messageContent
                };

                if (vm.isSentToAll) {
                    socketService.$socket($scope.AppSocket, 'sendPlayerMailFromAdminToAllPlayers', sendData, function (data) {
                        console.log(data);
                        vm.sendMultiMessage.sendCompleted = true;
                        vm.sendMultiMessage.messageTitle = "";
                        vm.sendMultiMessage.messageContent = "";
                        updateMultiMessageButton();
                    })
                } else {
                    $scope.AppSocket.emit('sendPlayerMailFromAdminToPlayer', sendData);
                }
            }
        };

        vm.sendSingleMessages = function () {
            $scope.$evalAsync(() => {
                vm.sendMultiMessage.singleBtnText = $translate("Sending");
                vm.sendMultiMessage.singleSendDisable = true;

                if (vm.toPhoneNumber && vm.sendMultiMessage.phoneCount && vm.sendMultiMessage.phoneCount > 1) {
                    let phoneList = (vm.toPhoneNumber).split(/\r\n|\r|\n/);

                    phoneList.forEach(phoneNumber => {
                        let sendData = {
                            phoneNumber: phoneNumber,
                            platformId: vm.selectedPlatform.data.platformId,
                            channel: vm.sendMultiMessage.channel,
                            message: vm.sendMultiMessage.messageContent
                        };

                        socketService.$socket($scope.AppSocket, 'sendSMStoNumber', sendData, function (data) {
                            vm.sendMultiMessage.sendCompleted = true;
                            vm.sendMultiMessage.singleSendResultText = $translate("SUCCESS");
                            vm.sendMultiMessage.singleBtnText = $translate("SEND");
                            updateMultiMessageButton();
                        }, function (err) {
                            vm.sendMultiMessage.singleBtnText = $translate("SEND");
                            vm.sendMultiMessage.singleSendResultText = $translate("FAIL");
                            updateMultiMessageButton();
                        });
                    });
                    vm.toPhoneNumber = null;
                    vm.sendMultiMessage.messageContent = "";
                    vm.sendMultiMessage.phoneCount = 0;
                } else {
                    let sendData = {
                        phoneNumber: vm.toPhoneNumber,
                        platformId: vm.selectedPlatform.data.platformId,
                        channel: vm.sendMultiMessage.channel,
                        message: vm.sendMultiMessage.messageContent
                    };

                    socketService.$socket($scope.AppSocket, 'sendSMStoNumber', sendData, function (data) {
                        vm.sendMultiMessage.sendCompleted = true;
                        vm.sendMultiMessage.singleSendResultText = $translate("SUCCESS");
                        vm.sendMultiMessage.singleBtnText = $translate("SEND");
                        // vm.toPhoneNumber = null
                        updateMultiMessageButton();
                    }, function (err) {
                        vm.sendMultiMessage.singleBtnText = $translate("SEND");
                        vm.sendMultiMessage.singleSendResultText = $translate("FAIL");
                        // vm.toPhoneNumber = null
                        updateMultiMessageButton();
                    });
                    vm.toPhoneNumber = null;
                    vm.sendMultiMessage.messageContent = "";
                    vm.sendMultiMessage.phoneCount = 0;
                }
            });
        };

        function updateMultiMessageButton() {
            $scope.$evalAsync(() => {
                vm.sendMultiMessage.sendBtnText =
                    vm.sendMultiMessage.sendCompleted ? $translate("DONE")
                        : vm.sendMultiMessage.sendInitiated ? $translate("Sending")
                        : $translate("SEND");
            });
        }

        vm.platformGameTabClicked = function () {
            //reset to unselected state
            vm.SelectedProvider = null;
            vm.showGameCate = "include";
            vm.curGame = null;
            vm.batchCreditTransferOutQuery = {};
            vm.batchCreditTransferOut = null;
        }
        //get all platform data from server
        vm.getPlatformGameData = function (platformObjId) {
            //init gametab start===============================
            vm.SelectedProvider = null;
            vm.showGameCate = "include";
            vm.curGame = null;
            //init gameTab end==================================
            if (!vm.selectedPlatform) {
                return
            }
            let sendData = {
                _id: platformObjId ? platformObjId : vm.selectedPlatform.id
            };
            //console.log("getGames", gameIds);
            socketService.$socket($scope.AppSocket, 'getPlatform', sendData, function (data) {
                console.log('getPlatform', data.data);
                //provider list init
                vm.platformProviderList = data.data.gameProviders;
                vm.platformProviderList.forEach(item => {
                    if (item.batchCreditTransferOutStatus && item.batchCreditTransferOutStatus[vm.selectedPlatform.id]) {
                        item.batchCreditTransferOut = item.batchCreditTransferOutStatus[vm.selectedPlatform.id];
                    }
                });
                vm.providerListCheck = {};
                $.each(vm.platformProviderList, function (i, v) {
                    vm.providerListCheck[v._id] = true;
                })

                // sort provider name alphabetically
                let providerNames = [];
                let sortedProviderList = [];
                vm.platformProviderList.forEach(provider => providerNames.push(provider.name));
                providerNames.sort();
                providerNames.forEach(name => {
                    vm.platformProviderList.forEach(provider => {
                        if (name === provider.name) {
                            sortedProviderList.push(provider);
                        }
                    });
                });
                vm.sortedPlatformProviderList = sortedProviderList;

                //payment list init
                vm.platformPaymentChList = data.data.paymentChannels;
                vm.paymentListCheck = {};
                $.each(vm.platformPaymentChList, function (i, v) {
                    vm.paymentListCheck[v._id] = true;
                })

                //provider delay status init
                vm.getProviderLatestTimeRecord();
                // $scope.safeApply();
            })
        };

        vm.linkProvider = function (which) {
            //get vm.showProviderList
            vm.showProviderList = [];
            socketService.$socket($scope.AppSocket, 'getAllGameProviders', {}, function (data) {
                vm.providerList = data.data;
                if (which == 'attach') {
                    //console.log("vm.providerList", vm.providerList);
                    vm.selectProvider = {};
                    $.each(vm.providerList, function (i, v) {
                        console.log(v._id);
                        if (vm.providerListCheck.hasOwnProperty(v._id)) {
                            //vm.selectProvider[v._id] = true;
                        } else {
                            vm.showProviderList.push(v);
                        }
                    });
                    console.log("checker", vm.showProviderList);
                    $scope.safeApply();
                } else if (which == 'detach') {
                    // No longer used
                    vm.showProviderList = vm.platformProviderList;
                    console.log('vm.showProviderList', vm.showProviderList);
                    $scope.safeApply();
                }
            })
        }
        vm.confirmDetachProvider = function () {
            GeneralModal.confirm({
                title: $translate('DETACH_PROVIDER'),
                text: $translate('The provider') + " '" + vm.getPlatformsNickNameForProvider(vm.selectedPlatform.data, vm.SelectedProvider) + "' " + $translate('will be detached from this platform')
            }).then(function () {
                vm.submitProviderChange('DETACH', vm.SelectedProvider);
            });
        }
        vm.submitProviderChange = function (type, data) {
            if (!data) return;
            var sendData = {
                platformId: vm.selectedPlatform.id,
                providerId: data._id
            };
            console.log(sendData);

            var sendString = '';
            if (type == "ATTACH") {
                sendString = 'addProviderToPlatformById';
                sendData.providerNickName = vm.selectedProviderNickName;
                sendData.providerPrefix = vm.selectedProviderPrefix;
            } else if (type === "RENAME") {
                sendString = 'renameProviderInPlatformById';
                sendData.providerNickName = vm.selectedProviderNickName;
                sendData.providerPrefix = vm.selectedProviderPrefix;
            } else if (type == "DETACH") {
                sendString = 'removeProviderFromPlatformById';
            } else if (type == "ENABLE") {
                sendString = 'updateProviderFromPlatformById';
                sendData.isEnable = true;
            } else if (type == "DISABLE") {
                sendString = 'updateProviderFromPlatformById';
                sendData.isEnable = false;
            }
            socketService.$socket($scope.AppSocket, sendString, sendData, function (data) {
                console.log(data);
                loadPlatformData();
                vm.getPlatformGameData();
            })
        }

        vm.getProviderStatus = (provider) => {
            if (provider && provider.platformStatusFromCPMS && provider.platformStatusFromCPMS[vm.selectedPlatform.data.platformId]) {
                return provider.platformStatusFromCPMS[vm.selectedPlatform.data.platformId];
            }

            return provider.status;
        };

        vm.getGameStatusClass = function (str) {
            if (!str) return;
            if (str == vm.allGameStatusString.ENABLE) {
                return 'colorGreen';
            } else if (str == vm.allGameStatusString.DISABLE) {
                return 'colorRed';
            } else if (str == vm.allGameStatusString.MAINTENANCE) {
                return 'colorOrangeImportant text-bold';
            } else {
                return 'colorRed';
            }
        }
        vm.filterGames = function (data, filterProvider) {
            data = data || [];
            return data.filter(item1 => {
                var item = item1.game ? item1.game : item1;
                if (vm.filterGameType && (vm.filterGameType != 'all') && (vm.filterGameType != item.type)) return false;
                if (vm.filterPlayGameType && (vm.filterPlayGameType != 'all') && (vm.filterPlayGameType != item.playGameType)) return false;
                if (vm.filterGameName && item.name.toLowerCase().indexOf(vm.filterGameName.toLowerCase()) == -1) return false;
                if (vm.filterGameId && item.gameId.indexOf(vm.filterGameId) == -1) return false;
                if (vm.filterGameDescription && (item.description && item.description.toLowerCase().indexOf(vm.filterGameDescription.toLowerCase()) == -1 || !item.description)) return false;
                if (filterProvider && vm.filterGameProvider && (vm.filterGameProvider != 'all') && (vm.filterGameProvider != item.provider)) return false;
                if (item.status == 4) return false;
                return true;
            })
        }

        vm.providerClicked = function (i, data) {
            if (i != "refresh") {
                //vm.highlightProvider = {};
                //vm.highlightProvider[i] = 'bg-pale';
                vm.SelectedProvider = data;
                vm.curGame = '';
                console.log("provider clicked", data);
            }
            vm.selectedGamesInGameGroup = [];
            vm.highlightGame = {};
            vm.masterGameStatus = {};
            vm.newGamePic = '';
            //get included games list
            var query = {
                platform: vm.selectedPlatform.id,
                provider: data._id
            }
            vm.includedGames = '';
            vm.getBatchCreditTransferOutStatus(vm.SelectedProvider._id);
            socketService.$socket($scope.AppSocket, 'getGamesByPlatformAndProvider', query, function (data2) {
                console.log("attached", data2.data);
                vm.includedGames = [];
                $.each(vm.filterGames(data2.data, false), function (i, v) {
                    var newObj = v.game;
                    // if (v.maintenanceHour == 0) {
                    //     newObj.maintenanceHour = 0;
                    // } else {
                    //     newObj.maintenanceHour = v.maintenanceHour || 'null';
                    // }
                    // if (v.maintenanceMinute == 0) {
                    //     newObj.maintenanceMinute = 0;
                    // } else {
                    //     newObj.maintenanceMinute = v.maintenanceMinute || 'null';
                    // }
                    newObj.platformVisible = v.visible;
                    vm.includedGames.push(newObj);
                    if (v.hasOwnProperty('status')) {
                        vm.gameStatus[v.game._id] = v.status;
                    }
                    vm.gameSmallShow[v.game._id] = processImgAddr(v.smallShow, newObj.smallShow);
                })
                console.log("vm.includedGames", vm.includedGames);
                $scope.safeApply();
            })
            vm.excludedGames = '';
            socketService.$socket($scope.AppSocket, 'getGamesNotAttachedToPlatform', query, function (data2) {
                console.log("not attached", data2.data);
                vm.excludedGames = [];
                $.each(vm.filterGames(data2.data, false), function (i, v) {
                    vm.excludedGames.push(v);
                    if (v.hasOwnProperty('status')) {
                        vm.gameStatus[v._id] = v.status;
                    } else {
                        vm.gameStatus[v._id] = "default";
                    }
                    vm.gameSmallShow[v._id] = processImgAddr(null, v.smallShow);
                })
                $scope.safeApply();
            })
        }

        function processImgAddr(mainAddr, addr) {//img in platformGame, and img in game
            if (mainAddr) return mainAddr;
            else if (/^(f|ht)tps?:\/\//.test(addr)) {
                return addr;
            } else {
                return "http://img99.neweb.me/" + addr;
            }
        }

        vm.toggleGameType = function () {
            vm.highlightGame = {};
            vm.selectedGamesInGameGroup = [];
            vm.curGame = null;
            vm.selectGameGroupGames = [];
            vm.selectGameGroupGamesName = [];
        }
        vm.gameClicked = function (i, v) {
            if (!v) return;
            console.log('game clicked', v);
            var exists = false;
            vm.selectedGamesInGameGroup = vm.selectedGamesInGameGroup.filter(item => {
                if (item && item._id) {
                    if (item._id == v._id) {
                        exists = true;
                        vm.highlightGame[v._id] = '';
                        return false;
                    } else return true;
                }
            });
            if (!exists) {
                vm.selectedGamesInGameGroup.push(v)
                vm.highlightGame[v._id] = 'bg-pale';
            }
            vm.curGame = vm.selectedGamesInGameGroup.length ? vm.selectedGamesInGameGroup[vm.selectedGamesInGameGroup.length - 1] : null;
            $scope.safeApply();
        }

        vm.allGametoPlatform = function (type, which) {
            vm.selectedGamesInGameGroup = [];
            vm.highlightGame = {};
            vm.curGame = null;
            if (type == "add") {
                var src = [];
                if (which == "in") {
                    vm.showGameCate = "include";
                    src = vm.includedGames;
                    vm.gameListCollapseIn();
                } else if (which === "ex") {
                    vm.showGameCate = "exclude";
                    src = vm.excludedGames;
                    vm.gameListCollapseOut();
                }
                src.map(item => {
                    vm.selectedGamesInGameGroup.push(item);
                    vm.highlightGame[item._id] = 'bg-pale';
                })
                vm.curGame = vm.selectedGamesInGameGroup.length ? vm.selectedGamesInGameGroup[vm.selectedGamesInGameGroup.length - 1] : null;
            }
            $scope.safeApply();
        }

        vm.updateGameStat = function (type, bool) {
            if (!bool) {
                vm.newType = type;
                $("#modalConfirmUpdateGame").modal();
            } else {
                let sendGameId = [];
                vm.selectedGamesInGameGroup.forEach((game) => {
                    if (game._id) {
                        sendGameId.push(game._id);
                    }
                })

                var sendData = {
                    query: {
                        game: sendGameId, platform: vm.selectedPlatform.id
                    },
                    updateData: {
                        status: type
                    }
                }
                console.log("send", sendData);
                socketService.$socket($scope.AppSocket, 'updateGameStatusToPlatform', sendData, success);
                vm.newType = '';
                $scope.safeApply();
            }

            function success(data) {
                console.log(data);
                vm.providerClicked('refresh', vm.SelectedProvider);
            }
        }
        vm.preparePlatformGameEdit = function () {
            vm.hourListArray = utilService.$createArray(24);
            vm.minuteListArray = utilService.$createArray(60);
            // vm.newMaintenanceHour = vm.curGame.maintenanceHour.toString();
            // vm.newMaintenanceMinute = vm.curGame.maintenanceMinute.toString();
            vm.newGamePic = vm.gameSmallShow[vm.curGame._id];
            vm.platformGameVisible = vm.curGame.platformVisible || false;
        }
        vm.updatePlatformGameProp = function (hh, mm, newPic, visible) {
            var sendData = {
                query: {
                    game: vm.curGame._id, platform: vm.selectedPlatform.id
                },
                updateData: {
                    // maintenanceHour: parseInt(hh),
                    // maintenanceMinute: parseInt(mm),
                    smallShow: newPic,
                    visible: visible
                }
            }
            console.log("send", sendData);
            socketService.$socket($scope.AppSocket, 'updateGameStatusToPlatform', sendData, success);
            vm.newType = '';
            $scope.safeApply();

            function success(data) {
                console.log(data);
                vm.providerClicked('refresh', vm.SelectedProvider);
                vm.curGame.maintenanceHour = parseInt(hh);
                vm.curGame.maintenanceMinute = parseInt(mm);
                vm.curGame.platformVisible = visible;
                $scope.safeApply();
            }
        }
        vm.gametoPlatform = function (type) {
            var sendString = '';
            if (type === 'attach') {
                sendString = 'attachGamesToPlatform'
            } else if (type === 'detach') {
                sendString = 'detachGamesFromPlatform'
            }
            var sendData = {
                platform: vm.selectedPlatform.id,
                games: vm.selectedGamesInGameGroup.map(item => {
                    return {
                        game: item._id,
                        name: item.name,
                        visible: item.visible
                    };
                })
            }
            console.log(sendData);
            socketService.$socket($scope.AppSocket, sendString, sendData, success);

            function success(data) {
                vm.curGame = null;
                console.log(data);
                vm.providerClicked('refresh', vm.SelectedProvider);
            }
        }
        var getPlatformsNickNameDataForProvider = function (platformData, gameProviderData) {
            return platformData && platformData.gameProviderInfo && gameProviderData
                && platformData.gameProviderInfo[gameProviderData._id];
        }
        vm.getPlatformsNickNameForProvider = function (platformData, gameProviderData) {
            var gameProviderNickNameData = getPlatformsNickNameDataForProvider(platformData, gameProviderData);
            return gameProviderNickNameData && gameProviderNickNameData.localNickName
                || gameProviderData.nickName
                || gameProviderData.name;
        }

        vm.getPlatformsProviderEnable = function (gameProviderData) {
            if (!gameProviderData || !vm.showPlatform) return;
            var providerId = gameProviderData._id || null;
            var obj;
            if (providerId && vm.showPlatform.gameProviderInfo) {
                obj = vm.showPlatform.gameProviderInfo[providerId];
            }
            return (obj && obj.isEnable == false) ? 'ENABLE' : 'DISABLE';
        }

        vm.confirmUpdateProviderStatus = function (providerData) {
            let type = vm.getPlatformsProviderEnable(providerData);
            GeneralModal.confirm({
                title: $translate('Please confirm your action.'),
                text: $translate("Are you sure to update") + " " + providerData.name + "(" + providerData.code + ") -> " + $translate(type) + " ?"
            }).then(function () {

                    if (type == "DISABLE") {
                        let sendGameId = [];
                        vm.includedGames.forEach((game) => {
                            if (game._id) {
                                sendGameId.push(game._id);
                            }
                        })

                        var sendData = {
                            query: {
                                game: sendGameId, platform: vm.selectedPlatform.id
                            },
                            updateData: {
                                status: vm.allGameStatusString.MAINTENANCE
                            }
                        }
                        console.log("send", sendData);
                        socketService.$socket($scope.AppSocket, 'updateGameStatusToPlatform', sendData, success);
                        // $scope.safeApply();
                    } else {
                        vm.submitProviderChange(type, vm.SelectedProvider);
                    }

                    function success(data) {
                        console.log(data);
                        vm.submitProviderChange(type, vm.SelectedProvider);
                        vm.providerClicked('refresh', vm.SelectedProvider);
                    }

                }
            );
        }

        vm.getPlatformsPrefixForProvider = function (platformData, gameProviderData) {
            var gameProviderNickNameData = getPlatformsNickNameDataForProvider(platformData, gameProviderData);
            return gameProviderNickNameData && gameProviderNickNameData.localPrefix
                || gameProviderData.prefix;
        };

        // getBatchCreditTransferOutStatus by game provider object ID
        vm.getBatchCreditTransferOutStatus = function (providerObjId) {
            let query = {
                _id: providerObjId
            };
            socketService.$socket($scope.AppSocket, 'getGameProvider', query, function (data) {
                if (data.data && data.data.batchCreditTransferOutStatus && data.data.batchCreditTransferOutStatus[vm.selectedPlatform.id]) {
                    vm.platformProviderList.forEach((provider) => {
                        if (provider._id == data.data._id) {
                            provider.batchCreditTransferOut = data.data.batchCreditTransferOutStatus[vm.selectedPlatform.id];
                        }
                    });
                }
                $scope.safeApply();
            });
        };

        vm.initBatchCreditTransferOut = function (platformData, gameProviderData) {
            utilService.actionAfterLoaded('#modalBatchCreditTransferOut .endTime', function () {
                vm.batchCreditTransferOutQuery.startTime = utilService.createDatePicker('#modalBatchCreditTransferOut .startTime');
                vm.batchCreditTransferOutQuery.endTime = utilService.createDatePicker('#modalBatchCreditTransferOut .endTime');
                vm.batchCreditTransferOutQuery.startTime.data('datetimepicker').setDate(utilService.setLocalDayStartTime(utilService.setNDaysAgo(new Date(), 1)));
                vm.batchCreditTransferOutQuery.endTime.data('datetimepicker').setDate(utilService.setLocalDayEndTime(new Date()));
                vm.selectedProviderNickName = vm.getPlatformsNickNameForProvider(platformData, gameProviderData);
            });
        };

        vm.submitBatchCreditTransferOut = function () {
            let sendQuery = {
                startDate: vm.batchCreditTransferOutQuery.startTime.data('datetimepicker').getLocalDate(),
                endDate: vm.batchCreditTransferOutQuery.endTime.data('datetimepicker').getLocalDate(),
                providerId: vm.SelectedProvider.providerId,
                providerObjId: vm.SelectedProvider._id,
                platformObjId: vm.selectedPlatform.id,
                adminName: authService.adminName
            };
            console.log("batchCreditTransferOut", sendQuery);
            socketService.$socket($scope.AppSocket, "batchCreditTransferOut", sendQuery, function (data) {
                console.log("batchCreditTransferOut_ret", data.data);
                vm.batchCreditTransferOut = data.data;
                vm.platformProviderList.forEach(item => {
                    if (item._id == data.data.providerObjId) {
                        item.batchCreditTransferOut = vm.batchCreditTransferOut;
                    }
                });
                $scope.safeApply();
            });
        };

        /////////////////////////////////Mark::player functions//////////////////

        /////////////////////////////////Mark::Platform players functions//////////////////
        // vm.showPlatformCreditTransferLogPopup = function () {
        //     $('#modalPlatformCreditTransferLog').modal().show();
        //     vm.showPlatformRepair = false;
        //     vm.linkedPlayerTransferId = null;
        //     vm.creditChange = {
        //         finalValidAmount: $translate("Unknown"),
        //         finalLockedAmount: $translate("Unknown"),
        //         number: 0,
        //         remark: ''
        //     };
        //     vm.platformCreditTransferLog = {};
        //     utilService.actionAfterLoaded(('#platformCreditTransferLogPopup'), function () {
        //         vm.platformCreditTransferLog.startTime = utilService.createDatePicker('#platformCreditTransferLogPopup .startTime');
        //         vm.platformCreditTransferLog.endTime = utilService.createDatePicker('#platformCreditTransferLogPopup .endTime');
        //         vm.platformCreditTransferLog.startTime.data('datetimepicker').setDate(utilService.setLocalDayStartTime(utilService.setNDaysAgo(new Date(), 1)));
        //         vm.platformCreditTransferLog.endTime.data('datetimepicker').setDate(utilService.setLocalDayEndTime(new Date()));
        //         vm.platformCreditTransferLog.pageObj = utilService.createPageForPagingTable("#platformCreditTransferLogPopupTablePage", {}, $translate, function (curP, pageSize) {
        //             vm.commonPageChangeHandler(curP, pageSize, "platformCreditTransferLogPopup", vm.getPagedPlatformCreditTransferLog)
        //         });
        //         vm.getPagedPlatformCreditTransferLog(true);
        //     });
        // };
        vm.showPlatformCreditTransferLog = function (isPopup) {
            isPopup === true ? false : true;
            let panelBody, tablePage;
            if (isPopup) {
                $('#modalPlatformCreditTransferLog').modal().show();
                panelBody = 'platformCreditTransferLogPopup';
                tablePage = 'platformCreditTransferLogPopupTablePage';
                vm.queryPlatformCreditTransferPlayerName = "";
                vm.queryPlatformCreditTransferPlatformList = [];
            }
            else {
                panelBody = 'platformCreditTransferLog';
                tablePage = 'platformCreditTransferLogTablePage';
            }
            vm.showPlatformRepair = false;
            vm.linkedPlayerTransferId = null;
            vm.creditChange = {
                finalValidAmount: $translate("Unknown"),
                finalLockedAmount: $translate("Unknown"),
                number: 0,
                remark: ''
            };
            vm.queryPlatformCreditTransferStatus = 'default';
            vm.platformCreditTransferLog = {};
            vm.platformCreditTransferLog.isPopup = isPopup === true;
            vm.platformCreditTransferLog.index = 0;
            vm.platformCreditTransferLog.limit = vm.platformCreditTransferLog && vm.platformCreditTransferLog.limit ? vm.platformCreditTransferLog.limit : 50;
            utilService.actionAfterLoaded(('#' + panelBody), function () {
                vm.platformCreditTransferLog.startTime = utilService.createDatePicker('#' + panelBody + ' .startTime');
                vm.platformCreditTransferLog.endTime = utilService.createDatePicker('#' + panelBody + ' .endTime');
                vm.platformCreditTransferLog.startTime.data('datetimepicker').setDate(utilService.setLocalDayStartTime(utilService.setNDaysAgo(new Date(), 1)));
                vm.platformCreditTransferLog.endTime.data('datetimepicker').setDate(utilService.setLocalDayEndTime(new Date()));
                vm.platformCreditTransferLog.pageObj = utilService.createPageForPagingTable('#' + tablePage, {pageSize: 50}, $translate, function (curP, pageSize) {
                    vm.commonPageChangeHandler(curP, pageSize, 'platformCreditTransferLog', vm.getPagedPlatformCreditTransferLog)
                });
                vm.getPagedPlatformCreditTransferLog(true, isPopup);
            });
        };

        vm.getPagedPlatformCreditTransferLog = function (newSearch) {
            vm.platformCreditTransferLog.loading = true;
            let defaultPlatformCreditTransferStatus;
            let platformQuery;
            if (vm.platformCreditTransferLog && vm.platformCreditTransferLog.isPopup && (vm.platformCreditTransferLog.isPopup.toString() === 'true')) {
                platformQuery = vm.queryPlatformCreditTransferPlatformList && vm.queryPlatformCreditTransferPlatformList.length > 0 ?
                    {"$in": vm.queryPlatformCreditTransferPlatformList} : {"$in": vm.allPlatformData.map(item => item._id)};
            } else {
                platformQuery = vm.selectedPlatform.id;
            }
            $scope.safeApply();
            let sendQuery = {
                PlatformObjId: platformQuery,
                startTime: vm.platformCreditTransferLog.startTime.data('datetimepicker').getLocalDate(),
                endTime: vm.platformCreditTransferLog.endTime.data('datetimepicker').getLocalDate(),
                index: newSearch ? 0 : vm.platformCreditTransferLog.index,
                limit: newSearch ? vm.platformCreditTransferLog.limit : (vm.platformCreditTransferLog.limit || 50),
                sortCol: vm.platformCreditTransferLog.sortCol
            };

            if (vm.queryPlatformCreditTransferStatus == 'default'){
                defaultPlatformCreditTransferStatus = {$in: [vm.allPlayerCreditTransferStatus.SUCCESS, vm.allPlayerCreditTransferStatus.FAIL, vm.allPlayerCreditTransferStatus.TIMEOUT]};
            }
            vm.queryPlatformCreditTransferStatus ?  vm.queryPlatformCreditTransferStatus == 'default' ? sendQuery.status =  defaultPlatformCreditTransferStatus : sendQuery.status = vm.queryPlatformCreditTransferStatus : '';
            vm.queryPlatformCreditTransferType ? sendQuery.type = vm.queryPlatformCreditTransferType : '';
            vm.queryPlatformCreditTransferProvider ? sendQuery.provider = vm.queryPlatformCreditTransferProvider : '';
            vm.queryPlatformCreditTransferPlayerName ? sendQuery.playerName = vm.queryPlatformCreditTransferPlayerName : '';

            socketService.$socket($scope.AppSocket, "getPagedPlatformCreditTransferLog", sendQuery, function (data) {
                vm.platformCreditTransferLogData = data.data.data;
                vm.platformCreditTransferLog.totalCount = data.data.total || 0;
                vm.platformCreditTransferLog.loading = false;
                vm.drawPagedPlatformCreditTransferQueryTable(vm.platformCreditTransferLogData, vm.platformCreditTransferLog.totalCount, newSearch);
            });

            // function getAllPlayerCreditTransferStatus() {
            //     vm.playerIDArr = [];
            //     return $scope.$socketPromise('getAllPlayerCreditTransferStatus')
            //         .then(data => {
            //             vm.allPlayerCreditTransferStatus = data.data;
            //             $scope.safeApply();
            //         });
            // }
            //
            // getAllPlayerCreditTransferStatus();
        };
        vm.drawPagedPlatformCreditTransferQueryTable = function (data, size, newSearch) {
            let tableData = data.map(item => {
                item.createTime$ = vm.dateReformat(item.createTime);
                item.typeText = $translate(item.type);
                item.providerText = vm.getProviderText(item.providerId);
                item.lockedAmount$ = item.lockedAmount.toFixed(2);
                item.localAmount$ = Number(item.amount) - Number(item.lockedAmount$);
                if (item && item.platformObjId){
                    let matchedPlatformData = vm.allPlatformData.filter(a => a && a._id && (a._id.toString() === item.platformObjId.toString()));
                    if(matchedPlatformData && matchedPlatformData.length && matchedPlatformData[0].name){
                        item.platformName$ = matchedPlatformData[0].name;
                    }
                }
                return item;
            });

            let aoColumnDefsArr;
            let columnsArr;
            if (vm.platformCreditTransferLog && vm.platformCreditTransferLog.isPopup && (vm.platformCreditTransferLog.isPopup.toString() === 'true')) {
                aoColumnDefsArr = [
                    {'sortCol': 'platformName$', 'aTargets': [0], bSortable: true},
                    {'sortCol': 'createTime', 'aTargets': [1], bSortable: true},
                    {'sortCol': 'transferId', 'aTargets': [2], bSortable: true},
                    {'sortCol': 'playerName', 'aTargets': [3], bSortable: true},
                    {'sortCol': 'amount', 'aTargets': [4], bSortable: true},
                    {'sortCol': 'providerId', 'aTargets': [5], bSortable: true},
                    {'sortCol': 'amount', 'aTargets': [6], bSortable: true},
                    {'sortCol': 'lockedAmount', 'aTargets': [7], bSortable: true},
                    {'sortCol': 'type', 'aTargets': [8], bSortable: true},
                    {'sortCol': 'status', 'aTargets': [9], bSortable: true}
                ];

                columnsArr = [
                    {title: $translate('PRODUCT_NAME'), data: 'platformName$'},
                    {title: $translate('CREATE_TIME'), data: 'createTime$'},
                    {title: $translate("TRANSFER") + " ID", data: 'transferId'},
                    {title: $translate('playerName'), data: 'playerName'},
                    {
                        title: $translate("TotalChangeAmount"),
                        data: 'amount',
                        render: function (data, type, row) {
                            return parseFloat(data).toFixed(2);
                        }
                    },
                    {title: $translate("provider"), data: 'providerText'},
                    {
                        title: $translate("LOCAL_CREDIT"),
                        data: `localAmount$`,
                        render: function (data, type, row) {
                            return parseFloat(data).toFixed(2);
                        }
                    },
                    {title: $translate("LOCKED_CREDIT"), data: 'lockedAmount$'},
                    {title: $translate("TYPE"), data: 'typeText'},
                    {
                        title: $translate("STATUS"),
                        render: function (data, type, row) {
                            let title = null;
                            let status$ = $scope.constPlayerCreditTransferStatus[row.status];
                            if(status$ === "FAIL" && row.apiRes && row.apiRes.message) {
                                title = row.apiRes.message;
                            }
                            let span = $('<span>', {
                                'title': title
                            }).text($translate(status$));
                            return span.prop('outerHTML');
                        }
                    }
                ];
            } else {
                aoColumnDefsArr = [
                    {'sortCol': 'createTime', 'aTargets': [0], bSortable: true},
                    {'sortCol': 'transferId', 'aTargets': [1], bSortable: true},
                    {'sortCol': 'playerName', 'aTargets': [2], bSortable: true},
                    {'sortCol': 'amount', 'aTargets': [3], bSortable: true},
                    {'sortCol': 'providerId', 'aTargets': [4], bSortable: true},
                    {'sortCol': 'amount', 'aTargets': [5], bSortable: true},
                    {'sortCol': 'lockedAmount', 'aTargets': [6], bSortable: true},
                    {'sortCol': 'type', 'aTargets': [7], bSortable: true},
                    {'sortCol': 'status', 'aTargets': [8], bSortable: true}
                ];

                columnsArr = [
                    {title: $translate('CREATE_TIME'), data: 'createTime$'},
                    {title: $translate("TRANSFER") + " ID", data: 'transferId'},
                    {title: $translate('playerName'), data: 'playerName'},
                    {
                        title: $translate("TotalChangeAmount"),
                        data: 'amount',
                        render: function (data, type, row) {
                            return parseFloat(data).toFixed(2);
                        }
                    },
                    {title: $translate("provider"), data: 'providerText'},
                    {
                        title: $translate("LOCAL_CREDIT"),
                        data: `localAmount$`,
                        render: function (data, type, row) {
                            return parseFloat(data).toFixed(2);
                        }
                    },
                    {title: $translate("LOCKED_CREDIT"), data: 'lockedAmount$'},
                    {title: $translate("TYPE"), data: 'typeText'},
                    {
                        title: $translate("STATUS"),
                        render: function (data, type, row) {
                            let title = null;
                            let status$ = $scope.constPlayerCreditTransferStatus[row.status];
                            if(status$ === "FAIL" && row.apiRes && row.apiRes.message) {
                                title = row.apiRes.message;
                            }
                            let span = $('<span>', {
                                'title': title
                            }).text($translate(status$));
                            return span.prop('outerHTML');
                        }
                    }
                ];
            }

            let option = $.extend({}, vm.generalDataTableOptions, {
                data: tableData,
                "order": vm.platformCreditTransferLog.aaSorting || [[0, 'desc']],
                aoColumnDefs: aoColumnDefsArr,
                columns: columnsArr,
                paging: false,
            });


            let tableElem = vm.platformCreditTransferLog.isPopup ? '#platformCreditTransferLogPopupTable' : '#platformCreditTransferLogTable';

            let table = utilService.createDatatableWithFooter(tableElem, option, {});
            vm.platformCreditTransferLog.pageObj.init({maxCount: size}, newSearch);

            $(tableElem + ' tbody').off('click', "**");
            $(tableElem + ' tbody').on('click', 'tr', function () {

                vm.selectedThisPlayer = false;
                let errorLogObjReady = false;
                if ($(this).hasClass('selected')) {
                    $(this).removeClass('selected');
                    vm.linkedPlayerTransferId = null;
                    $scope.safeApply();
                } else {
                    table.$('tr.selected').removeClass('selected');
                    $(this).addClass('selected');
                    const record = table.row(this).data();

                    let startTime = vm.platformCreditTransferLog.startTime.data('datetimepicker').getLocalDate();
                    let endTime = vm.platformCreditTransferLog.endTime.data('datetimepicker').getLocalDate();

                    var playerTransfer;
                    socketService.$socket($scope.AppSocket, 'getPlayerInfo', {_id: record.playerObjId}, function (reply) {
                        vm.selectedThisPlayer = reply.data;
                        updateShowPlayerCredit();
                    });

                    socketService.$socket($scope.AppSocket, 'getPlayerTransferErrorLogs', {
                        playerObjId: record.playerObjId,
                        transferId: record.transferId
                    }, function (data) {
                        console.log('getPlayerTransferErrorLogs', data); // todo :: delete log after problem solved
                        data.data.forEach(function (playerTransLog) {
                            if (playerTransLog._id == record._id) {
                                playerTransfer = playerTransLog
                            }
                        })
                        errorLogObjReady = true;
                        updateShowPlayerCredit();
                    });
                }

                function updateShowPlayerCredit() {
                    if (!errorLogObjReady || !vm.selectedThisPlayer) return;
                    if (!playerTransfer) {
                        vm.linkedPlayerTransferId = null;
                        $scope.safeApply();
                        return;
                    }

                    vm.linkedPlayerTransfer = playerTransfer;
                    vm.linkedPlayerTransferId = playerTransfer._id;
                    vm.creditChange.finalValidAmount = parseFloat(playerTransfer.amount - playerTransfer.lockedAmount
                        + vm.selectedThisPlayer.validCredit).toFixed(2);
                    vm.creditChange.finalLockedAmount = parseFloat(playerTransfer.lockedAmount).toFixed(2);
                    $scope.safeApply();
                }
            })

            $(tableElem).off('order.dt');
            $(tableElem).on('order.dt', function (event, a, b) {
                vm.commonSortChangeHandler(a, 'platformCreditTransferLog', vm.getPagedPlatformCreditTransferLog);
            });
            $(tableElem).resize();
            $scope.safeApply();
        };

        vm.getFinalValidAmount = function () {
            vm.creditChange.finalValidAmount= Number($noRoundTwoDecimalToFix(vm.selectedSinglePlayer.validCredit)) + vm.creditChange.updateAmount;
            // vm.creditChange.finalValidAmount= Number(parseFloat(vm.selectedSinglePlayer.validCredit).toFixed(2)) + vm.creditChange.updateAmount;
        };

        vm.newPlayerList = function (firstLoad) {
            vm.newPlayerRecords = {totalCount: 0};
            vm.initQueryTimeFilter('newPlayerRecords', function () {
                // $('#modalNewPla').modal();
                vm.newPlayerRecords.pageObj = utilService.createPageForPagingTable("#newPlayerListTablePage", {pageSize: 100}, $translate, function (curP, pageSize) {
                    vm.commonPageChangeHandler(curP, pageSize, "newPlayerRecords", vm.getNewPlayerListByFilter)
                });
                if (!firstLoad) {
                    vm.getNewPlayerListByFilter(true);
                }

            });
        };

        vm.existRealNameDetector = function (newSearch) {
            if (!vm.newPlayer.realName) {
                return;
            }

            let sendData = {
                platformId: vm.selectedPlatform.id,
                realName: vm.newPlayer.realName,
                limit: newSearch ? 10 : (vm.realNameDuplicate.limit || 10),
                index: newSearch ? 0 : (vm.realNameDuplicate.index || 0)
            }

            socketService.$socket($scope.AppSocket, 'getDuplicatePlayerRealName', sendData, function (data) {
                let realNameDuplicateCount = data.data.size || 0;

                if (realNameDuplicateCount == 0) {
                    vm.existRealName = false;
                } else {
                    vm.existRealName = true;
                }

                $scope.safeApply();

            });
        };

        vm.initRealNameRecord = function () {
            vm.realNameDuplicate = {};
            utilService.actionAfterLoaded('#sameRealNameLog.in #sameRealNameLogTablePage', function () {
                vm.realNameDuplicate.pageObj = utilService.createPageForPagingTable("#sameRealNameLogTablePage", {}, $translate, function (curP, pageSize) {
                    vm.commonPageChangeHandler(curP, pageSize, "realNameDuplicate", vm.loadRealNameRecord);
                });
                vm.loadRealNameRecord(true);
            });
        }

        vm.loadRealNameRecord = function (newSearch) {
            if (!vm.newPlayer.realName) {
                return;
            }
            vm.getCredibilityRemarks();
            let sendData = {
                platformId: vm.selectedPlatform.id,
                realName: vm.newPlayer.realName,
                limit: newSearch ? 10 : (vm.realNameDuplicate.limit || 10),
                index: newSearch ? 0 : (vm.realNameDuplicate.index || 0),
                sortCol: vm.realNameDuplicate.sortCol || null
            }

            socketService.$socket($scope.AppSocket, 'getDuplicatePlayerRealName', sendData, function (data) {
                console.log("getDuplicatePlayerRealName", data);
                let tblData = data && data.data ? data.data.data : [];
                let total = data.data ? data.data.size : 0;
                vm.realNameDuplicate.totalCount = total;

                if (tblData && tblData.length > 0) {
                    tblData.map(
                        record => {
                            let credibilityRemarksTXT = '';
                            record.name = record.data.name ? record.data.name : "";
                            record.realName = record.data.realName ? record.data.realName : "";
                            record.lastLoginIp = record.lastLoginIp ? record.lastLoginIp : "";
                            record.combinedArea = (record.data.phoneProvince && record.data.phoneCity) ? record.data.phoneProvince + " " + record.data.phoneCity : "";
                            record.registrationTime = record.data.registrationTime ? vm.dateReformat(record.data.registrationTime) : "";
                            record.playerLevelName = record.data.playerLevel ? $translate(record.data.playerLevel.name) : "";
                            record.credibilityRemarks = record.data.credibilityRemarks ? vm.credibilityRemarks.filter(item => {
                                return record.data.credibilityRemarks.includes(item._id);
                            }) : [];
                            record.credibilityRemarksName = record.credibilityRemarks.map(function (value, index) {
                                let colon = '';
                                credibilityRemarksTXT += value.name + colon;
                                return credibilityRemarksTXT;
                            }) || '';
                            record.valueScore = record.data.valueScore ? record.data.valueScore : "";
                            record.ipAreaName = record.data.ipArea ? vm.getIpAreaName(record.data.ipArea) : '';
                            record.lastAccessTime = record.data.lastAccessTime ? vm.dateReformat(record.data.lastAccessTime) : "";
                            Object.keys(vm.allPlayersStatusString).filter(item => {
                                return record.data.playerStatus == vm.allPlayersStatusString[item];
                            })[0];
                            record.playerStatusName = $translate("Enable");
                            if (record.data.forbidPlayerFromLogin == true) {
                                record.playerStatusName = $translate("Disable")
                            }
                            return record;
                        }
                    );
                }
                vm.prepareRealNameDuplicateRecords(newSearch, tblData, total);
            });
        };

        vm.prepareRealNameDuplicateRecords = function (newSearch, tblData, size) {
            let tableOptions = $.extend({}, vm.generalDataTableOptions, {
                data: tblData,
                aoColumnDefs: [
                    {'sortCol': 'status', bSortable: true, 'aTargets': [1]},
                    {'sortCol': 'data.name', bSortable: true, 'aTargets': [3]},
                    {'sortCol': 'data.realName', bSortable: true, 'aTargets': [4]},
                    {'sortCol': 'lastLoginIp', bSortable: true, 'aTargets': [5]},
                    {'sortCol': 'createTime', bSortable: true, 'aTargets': [6]},
                    {'sortCol': 'data.phoneNumber', bSortable: true, 'aTargets': [7]},
                ],
                columns: [
                    {title: $translate('PLAYERNAME'), data: "name"},
                    {title: $translate('Real Name'), data: "realName"},
                    {title: $translate('CREDIBILITY'), data: "credibilityRemarksName"},
                    {title: $translate('PLAYER_VALUE'), data: "valueScore"},
                    {
                        title: $translate('STATUS'), data: "playerStatusName",
                        render: function (data, type, row) {
                            let color = "black";
                            if (row.data.forbidPlayerFromLogin == true) {
                                color = "red";
                            }
                            return '<div style="color:' + color + '">' + data + '</div>';
                        }
                    },
                    {title: $translate('PlayerLevel'), data: "playerLevelName"},
                    {title: $translate('REGISTERED_IP'), data: "ipAreaName"},
                    {title: $translate('PHONE_LOCATION'), data: "combinedArea"},
                    {title: $translate('REGISTERED_TIME'), data: "registrationTime"},
                    {title: $translate('last_access_time'), data: "lastAccessTime"}

                ],
                destroy: true,
                paging: false,
                autoWidth: true,
            });
            let aTable = $("#sameRealNameLogTable").DataTable(tableOptions);
            aTable.columns.adjust().draw();
            vm.realNameDuplicate.pageObj.init({maxCount: size}, newSearch);
            $('#sameRealNameLogTable').resize();
            $('#sameRealNameLogTable').off('order.dt');
            $scope.safeApply();
        };

        vm.existNumberDetector = function (newSearch) {

            if (!vm.newPlayer.phoneNumber) {
                return
            }

            if (vm.selectedPlatform.data.whiteListingPhoneNumbers && vm.selectedPlatform.data.whiteListingPhoneNumbers.indexOf(String(vm.newPlayer.phoneNumber)) !== -1) {
                // $scope.$evalAsync(() => {
                //     vm.existPhone = false;
                // });
                vm.existPhone = false;
                $scope.safeApply();
                return;
            }

            //var selectedStatus = ["Success", "Fail", "Pending", "Manual"]; //["Success", "Manual"];
            var selectedStatus = [vm.constProposalStatus.PENDING, vm.constProposalStatus.MANUAL, vm.constProposalStatus.SUCCESS];
            var sendData = {
                adminId: authService.adminId,
                platformId: vm.selectedPlatform.id,
                type: ["PlayerRegistrationIntention"],
                phoneNumber: vm.newPlayer.phoneNumber,
                size: newSearch ? 10 : (vm.phoneDuplicate.limit || 10),
                index: newSearch ? 0 : (vm.phoneDuplicate.index || 0),
                // sortCol: vm.newPlayerRecords.sortCol || null,
                displayPhoneNum: true
            }
            sendData.status = selectedStatus;
            socketService.$socket($scope.AppSocket, 'getDuplicatePlayerPhoneNumber', sendData, function (data) {
                let phoneDuplicateCount = data.data.size;
                vm.phoneDuplicateCount = phoneDuplicateCount
                if (data.data.size == 0) {
                    vm.existPhone = false;
                } else {
                    vm.existPhone = true;
                }
                $scope.safeApply();

            });
        }

        vm.loadPhoneNumberRecord = function (newSearch) {
            if (!vm.newPlayer.phoneNumber) {
                return
            }
            vm.getCredibilityRemarks();
            //var selectedStatus = ["Success", "Fail", "Pending", "Manual"]; //["Success", "Manual"];
            var selectedStatus = [vm.constProposalStatus.PENDING, vm.constProposalStatus.MANUAL, vm.constProposalStatus.SUCCESS];
            var sendData = {
                adminId: authService.adminId,
                platformId: vm.selectedPlatform.id,
                type: ["PlayerRegistrationIntention"],
                phoneNumber: vm.newPlayer.phoneNumber,
                size: newSearch ? 10 : (vm.phoneDuplicate.limit || 10),
                index: newSearch ? 0 : (vm.phoneDuplicate.index || 0),
                // sortCol: vm.newPlayerRecords.sortCol || null,
                displayPhoneNum: true
            }
            sendData.status = selectedStatus;
            $("#sameNumPlayerListTable").css('z-Index', 1051).modal();
            vm.preparePhoneDuplicateRecords(sendData, newSearch);
            $("#samePhoneNumTable").off('order.dt');
            $("#samePhoneNumTable").on('order.dt', function (event, a, b) {
                vm.commonSortChangeHandler(a, 'phoneDuplicate', vm.loadPhoneNumberRecord);
            });
            // vm.phoneDuplicate.pageObj = utilService.createPageForPagingTable("#samePhoneNumTablePage", {}, $translate, function (curP, pageSize) {
            //     vm.commonPageChangeHandler(curP, pageSize, "phoneDuplicate", vm.loadPhoneNumberRecord)
            // });

        }

        vm.preparePhoneDuplicateRecords = function (queryData, newSearch) {
            vm.phoneDuplicateListRecords = [];
            socketService.$socket($scope.AppSocket, 'getDuplicatePlayerPhoneNumber', queryData, function (data) {
                vm.phoneDuplicateListRecords = data.data.data;
                vm.phoneDuplicate.totalCount = data.data.size;
                vm.phoneDuplicate.loading = false;
                console.log('new player list record', data);

                vm.phoneDuplicateListRecords.map(
                    record => {
                        let credibilityRemarksTXT = '';
                        record.createTime = record.createTime ? vm.dateReformat(record.createTime) : "";
                        //record.statusName = record.status ? $translate(record.status) + " （" + record.$playerCurrentCount + "/" + record.$playerAllCount + ")" : "";
                        if (record.status) {
                            if (record.status == vm.constProposalStatus.SUCCESS) {
                                record.statusName = record.status ? $translate("Success") + " （" + record.$playerCurrentCount + "/" + record.$playerAllCount + ")" : "";
                            }
                            else if (record.status == vm.constProposalStatus.MANUAL) {
                                //record.statusName = record.status ? $translate(record.status) + " （" + record.$playerCurrentCount + "/" + record.$playerAllCount + ")" : "";
                                record.statusName = record.status ? $translate("MANUAL") + " （" + record.$playerCurrentCount + "/" + record.$playerAllCount + ")" : "";
                            } else {
                                record.statusName = record.status ? $translate("Attempt") + " （" + record.$playerCurrentCount + "/" + record.$playerAllCount + ")" : "";
                            }
                        }
                        record.playerId = record.data.playerId ? record.data.playerId : "";
                        record.name = record.data.name ? record.data.name : "";
                        record.realName = record.data.realName ? record.data.realName : "";
                        record.lastLoginIp = record.lastLoginIp ? record.lastLoginIp : "";
                        record.combinedArea = (record.data.phoneProvince && record.data.phoneCity) ? record.data.phoneProvince + " " + record.data.phoneCity : "";
                        record.topUpTimes = record.data.topUpTimes ? record.data.topUpTimes : 0;
                        record.smsCode = record.data.smsCode ? record.data.smsCode : "";
                        record.remarks = record.data.remarks ? record.data.remarks : "";
                        record.device = record.data.device ? $translate($scope.merchantTargetDeviceJson[record.data.device]) : "";
                        record.promoteWay = record.data.promoteWay ? record.data.promoteWay : "";
                        record.csOfficer = record.data.csOfficer ? record.data.csOfficer : "";
                        record.registrationTime = record.data.registrationTime ? vm.dateReformat(record.data.registrationTime) : "";
                        record.proposalId = record.data.proposalId ? record.data.proposalId : "";
                        record.playerLevelName = record.data.playerLevel ? $translate(record.data.playerLevel.name) : "";
                        record.credibilityRemarks = record.data.credibilityRemarks ? vm.credibilityRemarks.filter(item => {
                            return record.data.credibilityRemarks.includes(item._id);
                        }) : [];
                        record.credibilityRemarksName = record.credibilityRemarks.map(function (value, index) {
                            let colon = '';
                            credibilityRemarksTXT += value.name + colon;
                            return credibilityRemarksTXT;
                        }) || '';
                        record.valueScore = record.data.valueScore ? record.data.valueScore : "";
                        record.ipAreaName = record.data.ipArea ? vm.getIpAreaName(record.data.ipArea) : '';
                        record.lastAccessTime = record.data.lastAccessTime ? vm.dateReformat(record.data.lastAccessTime) : "";
                        Object.keys(vm.allPlayersStatusString).filter(item => {
                            return record.data.playerStatus == vm.allPlayersStatusString[item];
                        })[0];
                        record.playerStatusName = $translate("Enable");
                        if (record.data.forbidPlayerFromLogin == true) {
                            record.playerStatusName = $translate("Disable")
                        }

                        return record
                    }
                );
                var tableData = vm.phoneDuplicateListRecords;
                var option = $.extend({}, vm.generalDataTableOptions, {
                    data: tableData,
                    aoColumnDefs: [
                        {'sortCol': 'proposalId', bSortable: true, 'aTargets': [0]},
                        {'sortCol': 'status', bSortable: true, 'aTargets': [1]},
                        //{'sortCol': 'data.playerId', bSortable: true, 'aTargets': [2]},
                        {'sortCol': 'data.name', bSortable: true, 'aTargets': [3]},
                        {'sortCol': 'data.realName', bSortable: true, 'aTargets': [4]},
                        {'sortCol': 'lastLoginIp', bSortable: true, 'aTargets': [5]},
                        {'sortCol': 'createTime', bSortable: true, 'aTargets': [6]},
                        {'sortCol': 'data.phoneNumber', bSortable: true, 'aTargets': [7]},
                        // {targets: '_all', defaultContent: ' ', bSortable: false}
                    ],
                    columns: [
                        {title: $translate('PLAYERNAME'), data: "name"},
                        {title: $translate('Real Name'), data: "realName"},
                        {title: $translate('CREDIBILITY'), data: "credibilityRemarksName"},
                        //{title: $translate('PLAYERID'), data: "playerId"},
                        {title: $translate('PLAYER_VALUE'), data: "valueScore"},
                        {
                            title: $translate('STATUS'), data: "playerStatusName",
                            render: function (data, type, row) {
                                let color = "black";
                                if (row.data.forbidPlayerFromLogin == true) {
                                    color = "red";
                                }
                                return '<div style="color:' + color + '">' + data + '</div>';
                            }
                        },
                        {title: $translate('PlayerLevel'), data: "playerLevelName"},
                        {title: $translate('REGISTERED_IP'), data: "ipAreaName"},
                        {title: $translate('PHONE_LOCATION'), data: "combinedArea"},
                        {title: $translate('REGISTERED_TIME'), data: "registrationTime"},
                        {title: $translate('last_access_time'), data: "lastAccessTime"}

                    ],
                    destroy: true,
                    paging: false,
                    autoWidth: true,
                    initComplete: function (data, type, row) {
                        $scope.safeApply();
                    },
                    createdRow: function (row, data, dataIndex) {
                        $compile(angular.element(row).contents())($scope);

                    },
                    fnRowCallback: vm.playerListTableRow
                });
                var a = utilService.createDatatableWithFooter('#samePhoneNumTable', option, {});
                vm.phoneDuplicate.pageObj.init({maxCount: vm.phoneDuplicate.totalCount}, newSearch);
                setTimeout(function () {
                    $('#samePhoneNumTable').resize();
                }, 300);

            });
        };
        vm.getIpAreaName = function (ipArea) {
            let result = '';
            let province = ipArea.province ? ipArea.province : '';
            let city = ipArea.city ? ipArea.city : '';
            if (province && city) {
                result = province + ', ' + city;
            }
            return result
        }
        vm.getNewPlayerListByFilter = function (newSearch) {
            $('#getNewPlayerListSpin').show();
            var selectedStatus;

            if (vm.queryPara.newPlayerList) {
                if (vm.queryPara.newPlayerList.status == "ATTEMPT") {
                    selectedStatus = [vm.constProposalStatus.PENDING];
                } else {
                    selectedStatus = [vm.constProposalStatus[vm.queryPara.newPlayerList.status]];
                }
            }
            else {
                selectedStatus = [vm.constProposalStatus.MANUAL, vm.constProposalStatus.SUCCESS, vm.constProposalStatus.PENDING, vm.constProposalStatus.NOVERIFY];
            }

            var sendData = {
                adminId: authService.adminId,
                platformId: vm.queryPara.newPlayerList ? vm.queryPara.newPlayerList.platform : vm.allPlatformData.map(platform => platform._id),
                type: ["PlayerRegistrationIntention"],
                startDate: vm.queryPara.newPlayerRecords.startTime.data('datetimepicker').getLocalDate(),
                endDate: vm.queryPara.newPlayerRecords.endTime.data('datetimepicker').getLocalDate(),
                name: vm.queryPara.newPlayerList ? vm.queryPara.newPlayerList.playerName : null,
                phoneNumber: vm.queryPara.newPlayerList ? vm.queryPara.newPlayerList.phoneNumber : null,
                // entryType: vm.queryProposalEntryType,
                size: newSearch ? 100 : (vm.newPlayerRecords.limit || 100),
                index: newSearch ? 0 : (vm.newPlayerRecords.index || 0),
                sortCol: vm.newPlayerRecords.sortCol || null,
                displayPhoneNum: true

            }

            if (selectedStatus && selectedStatus != "") {
                sendData.status = selectedStatus
            } else {
                sendData.status = [vm.constProposalStatus.MANUAL, vm.constProposalStatus.SUCCESS, vm.constProposalStatus.PENDING, vm.constProposalStatus.NOVERIFY];
            }

            vm.newPlayerRecords.loading = true;
            console.log("Query", sendData);
            vm.prepareNewPlayerListRecords(sendData, newSearch);
            $("#newPlayerListTable").off('order.dt');
            $("#newPlayerListTable").on('order.dt', function (event, a, b) {
                vm.commonSortChangeHandler(a, 'newPlayerRecords', vm.getNewPlayerListByFilter);
            });
        };

        vm.prepareNewPlayerListRecords = function (queryData, newSearch) {
            vm.newPlayerListRecords = [];
            socketService.$socket($scope.AppSocket, 'getPlayerProposalsForAdminId', queryData, function (data) {
                vm.newPlayerListRecords = data.data.data;
                vm.newPlayerRecords.totalCount = data.data.size;
                vm.newPlayerRecords.loading = false;
                vm.newPlayerRecordsSuccessNames = []; // include status Success, Manual and NoVerify
                vm.newPlayerRecordsSuccessPhone = []; // include status Success, Manual and NoVerify
                $('#getNewPlayerListSpin').hide();
                console.log('new player list record', data);

                var tableData = vm.newPlayerListRecords.map(
                    record => {
                        if (record.status == vm.constProposalStatus.NOVERIFY && record.data && record.data.registrationTime) {
                            record.createTime = vm.dateReformat(record.data.registrationTime);
                        } else {
                            record.createTime = record.createTime ? vm.dateReformat(record.createTime) : "";
                        }
                        //record.statusName = record.status ? $translate(record.status) + " （" + record.$playerCurrentCount + "/" + record.$playerAllCount + ")" : "";
                        if (record.status) {
                            if (record.status == vm.constProposalStatus.SUCCESS) {
                                vm.newPlayerRecordsSuccessNames.push(record.data.name);
                                vm.newPlayerRecordsSuccessPhone.push(record.data.phoneNumber);
                                record.statusName = record.status ? $translate("Success") + " （" + record.$playerCurrentCount + "/" + record.$playerAllCount + ")" : "";
                            }
                            else if (record.status == vm.constProposalStatus.MANUAL) {
                                vm.newPlayerRecordsSuccessNames.push(record.data.name);
                                vm.newPlayerRecordsSuccessPhone.push(record.data.phoneNumber);
                                //record.statusName = record.status ? $translate(record.status) + " （" + record.$playerCurrentCount + "/" + record.$playerAllCount + ")" : "";
                                record.statusName = record.status ? $translate("MANUAL") + " （" + record.$playerCurrentCount + "/" + record.$playerAllCount + ")" : "";
                            }
                            else if (record.status == vm.constProposalStatus.NOVERIFY) {
                                vm.newPlayerRecordsSuccessNames.push(record.data.name);
                                vm.newPlayerRecordsSuccessPhone.push(record.data.phoneNumber);
                                record.statusName = record.status ? $translate("NoVerify") + " （" + record.$playerCurrentCount + "/" + record.$playerAllCount + ")" : "";
                            }
                            else {
                                record.statusName = record.status ? $translate("Attempt") + " （" + record.$playerCurrentCount + "/" + record.$playerAllCount + ")" : "";
                            }
                        }

                        record.platform$ = "";

                        if(record && record.data && (record.data.platform || record.data.platformId) && vm.allPlatformData && vm.allPlatformData.length){
                            let platformObjId = record.data.platform ? record.data.platform : record.data.platformId;
                            let filteredPlatform = vm.allPlatformData.filter(a => a._id.toString() == platformObjId.toString());
                            record.platform$ = filteredPlatform && filteredPlatform[0] && filteredPlatform[0].name ? filteredPlatform[0].name : "";
                        }
                        record.playerId = (record.data && record.data.playerId) ? record.data.playerId : "";
                        record.name = (record.data && record.data.name) ? record.data.name : "";
                        record.realName = (record.data && record.data.realName) ? record.data.realName : "";
                        record.combinedArea = (record.data && (record.data.phoneProvince && record.data.phoneCity)) ? record.data.phoneProvince + " " + record.data.phoneCity : "";
                        record.topUpTimes = (record.data && record.data.topUpTimes) ? record.data.topUpTimes : 0;
                        record.smsCode = (record.data && record.data.smsCode) ? record.data.smsCode : "";
                        record.remarks = (record.data && record.data.remarks) ? record.data.remarks : "";
                        record.device = (record.inputDevice != "undefined" && record.inputDevice != "null") ? $translate($scope.constPlayerRegistrationInterface[record.inputDevice]) : "";
                        record.promoteWay = (record.data && record.data.promoteWay) ? record.data.promoteWay : "";
                        record.csOfficer = (record.data && record.data.csOfficer) ? record.data.csOfficer : "";
                        record.registrationTime = (record.data && record.data.registrationTime) ? vm.dateReformat(record.data.registrationTime) : "";
                        record.proposalId = (record.data && record.proposalId) ? record.proposalId : "";
                        record.ipAreaName = (record.data && record.data.ipArea) ? vm.getIpAreaName(record.data.ipArea) : '';
                        record.domain = (record.data && record.data.domain) ? record.data.domain : "";
                        return record
                    }
                );
                vm.drawNewPlayerTable(vm.newPlayerListRecords, newSearch);
            });
        };
        vm.drawNewPlayerTable = function(data, newSearch){
            var tableData = data;
            var option = $.extend({}, vm.generalDataTableOptions, {
                data: tableData,
                aoColumnDefs: [
                    {'sortCol': 'proposalId', bSortable: true, 'aTargets': [1]},
                    {'sortCol': 'name', bSortable: true, 'aTargets': [2]},
                    {'sortCol': 'statusName', bSortable: true, 'aTargets': [3]},
                    {'sortCol': 'createTime', bSortable: true, 'aTargets': [4]},
                    {'sortCol': 'registrationTime', bSortable: true, 'aTargets': [5]},
                    {'sortCol': 'ipAreaName', bSortable: true, 'aTargets': [6]},
                    {'sortCol': 'combinedArea', bSortable: true, 'aTargets': [7]},
                    {'sortCol': 'topUpTimes', bSortable: true, 'aTargets': [8]},
                    {'sortCol': 'smsCode', bSortable: true, 'aTargets': [9]},
                    {'sortCol': 'remarks', bSortable: true, 'aTargets': [10]},
                    {'sortCol': 'device', bSortable: true, 'aTargets': [11]},
                    {'sortCol': 'promoteWay', bSortable: true, 'aTargets': [13]},
                    {'sortCol': 'csOfficer', bSortable: true, 'aTargets': [14]},
                ],
                columns: [
                    {title: $translate('PRODUCT_NAME'), data: "platform$"},
                    {
                        title: $translate('proposalId'),
                        data: "proposalId",
                        render: function (data, type, row) {

                            var link = $('<a>', {
                                'ng-click': 'vm.editNewplayerRemark=false;vm.showNewPlayerModal(' + JSON.stringify(row) + ',2)'
                            }).text(data);
                            return link.prop('outerHTML');
                        }
                    },
                    {title: $translate('PLAYERNAME'), data: "name"},
                    {title: $translate('STATUS'), data: "statusName"},
                    {title: $translate('SENT TIME'), data: "createTime"},
                    {title: $translate('REGISTERED_TIME'), data: "registrationTime"},
                    {title: $translate('REGISTERED_IP'), data: "ipAreaName"},
                    {title: $translate('PHONE_LOCATION'), data: "combinedArea"},
                    {title: $translate('DEPOSIT_COUNT'), data: "topUpTimes"},
                    {title: $translate('VERIFICATION_CODE'), data: "smsCode"},
                    {title: $translate('REMARKS'), data: "remarks"},
                    {title: $translate('DEVICE'), data: "device"},
                    {
                        title: $translate('Function'),
                        data: "data.phoneNumber",
                        advSearch: true,
                        "sClass": "",
                        render: function (data, type, row) {
                            data = data || '';
                            //var playerObjId = row.data._id ? row.data._id : "";
                            let displayTXT = '';
                            let action = '';
                            var link = $('<div>', {});

                            if (row.data.phoneNumber && row.data.phoneNumber != "") {
                                link.append($('<div>', {
                                    'class': 'fa fa-volume-control-phone',
                                    'ng-click': 'vm.callNewPlayerBtn(' + '"' + row.data.phoneNumber + '",' + JSON.stringify(row) + ');',
                                    'title': $translate("PHONE")
                                }));
                                link.append($('<div>', {
                                    'class': 'fa fa-comment',
                                    'style': 'padding-left:15px',
                                    'ng-click': 'vm.smsNewPlayerBtn(' + '"' + row.data.phoneNumber + '",' + JSON.stringify(row) + ');vm.initSMSModal();',
                                    'title': $translate("SMS")
                                }));
                            }

                            if (row.status != vm.constProposalStatus.SUCCESS && row.status != vm.constProposalStatus.MANUAL) {
                                displayTXT = $translate('CREATE_NEW_PLAYER');
                                action = 'vm.createPlayerHelper(' + JSON.stringify(row) + ')';
                                link.append($('<div>', {
                                    'class': 'fa fa-user-plus',
                                    'style': 'padding-left:15px',
                                    'ng-click': action,
                                    'title': $translate(displayTXT)
                                }));

                            } else {
                                displayTXT = $translate('FEEDBACK');
                                action = 'vm.initNewPlayerFeedbackModal(' + JSON.stringify(row) + ')';
                                $('#modalAddPlayerFeedback').css('z-Index', 1051);
                                link.append($('<div>', {
                                    'class': 'fa fa-commenting',
                                    'style': 'padding-left:15px',
                                    'data-row': JSON.stringify(row),
                                    'data-toggle': 'modal',
                                    'data-target': '#modalAddPlayerFeedback',
                                    'ng-click': action,
                                    'title': $translate(displayTXT)
                                }));
                            }

                            return link.prop('outerHTML')
                        }
                    },

                    {title: $translate('PROMOTE_WAY'), data: "promoteWay"},
                    {title: $translate('CUSTOMER_SERVICE'), data: "csOfficer"},
                ],
                bSortClasses: false,
                destroy: true,
                paging: false,
                autoWidth: true,
                fnInitComplete: function(settings){
                    setTimeout(() => {
                        $compile(angular.element('#' + settings.sTableId).contents())($scope);
                    }, 50);
                },
                fnRowCallback: vm.playerListTableRow
            });
            var a = utilService.createDatatableWithFooter('#newPlayerListTable', option, {});
            vm.newPlayerRecords.pageObj.init({maxCount: vm.newPlayerRecords.totalCount}, newSearch);
            setTimeout(function () {
                $('#newPlayerListTable').resize();
            }, 100);
        }

        vm.createPlayerHelper = function (row) {
            console.log(row);
            vm.prepareCreatePlayer();
            $('#modalCreatePlayer')
                .css('z-Index', 1051)
                .modal();
            utilService.actionAfterLoaded("#modalCreatePlayer", function () {
                vm.newPlayer.realName = row.data.realName;
                vm.newPlayer.name = row.data.name;
                vm.newPlayer.email = row.data.email;
                vm.newPlayer.domain = row.data.domain;
                vm.newPlayer.phoneNumber = row.data.phoneNumber;
                vm.newPlayer.referralName = row.data.referral;
            });
        }
        vm.playerListTableRow = function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
            vm.operatePlayerListTableRow(nRow, aData, iDisplayIndex, iDisplayIndexFull);
        };

        vm.operatePlayerListTableRow = function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
            let smsExpiredDate = new Date();
            smsExpiredDate = smsExpiredDate.setMinutes(smsExpiredDate.getMinutes() - vm.selectedPlatform.data.smsVerificationExpireTime);
            let createTime = Date.parse(aData.createTime);
            switch (true) {
                case ((aData.status == vm.constProposalStatus.PENDING) && (aData.$playerAllCount - aData.$playerCurrentCount == 0 && createTime >= smsExpiredDate)): {
                    $(nRow).context.style.backgroundColor = 'rgba(255, 153, 153, 100)';
                    //$(nRow).css('background-color > .sorting_1', 'rgba(255, 209, 202, 100)','important');
                    break;
                }
                case ((aData.status == vm.constProposalStatus.PENDING) && (aData.$playerAllCount - aData.$playerCurrentCount > 0 || createTime < smsExpiredDate)): {
                    $(nRow).context.style.backgroundColor = 'rgba(153, 153, 153, 100)';
                    break;
                }
                default: {
                    $(nRow).context.style.backgroundColor = 'rgba(255, 255, 255, 100)';
                    break;
                }
            }
        };

        // get attempt number list -- start
        vm.playerRegistrationSuccessRateList = function () {
            vm.playerRegistrationRecords = {totalCount: 0};
            vm.initQueryTimeFilter('attemptNumberRecords', function () {
                vm.playerRegistrationRecords.pageObj = utilService.createPageForPagingTable("#playerRegistrationIntentRecordsTablePage", {}, $translate, function (curP, pageSize) {
                    vm.commonPageChangeHandler(curP, pageSize, "playerRegistrationRecords", vm.preparePlayerRegistrationIntentRecordsByStatus)
                });

                vm.getPlayerRegistrationSucccessRateListByFilter(true);
            });
        }

        //vm.getPlayerRegistrationSucccessRateListByFilter = function (newSearch) {
        vm.getPlayerRegistrationSucccessRateListByFilter = function () {
            //var selectedStatus = vm.queryPara.attemptNumberList ? [vm.queryPara.attemptNumberList.status] : ["Success", "Fail", "Pending", "Manual"];
            var sendData = {
                adminId: authService.adminId,
                platformId: vm.queryPara && vm.queryPara.attemptNumberRecords && vm.queryPara.attemptNumberRecords.platform &&
                vm.queryPara.attemptNumberRecords.platform.length > 0 ? vm.queryPara.attemptNumberRecords.platform : vm.allPlatformData.map(x => x._id),
                type: ["PlayerRegistrationIntention"],
                startDate: vm.queryPara.attemptNumberRecords.startTime.data('datetimepicker').getLocalDate(),
                endDate: vm.queryPara.attemptNumberRecords.endTime.data('datetimepicker').getLocalDate(),
                relateUser: null,
                //sortCol: vm.playerRegistrationRecords.sortCol || null,
                displayPhoneNum: true
            }
            vm.playerRegistrationRecords.loading = true;
            console.log("Query", sendData);
            vm.prepareSelfRegistrationSuccessRateRecords(sendData);
            vm.prepareRegistrationDistributionRecords(sendData);

        };

        vm.prepareSelfRegistrationSuccessRateRecords = function (queryData) {
            queryData.status = [vm.constProposalStatus.PENDING, vm.constProposalStatus.SUCCESS];
            vm.selfRegistrationSuccessRateRecords = [];
            socketService.$socket($scope.AppSocket, 'getPlayerSelfRegistrationRecordList', queryData, function (data) {
                vm.selfRegistrationSuccessRateRecords = data.data;
                //vm.playerRegistrationRecords.totalCount = data.data.size;
                vm.playerRegistrationRecords.loading = false;
                console.log('self registration success rate record', data);

                var tableData = vm.selfRegistrationSuccessRateRecords.map(
                    record => {
                        record.selfRegistrationTotalSuccess = record.selfRegistrationTotalSuccess ? $translate(record.selfRegistrationTotalSuccess) : "";
                        record.totalAttempt = record.totalAttempt ? $translate(record.totalAttempt) : "";
                        return record ? record : "";
                    }
                );
                var tableData = vm.selfRegistrationSuccessRateRecords;
                //var failStatusArr = [vm.constProposalStatus.PENDING];
                var option = $.extend({}, vm.generalDataTableOptions, {
                    data: tableData,
                    columns: [
                        {
                            title: $translate('SELF_REGISTER_SUCCESS_RATE'),
                            data: $translate('selfRegistrationTotalSuccess')
                        },
                        {
                            title: $translate('TOTAL_ATTEMPT'),
                            data: "totalAttempt",
                            advSearch: true,
                            "sClass": "",
                            render: function (data, type, row) {
                                data = data || '';
                                var link = $('<div>', {});
                                if (data != "" && data != "0.00") {
                                    let statusArr = [vm.constProposalStatus.PENDING, vm.constProposalStatus.SUCCESS];
                                    link.append($('<a>', {
                                        'ng-click': 'vm.setPreparePlayerRegistrationIntentRecordsByStatusParam(' + JSON.stringify(queryData) + ',"-1",' + JSON.stringify(statusArr) + ');',
                                    }).text(data));
                                }
                                else {
                                    link.append($('<div>', {}).text(data ? data : 0));
                                }
                                return link.prop('outerHTML')
                            }
                        },
                        {
                            title: $translate('ATTEMPT') + "(1/1)",
                            data: "firstFail",
                            advSearch: true,
                            "sClass": "",
                            render: function (data, type, row) {
                                data = data || '';
                                var link = $('<div>', {});
                                if (data != "" && data != "0.00") {
                                    link.append($('<a>', {
                                        'ng-click': 'vm.setPreparePlayerRegistrationIntentRecordsByStatusParam(' + JSON.stringify(queryData) + ',"1","' + vm.constProposalStatus.PENDING + '");',
                                    }).text(data ? data : 0));
                                }
                                else {
                                    link.append($('<div>', {}).text(data ? data : 0));
                                }
                                return link.prop('outerHTML')
                            }
                        },
                        {
                            title: $translate('ATTEMPT') + "(2/2)",
                            data: "secondFail",
                            advSearch: true,
                            "sClass": "",
                            render: function (data, type, row) {
                                data = data || '';
                                var link = $('<div>', {});
                                if (data != "" && data != "0.00") {
                                    link.append($('<a>', {
                                        'ng-click': 'vm.setPreparePlayerRegistrationIntentRecordsByStatusParam(' + JSON.stringify(queryData) + ',"2","' + vm.constProposalStatus.PENDING + '");',
                                    }).text(data ? data : 0));
                                }
                                else {
                                    link.append($('<div>', {}).text(data ? data : 0));
                                }
                                return link.prop('outerHTML')
                            }
                        },
                        {
                            title: $translate('ATTEMPT') + "(3/3)",
                            data: "thirdFail",
                            advSearch: true,
                            "sClass": "",
                            render: function (data, type, row) {
                                data = data || '';
                                var link = $('<div>', {});
                                if (data != "" && data != "0.00") {
                                    link.append($('<a>', {
                                        'ng-click': 'vm.setPreparePlayerRegistrationIntentRecordsByStatusParam(' + JSON.stringify(queryData) + ',"3","' + vm.constProposalStatus.PENDING + '");',
                                    }).text(data ? data : 0));
                                }
                                else {
                                    link.append($('<div>', {}).text(data ? data : 0));
                                }
                                return link.prop('outerHTML')
                            }
                        },
                        {
                            title: $translate('ATTEMPT') + "(4/4)",
                            data: "fouthFail",
                            advSearch: true,
                            "sClass": "",
                            render: function (data, type, row) {
                                data = data || '';
                                var link = $('<div>', {});
                                if (data != "" && data != "0.00") {
                                    link.append($('<a>', {
                                        'ng-click': 'vm.setPreparePlayerRegistrationIntentRecordsByStatusParam(' + JSON.stringify(queryData) + ',"4","' + vm.constProposalStatus.PENDING + '");',
                                        //vm.setPreparePlayerRegistrationIntentRecordsByStatusParam({"adminId":"57b6c8b33d71e6c469f2aa20","platformId":"5733e26ef8c8a9355caf49d8","type":["PlayerRegistrationIntention"],"startDate":"2017-11-26T16:00:00.000Z","endDate":"2017-11-28T16:00:00.000Z","relateUser":null,"displayPhoneNum":true,"status":["Success","Manual"]},"1","Success");
                                    }).text(data ? data : 0));
                                }
                                else {
                                    link.append($('<div>', {}).text(data ? data : 0));
                                }
                                return link.prop('outerHTML')
                            }
                        },
                        {
                            title: $translate('ATTEMPT') + "(5/5)",
                            data: "fifthFail",
                            advSearch: true,
                            "sClass": "",
                            render: function (data, type, row) {
                                data = data || '';
                                var link = $('<div>', {});
                                if (data != "" && data != "0.00") {
                                    link.append($('<a>', {
                                        'ng-click': 'vm.setPreparePlayerRegistrationIntentRecordsByStatusParam(' + JSON.stringify(queryData) + ',"5","' + vm.constProposalStatus.PENDING + '");',
                                    }).text(data ? data : 0));
                                }
                                else {
                                    link.append($('<div>', {}).text(data ? data : 0));
                                }
                                return link.prop('outerHTML')
                            }
                        },
                        {
                            title: $translate('ATTEMPT') + "(5UP)",
                            data: "fifthUpFail",
                            advSearch: true,
                            "sClass": "",
                            render: function (data, type, row) {
                                data = data || '';
                                var link = $('<div>', {});
                                if (data != "" && data != "0.00") {
                                    link.append($('<a>', {
                                        'ng-click': 'vm.setPreparePlayerRegistrationIntentRecordsByStatusParam(' + JSON.stringify(queryData) + ',"0","' + vm.constProposalStatus.PENDING + '");',
                                    }).text(data ? data : 0));
                                }
                                else {
                                    link.append($('<div>', {}).text(data ? data : 0));
                                }
                                return link.prop('outerHTML')
                            }
                        },
                        {
                            title: $translate('SUCCESS') + "(1/1)",
                            data: "firstSuccess",
                            advSearch: true,
                            "sClass": "",
                            render: function (data, type, row) {
                                data = data || '';
                                var link = $('<div>', {});
                                if (data != "" && data != "0.00") {
                                    link.append($('<a>', {
                                        'ng-click': 'vm.setPreparePlayerRegistrationIntentRecordsByStatusParam(' + JSON.stringify(queryData) + ',"1","' + vm.constProposalStatus.SUCCESS + '");',
                                    }).text(data ? data : 0));
                                }
                                else {
                                    link.append($('<div>', {}).text(data ? data : 0));
                                }
                                return link.prop('outerHTML')
                            }
                        },
                        {
                            title: $translate('SUCCESS') + "(2/2)",
                            data: "secondSuccess",
                            advSearch: true,
                            "sClass": "",
                            render: function (data, type, row) {
                                data = data || '';
                                var link = $('<div>', {});
                                if (data != "" && data != "0.00") {
                                    link.append($('<a>', {
                                        'ng-click': 'vm.setPreparePlayerRegistrationIntentRecordsByStatusParam(' + JSON.stringify(queryData) + ',"2","' + vm.constProposalStatus.SUCCESS + '");',
                                    }).text(data ? data : 0));
                                }
                                else {
                                    link.append($('<div>', {}).text(data ? data : 0));
                                }
                                return link.prop('outerHTML')
                            }
                        },
                        {
                            title: $translate('SUCCESS') + "(3/3)",
                            data: "thirdSuccess",
                            advSearch: true,
                            "sClass": "",
                            render: function (data, type, row) {
                                data = data || '';
                                var link = $('<div>', {});
                                if (data != "" && data != "0.00") {
                                    link.append($('<a>', {
                                        'ng-click': 'vm.setPreparePlayerRegistrationIntentRecordsByStatusParam(' + JSON.stringify(queryData) + ',"3","' + vm.constProposalStatus.SUCCESS + '");',
                                    }).text(data ? data : 0));
                                }
                                else {
                                    link.append($('<div>', {}).text(data ? data : 0));
                                }
                                return link.prop('outerHTML')
                            }
                        },
                        {
                            title: $translate('SUCCESS') + "(4/4)",
                            data: "fouthSuccess",
                            advSearch: true,
                            "sClass": "",
                            render: function (data, type, row) {
                                data = data || '';
                                var link = $('<div>', {});
                                if (data != "" && data != "0.00") {
                                    link.append($('<a>', {
                                        'ng-click': 'vm.setPreparePlayerRegistrationIntentRecordsByStatusParam(' + JSON.stringify(queryData) + ',"4","' + vm.constProposalStatus.SUCCESS + '");',
                                    }).text(data ? data : 0));
                                }
                                else {
                                    link.append($('<div>', {}).text(data ? data : 0));
                                }
                                return link.prop('outerHTML')
                            }
                        },
                        {
                            title: $translate('SUCCESS') + "(5/5)",
                            data: "fifthSuccess",
                            advSearch: true,
                            "sClass": "",
                            render: function (data, type, row) {
                                data = data || '';
                                var link = $('<div>', {});
                                if (data != "" && data != "0.00") {
                                    link.append($('<a>', {
                                        'ng-click': 'vm.setPreparePlayerRegistrationIntentRecordsByStatusParam(' + JSON.stringify(queryData) + ',"5","' + vm.constProposalStatus.SUCCESS + '");',
                                    }).text(data ? data : 0));
                                }
                                else {
                                    link.append($('<div>', {}).text(data ? data : 0));
                                }
                                return link.prop('outerHTML')
                            }
                        },
                        {
                            title: $translate('SUCCESS') + "(5UP)",
                            data: "fifthUpSuccess",
                            advSearch: true,
                            "sClass": "",
                            render: function (data, type, row) {
                                data = data || '';
                                var link = $('<div>', {});
                                if (data != "" && data != "0.00") {
                                    link.append($('<a>', {
                                        'ng-click': 'vm.setPreparePlayerRegistrationIntentRecordsByStatusParam(' + JSON.stringify(queryData) + ',"0","' + vm.constProposalStatus.SUCCESS + '");',
                                    }).text(data ? data : 0));
                                }
                                else {
                                    link.append($('<div>', {}).text(data ? data : 0));
                                }
                                return link.prop('outerHTML')
                            }
                        },
                    ],
                    destroy: true,
                    paging: false,
                    autoWidth: true,
                    initComplete: function (data, type, row) {
                        $scope.safeApply();
                    },
                    createdRow: function (row, data, dataIndex) {
                        $compile(angular.element(row).contents())($scope);
                    },
                    fnRowCallback: vm.playerListTableRow
                });
                var a = utilService.createDatatableWithFooter('#selfRegistrationSuccessRateTable', option, {});
                //vm.playerRegistrationRecords.pageObj.init({maxCount: vm.playerRegistrationRecords.totalCount}, newSearch);
                setTimeout(function () {
                    $('#selfRegistrationSuccessRateTable').resize();
                }, 300);

            });
        };

        vm.prepareRegistrationDistributionRecords = function (queryData) {
            queryData.status = [vm.constProposalStatus.SUCCESS, vm.constProposalStatus.MANUAL];
            vm.registrationDistributionRecords = [];
            socketService.$socket($scope.AppSocket, 'getPlayerManualRegistrationRecordList', queryData, function (data) {
                vm.registrationDistributionRecords = data.data;
                //vm.registrationDistributionRecords.totalCount = data.data.size;
                vm.registrationDistributionRecords.loading = false;
                console.log('registration distribution record', data);

                var tableData = vm.registrationDistributionRecords.map(
                    record => {
                        record.manualRegistrationTotalSuccess = record.manualRegistrationTotalSuccess ? $translate(record.manualRegistrationTotalSuccess) : "";
                        record.totalSuccess = record.totalSuccess ? $translate(record.totalSuccess) : "";
                        return record ? record : "";
                    }
                );
                var tableData = vm.registrationDistributionRecords;
                var option = $.extend({}, vm.generalDataTableOptions, {
                    data: tableData,
                    columns: [
                        {title: $translate('MANUAL/SELF_REGISTER_RATE'), data: "manualRegistrationTotalSuccess"},
                        {
                            title: $translate('TOTAL_REGISTRATION'),
                            data: "totalSuccess",
                            advSearch: true,
                            "sClass": "",
                            render: function (data, type, row) {
                                data = data || '';
                                var link = $('<div>', {});
                                if (data != "" && data != "0.00") {
                                    let statusArr = [vm.constProposalStatus.SUCCESS, vm.constProposalStatus.MANUAL]
                                    link.append($('<a>', {
                                        'ng-click': 'vm.setPreparePlayerRegistrationIntentRecordsByStatusParam(' + JSON.stringify(queryData) + ',"-1",' + JSON.stringify(statusArr) + ');',
                                    }).text(data ? data : 0));
                                }
                                else {
                                    link.append($('<div>', {}).text(data ? data : 0));
                                }
                                return link.prop('outerHTML')
                            }
                        },
                        {
                            title: $translate('MANUAL'),
                            data: "manualSuccess",
                            advSearch: true,
                            "sClass": "",
                            render: function (data, type, row) {
                                data = data || '';
                                var link = $('<div>', {});
                                if (data != "" && data != "0.00") {
                                    link.append($('<a>', {
                                        'ng-click': 'vm.setPreparePlayerRegistrationIntentRecordsByStatusParam(' + JSON.stringify(queryData) + ',"-1","' + vm.constProposalStatus.MANUAL + '");',
                                    }).text(data ? data : 0));
                                }
                                else {
                                    link.append($('<div>', {}).text(data ? data : 0));
                                }
                                return link.prop('outerHTML')
                            }
                        },
                        {
                            title: $translate('SUCCESS') + "(1/1)",
                            data: "firstSuccess",
                            advSearch: true,
                            "sClass": "",
                            render: function (data, type, row) {
                                data = data || '';
                                var link = $('<div>', {});
                                if (data != "" && data != "0.00") {
                                    link.append($('<a>', {
                                        'ng-click': 'vm.setPreparePlayerRegistrationIntentRecordsByStatusParam(' + JSON.stringify(queryData) + ',"1","' + vm.constProposalStatus.SUCCESS + '");',
                                    }).text(data ? data : 0));
                                }
                                else {
                                    link.append($('<div>', {}).text(data ? data : 0));
                                }
                                return link.prop('outerHTML')
                            }
                        },
                        {
                            title: $translate('SUCCESS') + "(2/2)",
                            data: "secondSuccess",
                            advSearch: true,
                            "sClass": "",
                            render: function (data, type, row) {
                                data = data || '';
                                var link = $('<div>', {});
                                if (data != "" && data != "0.00") {
                                    link.append($('<a>', {
                                        'ng-click': 'vm.setPreparePlayerRegistrationIntentRecordsByStatusParam(' + JSON.stringify(queryData) + ',"2","' + vm.constProposalStatus.SUCCESS + '");',
                                    }).text(data ? data : 0));
                                }
                                else {
                                    link.append($('<div>', {}).text(data ? data : 0));
                                }
                                return link.prop('outerHTML')
                            }
                        },
                        {
                            title: $translate('SUCCESS') + "(3/3)",
                            data: "thirdSuccess",
                            advSearch: true,
                            "sClass": "",
                            render: function (data, type, row) {
                                data = data || '';
                                var link = $('<div>', {});
                                if (data != "" && data != "0.00") {
                                    link.append($('<a>', {
                                        'ng-click': 'vm.setPreparePlayerRegistrationIntentRecordsByStatusParam(' + JSON.stringify(queryData) + ',"3","' + vm.constProposalStatus.SUCCESS + '");',
                                    }).text(data ? data : 0));
                                }
                                else {
                                    link.append($('<div>', {}).text(data ? data : 0));
                                }
                                return link.prop('outerHTML')
                            }
                        },
                        {
                            title: $translate('SUCCESS') + "(4/4)",
                            data: "fouthSuccess",
                            advSearch: true,
                            "sClass": "",
                            render: function (data, type, row) {
                                data = data || '';
                                var link = $('<div>', {});
                                if (data != "" && data != "0.00") {
                                    link.append($('<a>', {
                                        'ng-click': 'vm.setPreparePlayerRegistrationIntentRecordsByStatusParam(' + JSON.stringify(queryData) + ',"4","' + vm.constProposalStatus.SUCCESS + '");',
                                    }).text(data ? data : 0));
                                }
                                else {
                                    link.append($('<div>', {}).text(data ? data : 0));
                                }
                                return link.prop('outerHTML')
                            }
                        },
                        {
                            title: $translate('SUCCESS') + "(5/5)",
                            data: "fifthSuccess",
                            advSearch: true,
                            "sClass": "",
                            render: function (data, type, row) {
                                data = data || '';
                                var link = $('<div>', {});
                                if (data != "" && data != "0.00") {
                                    link.append($('<a>', {
                                        'ng-click': 'vm.setPreparePlayerRegistrationIntentRecordsByStatusParam(' + JSON.stringify(queryData) + ',"5","' + vm.constProposalStatus.SUCCESS + '");',
                                    }).text(data ? data : 0));
                                }
                                else {
                                    link.append($('<div>', {}).text(data ? data : 0));
                                }
                                return link.prop('outerHTML')
                            }
                        },
                        {
                            title: $translate('SUCCESS') + "(5UP)",
                            data: "fifthUpSuccess",
                            advSearch: true,
                            "sClass": "",
                            render: function (data, type, row) {
                                data = data || '';
                                var link = $('<div>', {});
                                if (data != "" && data != "0.00") {
                                    link.append($('<a>', {
                                        'ng-click': 'vm.setPreparePlayerRegistrationIntentRecordsByStatusParam(' + JSON.stringify(queryData) + ',"0","' + vm.constProposalStatus.SUCCESS + '");',
                                    }).text(data ? data : 0));
                                }
                                else {
                                    link.append($('<div>', {}).text(data ? data : 0));
                                }
                                return link.prop('outerHTML')
                            }
                        },
                    ],
                    destroy: true,
                    paging: false,
                    autoWidth: true,
                    initComplete: function (data, type, row) {
                        $scope.safeApply();
                    },
                    createdRow: function (row, data, dataIndex) {
                        $compile(angular.element(row).contents())($scope);

                    },
                    fnRowCallback: vm.playerListTableRow
                });
                var a = utilService.createDatatableWithFooter('#registrationDistributionRecordsTable', option, {});
                //vm.playerRegistrationRecords.pageObj.init({maxCount: vm.playerRegistrationRecords.totalCount}, newSearch);
                setTimeout(function () {
                    $('#registrationDistributionRecordsTable').resize();
                }, 300);


            });
        };

        vm.setPreparePlayerRegistrationIntentRecordsByStatusParam = function (queryData, attemptNo, status) {
            vm.queryData = queryData;
            vm.attemptNo = attemptNo;
            vm.status = status;

            vm.preparePlayerRegistrationIntentRecordsByStatus(true);
        }

        vm.preparePlayerRegistrationIntentRecordsByStatus = function (newSearch) {
            vm.queryData.attemptNo = vm.attemptNo ? vm.attemptNo : 0;
            vm.queryData.status = Array.isArray(vm.status) ? vm.status : [vm.status];
            vm.playerRegistrationRecords.loading = true;

            vm.queryData.size = newSearch ? 10 : (vm.playerRegistrationRecords.limit || 10);
            vm.queryData.index = newSearch ? 0 : (vm.playerRegistrationRecords.index || 0);
            vm.queryData.sortCol = vm.playerRegistrationRecords.sortCol;
            vm.queryData.unlockSizeLimit = true;
            socketService.$socket($scope.AppSocket, 'getPlayerRegistrationIntentRecordByStatus', vm.queryData, function (data) {
                vm.newPlayerListRecords = data.data;

                vm.playerRegistrationRecords.loading = false;
                console.log('player registration intent record', data);

                let arr = [];

                var tableData = vm.newPlayerListRecords.map(
                    records => {
                        //records.data.map(record => {
                        records.createTime = records.createTime ? vm.dateReformat(records.createTime) : "";
                        if (records.status) {
                            if (records.status == vm.constProposalStatus.SUCCESS) {
                                records.statusName = records.status ? $translate("SUCCESS") + " （" + records.$playerCurrentCount + "/" + records.$playerAllCount + ")" : "";
                            }
                            else if (records.status == vm.constProposalStatus.MANUAL) {
                                records.statusName = records.status ? $translate("MANUAL") + " （" + records.$playerCurrentCount + "/" + records.$playerAllCount + ")" : "";
                            } else {
                                records.statusName = records.status ? $translate("Attempt") + " （" + records.$playerCurrentCount + "/" + records.$playerAllCount + ")" : "";
                            }
                        }
                        records.playerId = records.data.playerId ? records.data.playerId : "";
                        records.name = records.data.name ? records.data.name : "";
                        records.realName = records.data.realName ? records.data.realName : "";
                        records.combinedArea = (records.data.phoneProvince && records.data.phoneCity) ? records.data.phoneProvince + " " + records.data.phoneCity : "";
                        records.topUpTimes = records.data.topUpTimes ? records.data.topUpTimes : 0;
                        records.smsCode = records.data.smsCode ? records.data.smsCode : "";
                        records.remarks = records.data.remarks ? records.data.remarks : "";
                        records.device = (records.inputDevice != "undefined" && records.inputDevice != "null") ? $translate($scope.constPlayerRegistrationInterface[records.inputDevice]) : "";
                        records.promoteWay = records.data.promoteWay ? records.data.promoteWay : "";
                        records.csOfficer = records.data.csOfficer ? records.data.csOfficer : "";
                        records.registrationTime = records.data.registrationTime ? vm.dateReformat(records.data.registrationTime) : "";
                        records.proposalId = records.proposalId ? records.proposalId : "";
                        records.ipAreaName = records.data.ipArea ? vm.getIpAreaName(records.data.ipArea) : '';
                        records.domain = (records.data && records.data.domain) ? records.data.domain : "";
                        //arr.push(record);
                        // })
                        //return arr;
                        return records ? records : "";
                    }
                );

                vm.playerRegistrationRecords.totalCount = tableData.length;
                var limit = tableData.length < vm.queryData.index + vm.queryData.size ? tableData.length : vm.queryData.index + vm.queryData.size

                vm.sortProposalRegistrationIntentRecord = function (data, sortCol) {
                    var keyName = Object.keys(sortCol)[0];
                    var sorting = sortCol[keyName];
                    var result = data.sort(function (a, b) {
                        if (a[keyName] < b[keyName])
                            return -1 * sorting;
                        if (a[keyName] > b[keyName])
                            return 1 * sorting;
                        return 0;
                    });

                    return result;
                }

                if (vm.queryData.sortCol) {
                    //tableData = tableData[0].sort(vm.queryData.sortCol).slice(vm.queryData.index,limit);
                    //tableData[0] = JSON.parse(JSON.stringify(tableData[0]));
                    tableData = vm.sortProposalRegistrationIntentRecord(tableData, vm.queryData.sortCol).slice(vm.queryData.index, limit);
                } else {
                    // tableData = tableData[0].sort(function(a,b) {if ( a.createTime < b.createTime )return 1;if ( a.createTime > b.createTime )return -1;return 0;})
                    //     .slice(vm.queryData.index,limit);
                    tableData = vm.sortProposalRegistrationIntentRecord(tableData, {createTime: -1}).slice(vm.queryData.index, limit);
                }

                var option = $.extend({}, vm.generalDataTableOptions, {
                    data: tableData,
                    aoColumnDefs: [
                        {'sortCol': 'proposalId', bSortable: true, 'aTargets': [0]},
                        {'sortCol': 'name', bSortable: true, 'aTargets': [1]},
                        {'sortCol': 'statusName', bSortable: true, 'aTargets': [2]},
                        {'sortCol': 'createTime', bSortable: true, 'aTargets': [3]},
                        {'sortCol': 'registrationTime', bSortable: true, 'aTargets': [4]},
                        {'sortCol': 'ipAreaName', bSortable: true, 'aTargets': [5]},
                        {'sortCol': 'combinedArea', bSortable: true, 'aTargets': [6]},
                        {'sortCol': 'topUpTimes', bSortable: true, 'aTargets': [7]},
                        {'sortCol': 'smsCode', bSortable: true, 'aTargets': [8]},
                        {'sortCol': 'remarks', bSortable: true, 'aTargets': [9]},
                        {'sortCol': 'device', bSortable: true, 'aTargets': [10]},
                        {'sortCol': 'promoteWay', bSortable: true, 'aTargets': [12]},
                        {'sortCol': 'csOfficer', bSortable: true, 'aTargets': [13]},
                    ],
                    columns: [
                        //{title: $translate('PROPOSAL_ID'), data: "proposalId"},
                        {
                            title: $translate('proposalId'),
                            data: "proposalId",
                            render: function (data, type, row) {

                                var link = $('<a>', {
                                    'ng-click': 'vm.editNewplayerRemark=false;vm.showNewPlayerModal(' + JSON.stringify(row) + ',2)'
                                }).text(data);
                                return link.prop('outerHTML');
                            }
                        },
                        {title: $translate('PLAYERNAME'), data: "name"},
                        {title: $translate('STATUS'), data: "statusName"},
                        //{title: $translate('PLAYERID'), data: "playerId"},
                        {title: $translate('SENT TIME'), data: "createTime"},
                        {title: $translate('REGISTERED_TIME'), data: "registrationTime"},
                        {title: $translate('REGISTERED_IP'), data: "ipAreaName"},
                        {title: $translate('PHONE_LOCATION'), data: "combinedArea"},
                        {title: $translate('DEPOSIT_COUNT'), data: "topUpTimes"},
                        {title: $translate('VERIFICATION_CODE'), data: "smsCode"},
                        {title: $translate('REMARKS'), data: "remarks"},
                        {title: $translate('DEVICE'), data: "device"},
                        {
                            title: $translate('Function'),
                            data: "data.phoneNumber",
                            advSearch: true,
                            "sClass": "",
                            render: function (data, type, row) {
                                data = data || '';
                                var playerObjId = row.data._id ? row.data._id : "";
                                let displayTXT = '';
                                let action = '';
                                var link = $('<div>', {});

                                if (row.data.phoneNumber && row.data.phoneNumber != "") {
                                    link.append($('<div>', {
                                        'class': 'fa fa-volume-control-phone',
                                        'ng-click': 'vm.callNewPlayerBtn(' + '"' + row.data.phoneNumber + '",' + JSON.stringify(row) + ');',
                                        'title': $translate("PHONE")
                                    }));
                                    link.append($('<div>', {
                                        'class': 'fa fa-comment',
                                        'style': 'padding-left:15px',
                                        'ng-click': 'vm.smsNewPlayerBtn(' + '"' + row.data.phoneNumber + '",' + JSON.stringify(row) + ');vm.initSMSModal();',
                                        'title': $translate("SMS")
                                    }));
                                }

                                if (row.status != vm.constProposalStatus.SUCCESS && row.status != vm.constProposalStatus.MANUAL) {
                                    displayTXT = $translate('CREATE_NEW_PLAYER');
                                    action = 'vm.createPlayerHelper(' + JSON.stringify(row) + ')';
                                    link.append($('<div>', {
                                        'class': 'fa fa-user-plus',
                                        'style': 'padding-left:15px',
                                        'ng-click': action,
                                        'title': $translate(displayTXT)
                                    }));

                                } else {
                                    displayTXT = $translate('FEEDBACK');
                                    action = 'vm.initNewPlayerFeedbackModal(' + JSON.stringify(row) + ')';
                                    $('#modalAddPlayerFeedback').css('z-Index', 1051);
                                    link.append($('<div>', {
                                        'class': 'fa fa-commenting',
                                        'style': 'padding-left:15px',
                                        'data-row': JSON.stringify(row),
                                        'data-toggle': 'modal',
                                        'data-target': '#modalAddPlayerFeedback',
                                        'ng-click': action,
                                        'title': $translate(displayTXT)
                                    }));
                                }

                                return link.prop('outerHTML')
                            }
                        },
                        {title: $translate('PROMOTE_WAY'), data: "promoteWay"},
                        {title: $translate('CUSTOMER_SERVICE'), data: "csOfficer"},
                    ],
                    bSortClasses: false,
                    destroy: true,
                    paging: false,
                    autoWidth: true,
                    initComplete: function (data, type, row) {
                        $scope.safeApply();
                    },
                    createdRow: function (row, data, dataIndex) {
                        $compile(angular.element(row).contents())($scope);

                    },
                    fnRowCallback: vm.playerListTableRow
                });
                var a = utilService.createDatatableWithFooter('#playerRegistrationIntentRecordsTable', option, {});

                vm.playerRegistrationRecords.pageObj.init({maxCount: vm.playerRegistrationRecords.totalCount}, newSearch);
                $('#playerRegistrationIntentRecordsTable').off('order.dt');
                $('#playerRegistrationIntentRecordsTable').on('order.dt', function (event, a, b) {
                    vm.commonSortChangeHandler(a, 'playerRegistrationRecords', vm.preparePlayerRegistrationIntentRecordsByStatus);
                });
                setTimeout(function () {
                    $('#playerRegistrationIntentRecordsTable').resize();
                }, 300);

            });
        };
        // get attempt number list -- end


        vm.prepareRepairTransfer = function () {
            vm.showPlatformRepair = !vm.showPlatformRepair;
            if (vm.showPlatformRepair && !vm.creditChange) {
                vm.creditChange = {
                    finalValidAmount: $translate("Unknown"),
                    finalLockedAmount: $translate("Unknown"),
                    number: 0,
                    remark: ''
                };
            }
        }

        vm.submitRepairTransfer = function () {
            let startTime = vm.platformCreditTransferLog.startTime.data('datetimepicker').getLocalDate();
            let endTime = vm.platformCreditTransferLog.endTime.data('datetimepicker').getLocalDate();

            socketService.$socket($scope.AppSocket, 'getPlayerTransferErrorLogs', {
                    playerObjId: vm.selectedThisPlayer._id,
                    transferObjId: vm.linkedPlayerTransferId
                }
                , function (pData) {
                    let playerTransfer = {};
                    pData.data.forEach(function (playerTransLog) {
                        if (playerTransLog._id == vm.linkedPlayerTransferId) {
                            playerTransfer = playerTransLog
                        }
                    });

                    let updateAmount = playerTransfer.amount - playerTransfer.lockedAmount;

                    let sendData = {
                        platformId: vm.selectedPlatform.id,
                        creator: {type: "admin", name: authService.adminName, id: authService.adminId},
                        data: {
                            playerObjId: playerTransfer.playerObjId,
                            playerName: playerTransfer.playerName,
                            updateAmount: updateAmount < 0 ? 0 : updateAmount,
                            curAmount: vm.selectedThisPlayer.validCredit,
                            realName: vm.selectedThisPlayer.realName,
                            remark: vm.creditChange.remark,
                            adminName: authService.adminName
                        }
                    };

                    if (vm.linkedPlayerTransferId) {
                        sendData.data.transferId = playerTransfer.transferId;
                        //if reward task is still there fix locked amount otherwise fix valid amount
                        if (vm.isOneSelectedPlayer() && vm.isOneSelectedPlayer().rewardInfo && vm.isOneSelectedPlayer().rewardInfo.length > 0) {
                            sendData.data.updateLockedAmount = playerTransfer.lockedAmount < 0 ? 0 : playerTransfer.lockedAmount;
                            sendData.data.curLockedAmount = vm.isOneSelectedPlayer().lockedCredit;
                        }
                        else {
                            sendData.data.updateAmount += playerTransfer.lockedAmount < 0 ? 0 : playerTransfer.lockedAmount;
                        }
                        vm.creditChange.socketStr = "createFixPlayerCreditTransferProposal";
                    }

                    console.log('repairTransaction', sendData);
                    socketService.$socket($scope.AppSocket, vm.creditChange.socketStr, sendData, function (data) {
                        var newData = data.data;
                        console.log('credit proposal', newData);
                        if (data.data && data.data.stepInfo) {
                            socketService.showProposalStepInfo(data.data.stepInfo, $translate);
                        }
                        vm.getPlatformPlayersData();
                        $scope.safeApply();
                    });
                });
        };

        vm.triggerAutoProposal = function () {
            socketService.$socket($scope.AppSocket, 'triggerAutoProposal', {platformObjId: vm.selectedPlatform.id}, function (playerCount) {
                console.log('playerCount', playerCount);
            });
        };

        vm.triggerSavePlayersCredit = function () {
            socketService.$socket($scope.AppSocket, 'triggerSavePlayersCredit', {platformObjId: vm.selectedPlatform.id}, function () {
                console.log('triggerSavePlayersCredit: Done');
            });
        };

        vm.prepareShowProviderExpense = function () {
            $('#modalProviderExpenses').modal().show();
            vm.expenseQuery = {};
            utilService.actionAfterLoaded('#modalProviderExpenses.in #providerExpenseQuery', function () {
                vm.expenseQuery.startTime = utilService.createDatePicker('#providerExpenseQuery .startTime');
                vm.expenseQuery.endTime = utilService.createDatePicker('#providerExpenseQuery .endTime');
                vm.expenseQuery.startTime.data('datetimepicker').setDate(utilService.setLocalDayStartTime(utilService.setNDaysAgo(new Date(), 1)));
                vm.expenseQuery.endTime.data('datetimepicker').setDate(utilService.setLocalDayEndTime(new Date()));
                vm.getProviderListByPlatform();
                utilService.actionAfterLoaded('#modalProviderExpenses.in #providerExpenseTablePage', function () {
                    vm.expenseQuery.pageObj = utilService.createPageForPagingTable("#providerExpenseTablePage", {}, $translate, function (curP, pageSize) {
                        vm.commonPageChangeHandler(curP, pageSize, "expenseQuery", vm.getProviderExpense)
                    });
                    // vm.getProviderExpense(true);
                });
            });
        }

        vm.getProviderListByPlatform = function(platformObjIdList) {
            let query = {};

            if(platformObjIdList && platformObjIdList.length){
                query.platformObjIdList = platformObjIdList;
            }

            vm.providerListByPlatform = [];
            socketService.$socket($scope.AppSocket, 'getProviderListByPlatform', query, function (providerList) {
                $scope.$evalAsync(() => {
                    console.log("Provider list ",providerList);
                    if(providerList && providerList.data){
                        vm.providerListByPlatform = providerList.data;
                    }
                });
            });
        };

        vm.getProviderExpense = function (newSearch) {
            let platformIdList;
            if(vm.consumptionRecordPlatformList && vm.consumptionRecordPlatformList.length){
                platformIdList = vm.consumptionRecordPlatformList;
            }else{
                platformIdList = vm.allPlatformData.map(a => a._id);
            }

            var queryData = {
                startTime: vm.expenseQuery.startTime.data('datetimepicker').getLocalDate(),
                endTime: vm.expenseQuery.endTime.data('datetimepicker').getLocalDate(),
                platformId: platformIdList,
                providerObjId: vm.selectedProviderID,
                playerName: vm.playerName || null,
                index: newSearch ? 0 : vm.expenseQuery.index,
                limit: newSearch ? 10 : vm.expenseQuery.limit,
                sortCol: newSearch ? null : vm.expenseQuery.sortCol,
            }

            if (vm.roundNoOrPlayNo) {
                queryData.roundNoOrPlayNo = vm.roundNoOrPlayNo;
            }
            if (vm.cpGameType) {
                queryData.cpGameType = vm.cpGameType;
            }
            vm.providerExpenseTableLoading = true;
            $scope.safeApply();
            socketService.$socket($scope.AppSocket, 'getConsumptionRecordByGameProvider', queryData, function (data) {
                vm.providerExpenseTableLoading = false;
                var tableData = data.data.data ? data.data.data.map(item => {
                    item.createTime$ = vm.dateReformat(item.createTime);
                    item.insertTime$ = vm.dateReformat(item.insertTime);
                    item.updateTime$ = vm.dateReformat(item.updateTime);
                    item.validAmount$ = item.validAmount.toFixed(2);
                    item.amount$ = item.amount.toFixed(2);
                    item.bonusAmount$ = item.bonusAmount.toFixed(2);
                    item.commissionAmount$ = item.commissionAmount.toFixed(2);
                    item.canConsumptionReturn$ = Boolean(!item.bDirty) ? $translate('ABLE') : $translate('UNABLE');
                    item.roundResult$ = item.result || "";
                    item.roundId$ = item.roundNo || "";
                    item.matchId$ = item.playNo || "";
                    item.gameType$ = item.cpGameType || item.gameId.name || "";
                    item.betType$ = item.betType || "";
                    item.remark$ = item.playDetail || "";
                    item.platform$ = item.platformId && item.platformId.name ? item.platformId.name : "";

                    return item;
                }) : [];
                vm.expenseQuery.totalCount = data.data.count || 0;
                var summary = data.data.summary || {};
                var tableOptions = {
                    data: tableData,
                    "order": vm.expenseQuery.aaSorting || [[8, 'desc']],
                };

                vm.commonProviderGameTableOptions = {
                    columnDefs: [
                        {'sortCol': 'platform$', bSortable: true, 'aTargets': [0]},
                        {'sortCol': 'orderNo', bSortable: true, 'aTargets': [1]},
                        {'sortCol': 'createTime', bSortable: true, 'aTargets': [8]},
                        {'sortCol': 'providerId', bSortable: true, 'aTargets': [2]},
                        {'sortCol': 'gameId', bSortable: true, 'aTargets': [6]},
                        {'sortCol': 'validAmount', bSortable: true, 'aTargets': [9]},
                        {'sortCol': 'amount', bSortable: true, 'aTargets': [11]},
                        {'sortCol': 'bonusAmount', bSortable: true, 'aTargets': [10]},
                        {targets: '_all', defaultContent: ' ', bSortable: false}
                    ],
                    columns: [
                        {title: $translate('PRODUCT_NAME'), data: 'platform$'},
                        {title: $translate('orderId'), data: "orderNo"},
                        {title: $translate('PLAYERID'), data: "playerId.name"},
                        {title: $translate('providerId'), data: "providerId.name"},
                        {title: $translate('ROUND_RESULT'), data: "roundResult$"},
                        {title: $translate('ROUND_ID'), data: "roundId$"},
                        {title: $translate('MATCH_ID'), data: "matchId$"},
                        {title: $translate('GAME_TYPE'), data: "gameType$"},
                        {title: $translate('BET_TYPE'), data: "betType$", sClass: 'sumText'},
                        {
                            title: $translate('BET_TIME'),
                            data: "createTime$",
                            render: function (data, type, row) {
                                let insertTime$ = row && row.insertTime$ || "";
                                let updateTime$ = row && row.updateTime$ || "";
                                return "<span title='" + $translate("INSERT_TIME") + ": " + insertTime$ + "&#013;" +  $translate("UPDATE_TIME") + ": " + updateTime$ + "'>" + data + "</span>";
                            }
                        },
                        {title: $translate('VALID_AMOUNT'), data: "validAmount$", sClass: 'sumFloat textRight'},
                        {title: $translate('bonusAmount'), data: "bonusAmount$", sClass: 'sumFloat textRight'},
                        {title: $translate('Total Amount'), data: "amount$", sClass: 'sumFloat textRight'},
                        {title: $translate('REMARK'), data: "remark$"},
                        {title: $translate('COUNT'), data: "count"},
                        //{title: $translate('CONSUMPTION_RETURN_ABILITY'), data: "canConsumptionReturn$"},
                    ],
                    "paging": false,
                    "language": {
                        "info": "Total _MAX_ records",
                        "emptyTable": $translate("No data available in table"),
                    }
                };

                vm.providerExpenseDataTableOptions = {
                    "paging": true,
                    dom: 'tpl',
                    "aaSorting": [],
                    destroy: true,
                    "scrollX": true,
                    sScrollY: 350,
                    scrollCollapse: true,
                    lengthMenu: [
                        [10, 25, 50, -1],
                        ['10', '25', '50', $translate('Show All')]
                    ],
                    "language": {
                        "info": "",
                        "paginate": {
                            "previous": $translate("PREVIOUS_PAGE"),
                            "next": $translate("NEXT_PAGE"),
                        },
                        "emptyTable": "",
                        "lengthMenu": $translate("lengthMenuText"),
                        sZeroRecords: ""
                    }
                };

                tableOptions = $.extend(true, {}, vm.providerExpenseDataTableOptions, vm.commonProviderGameTableOptions, tableOptions);
                vm.expenseQuery.pageObj.init({maxCount: vm.expenseQuery.totalCount}, newSearch);
                utilService.createDatatableWithFooter('#providerExpenseTable', tableOptions, {
                    10: summary.validAmount,
                    11: summary.bonusAmount,
                    12: summary.amount,
                    // 8: summary.commissionAmountAll
                });
                $('#providerExpenseTable').off('order.dt');
                $('#providerExpenseTable').on('order.dt', function (event, a, b) {
                    vm.commonSortChangeHandler(a, 'expenseQuery', vm.getProviderExpense);
                });
                $('#providerExpenseTable').resize();
                $scope.safeApply();
            });
        };

        vm.updateNewPlayerRemark = function (pId, remarks) {
            let updateData = {
                'pId': pId,
                'adminId': authService.adminId,
                'remarks': remarks
            }
            socketService.$socket($scope.AppSocket, 'updatePlayerIntentionRemarks', updateData, function (playerCount) {
                console.log("updatePlayerIntentionRemarks", updateData);
                vm.newPlayerProposal.remarks = remarks;
                vm.editNewplayerRemark = false;
                vm.getNewPlayerListByFilter(true);
                $scope.safeApply();
            });


        }

        vm.updateNewPlayerProposalRemark = function (pId, remarks) {
            let sendData = {
                'proposalObjId': pId,
                'remarks': remarks
            }
            socketService.$socket($scope.AppSocket, 'updatePlayerProposalRemarks', sendData, function (data) {
                $scope.$evalAsync(()=>{
                    vm.newPlayerProposal.remarks = remarks;
                    vm.editNewplayerRemark = false;
                    //update the new player obj without run query again . to avoid heavy loading ...
                    vm.newPlayerListRecords = vm.newPlayerListRecords.map(item=>{
                        if(item._id && item._id == pId){
                            if(data && data.data && data.data.data){
                                item.remarks =  data.data.data.remarks;
                            }
                        }
                        return item
                    })
                    vm.drawNewPlayerTable(vm.newPlayerListRecords, false);
                })
            });
        }
        /////////////////////////////////Mark::Platform players functions//////////////////


        //get all platform players data from server
        vm.getPlatformPlayersData = function (newSearch, initPage) {
            vm.getTotalPlayerCountByPlatformList();
            vm.advancedQueryObj = vm.advancedQueryObj || {};
            vm.drawPlayerTable([]);

            if (!initPage) {
                vm.advancedPlayerQuery(newSearch);
            }

        };

        vm.getTotalPlayerCountByPlatformList = function(){
            let platformIdList;
            if(vm.playerAdvanceSearchQuery && vm.playerAdvanceSearchQuery.platformList && vm.playerAdvanceSearchQuery.platformList.length){
                platformIdList = vm.playerAdvanceSearchQuery.platformList;
            }else{
                platformIdList = vm.allPlatformData.map(a => a._id);
            }

            socketService.$socket($scope.AppSocket, 'getPlayersCountByPlatform', {platform: platformIdList}, function (playerCount) {
                $scope.$evalAsync(() => {
                    vm.platformPlayerCount = playerCount.data;
                    console.log('playerCount', playerCount);
                });
            });
        };

        vm.advancedPlayerQuery = function (newSearch) {
            console.trace('vm.advancedPlayerQuery', newSearch);
            if (vm.advancedQueryObj.credibilityRemarks && (vm.advancedQueryObj.credibilityRemarks.constructor !== Array || vm.advancedQueryObj.credibilityRemarks.length === 0)) {
                delete vm.advancedQueryObj.credibilityRemarks;
            }
            let platformIdList;
            if(vm.playerAdvanceSearchQuery && vm.playerAdvanceSearchQuery.platformList && vm.playerAdvanceSearchQuery.platformList.length){
                platformIdList = vm.playerAdvanceSearchQuery.platformList;
            }else{
                platformIdList = vm.allPlatformData.map(a => a._id);
            }

            var apiQuery = {
                platformId: platformIdList,
                query: vm.advancedQueryObj,
                index: newSearch ? 0 : (vm.playerTableQuery.index || 0),
                limit: vm.playerTableQuery.limit,
                sortCol: vm.playerTableQuery.sortCol
            };
            $("#playerTable-search-filter .form-control").prop("disabled", false).css("background-color", "#fff");
            $("#playerTable-search-filter .form-control input").prop("disabled", false).css("background-color", "#fff");
            $("select#selectCredibilityRemark").multipleSelect("enable");
            console.log(apiQuery);
            $('#loadingPlayerTableSpin').show();
            socketService.$socket($scope.AppSocket, 'getPagePlayerByAdvanceQuery', apiQuery, function (reply) {
                setPlayerTableData(reply.data.data);
                vm.searchPlayerCount = reply.data.size;
                console.log("getPlayersByAdvanceQueryDebounced response", reply);
                utilService.hideAllPopoversExcept();
                vm.playerTableQuery.pageObj.init({maxCount: vm.searchPlayerCount}, newSearch);
                $('#loadingPlayerTableSpin').hide();
                if (vm.selectedSinglePlayer) {
                    var found = false;
                    vm.playerTable.rows(function (idx, rowData, node) {
                        if (rowData._id == vm.selectedSinglePlayer._id) {
                            vm.playerTableRowClicked(rowData);
                            vm.selectedPlayersCount = 1;
                            $(node).addClass('selected');
                            found = true;
                        }
                    })
                    if (!found) {
                        vm.selectedSinglePlayer = null;
                        vm.selectedPlayersCount = 0;
                    }
                    if (vm.selectedSinglePlayer && vm.selectedSinglePlayer.referral) {
                        socketService.$socket($scope.AppSocket, 'getPlayerInfo', {_id: vm.selectedSinglePlayer.referral}, function (data) {
                            vm.showReferralName = data.data.name;
                            // $scope.safeApply();
                        });
                    }
                }
            });
        };

        vm.searchForExactPlayerDebounced = $scope.debounceSearch(function (playerExactSearchText) {
            //console.log("playerExactSearchText", playerExactSearchText);
            if (playerExactSearchText === "") {
                vm.getPlatformPlayersData(true);
                return;
            }
            var apiQuery = {
                platform: vm.selectedPlatform.id,
                name: playerExactSearchText
            };
            socketService.$socket($scope.AppSocket, 'getPlayerInfo', apiQuery, function (reply) {
                var toDisplay = [];
                if (reply.data) {
                    toDisplay.push(reply.data);
                    vm.searchPlayerCount = 1;
                    vm.playerTableQuery.pageObj.init({maxCount: 1}, true);
                } else {
                    vm.searchPlayerCount = 0;
                    vm.playerTableQuery.pageObj.init({maxCount: 0}, true);
                }
                $scope.safeApply();
                setPlayerTableData(toDisplay);
            });
        });

        var setPlayerTableData = function (data) {
            vm.getTotalPlayerCountByPlatformList();
            return setTableData(vm.playerTable, data);
        };

        // Clears the table data and shows the provided data instead, without re-creating the table object itself.
        var setTableData = function (table, data) {
            if (table) {
                table.clear();
            }
            if (data) {
                data.forEach(function (rowData) {
                    if (rowData) {
                        if (rowData.credits) {
                            rowData.credits = rowData.credits.toFixed(2);
                        }
                        if (rowData.totalChildrenDeposit) {
                            rowData.totalChildrenDeposit = rowData.totalChildrenDeposit.toFixed(2);
                        }
                        if (rowData.totalChildrenBalance) {
                            rowData.totalChildrenBalance = rowData.totalChildrenBalance.toFixed(2);
                        }
                        if (rowData.totalSettledCommission) {
                            rowData.totalSettledCommission = rowData.totalSettledCommission.toFixed(2);
                        }
                        if (rowData.registrationTime) {
                            rowData.registrationTime = utilService.getFormatTime(rowData.registrationTime);
                        }
                        if (rowData.lastAccessTime) {
                            rowData.lastAccessTime = utilService.getFormatTime(rowData.lastAccessTime)
                        }
                        if (rowData.platform){
                            let matchedPlatformData = vm.allPlatformData.filter(a => a._id.toString() == rowData.platform.toString());
                            if(matchedPlatformData && matchedPlatformData.length && matchedPlatformData[0].name){
                                rowData.platform$ = matchedPlatformData[0].name;
                            }
                        }

                        // remove decimal places, no rounding
                        // rowData.validCredit = Math.floor(rowData.validCredit);
                        // rowData.lockedCredit = Math.floor(rowData.lockedCredit);

                        if (table) {
                            table.row.add(rowData);
                        }
                    }
                });
            }
            if (table) {
                table.draw();
            }
        };

        // Multiply by this to convert hours to seconds
        var hours = 60 * 60;

        //draw player table based on data
        vm.drawPlayerTable = function (data) {
            vm.players = data;
            vm.selectedPlayers = {};
            vm.selectedPlayersCount = 0;
            // jQuery.fn.dataTableExt.oSort["Credit-desc"] = function (x, y) {
            //     var a = $(x).first().text();
            //     var b = $(y).first().text();
            //     // console.log('parsing', parseInt(a), parseInt(b));
            //     return parseInt(a) - parseInt(b);
            // };
            //
            // jQuery.fn.dataTableExt.oSort["Credit-asc"] = function (x, y) {
            //     return jQuery.fn.dataTableExt.oSort["Credit-desc"](y, x);
            // };
            var tableOptions = {
                data: data,
                columnDefs: [
                    {targets: '_all', defaultContent: ' '}
                ],
                "order": vm.playerTableQuery.aaSorting,
                columns: [
                    {
                        title: $translate('PRODUCT_NAME'),
                        data: 'platform$'
                    },
                    {
                        title: $translate('PLAYERNAME'), data: "name", advSearch: true, "sClass": "",
                        render: function (data, type, row) {
                            let perm = (row && row.permission) ? row.permission : {};
                            var link = $('<a>', {
                                'class': (perm.forbidPlayerFromLogin === true ? "text-danger" : "text-primary"),
                                'ng-click': 'vm.showPlayerInfoModal("' + data + '")'
                            }).text(data);
                            return link.prop('outerHTML');

                        }
                    },
                    {
                        title: $translate('REAL_NAME'),
                        data: 'realName',
                        sClass: "wordWrap realNameCell",
                        advSearch: true
                    },
                    {
                        title: $translate("PLAYER_VALUE"), data: "valueScore", orderable: false, "sClass": "alignRight",
                        render: function (data, type, row) {
                            let value = (Math.floor(data * 10) / 10).toFixed(1);
                            return value;
                        }
                    },
                    {
                        // this object is use for column show
                        // credibility remark advsearch column's object will appear later in the code
                        title: $translate("CREDIBILITY_REMARK"),
                        data: "credibilityRemarks$",
                        advSearch: false,
                        orderable: false,
                        sClass: "remarkCol",
                        render: (data, type, row) => {
                            let emptyOutput = "<a data-toggle=\"modal\" data-target='#modalPlayerCredibilityRemarks' ng-click='vm.getSelectedRowPlayerCredibility(" + JSON.stringify(row) + ");'> - </a>";
                            if (!data || data.length === 0) {
                                return emptyOutput;
                            }
                            let initOutput = "<a data-toggle=\"modal\" data-target='#modalPlayerCredibilityRemarks' ng-click='vm.getSelectedRowPlayerCredibility(" + JSON.stringify(row) + ");'>";
                            let output = initOutput;
                            let remarkMatches = false;

                            data.map(remarkName => {
                                if (output && output !== initOutput) {
                                    output += "<br>";
                                }

                                output += remarkName;
                                remarkMatches = true;

                                if (remarkName && remarkName === '黑名单IP') {
                                    output += " <span class='blacklistIpDot'><span class='playerBlacklistIpDetail'>";
                                    output += "<table class='playerCredibilityBlacklistIpDetailTable'><thead><tr>";
                                    output += "<th style='width:5%'>" + $translate('SEQUENCE_NO') + "</th>";
                                    output += "<th style='width:30%'>" + $translate('IP') + "</th>";
                                    output += "<th style='width:30%'>" + $translate('REMARK') + "</th>";
                                    output += "<th style='width:10%'>" + $translate('Operator_Name') + "</th>";
                                    output += "</tr></thead>";
                                    output += "<tbody>";
                                    if (row && row.blacklistIp && row.blacklistIp.length > 0) {
                                        let i = 1;
                                        row.blacklistIp.forEach(IP => {
                                            output += "<tr>";
                                            output += "<td>" + i + "</td>";
                                            output += "<td>" + IP.ip + "</td>";
                                            output += "<td>" + IP.remark + "</td>";
                                            output += "<td>" + IP.adminName + "</td>";
                                            output += "</tr>";
                                            i++;
                                        });
                                    }
                                    output += "</tbody>";
                                    output += "</table></span></span>";
                                }
                            })

                            // data.map(function (remarkId) {
                            //     let index = vm.allCredibilityRemarks.map(x => x._id).indexOf(remarkId);
                            //
                            //     if (index > -1) {
                            //         if (output && output !== initOutput) {
                            //             output += "<br>";
                            //         }
                            //         output += vm.allCredibilityRemarks[index].name;
                            //         remarkMatches = true;
                            //
                            //         if (vm.allCredibilityRemarks[index]._id === remarkId && vm.allCredibilityRemarks[index].name === '黑名单IP' && vm.allCredibilityRemarks[index].isFixed === true) {
                            //             output += " <span class='blacklistIpDot'><span class='playerBlacklistIpDetail'>";
                            //             output += "<table class='playerCredibilityBlacklistIpDetailTable'><thead><tr>";
                            //             output += "<th style='width:5%'>" + $translate('SEQUENCE_NO') + "</th>";
                            //             output += "<th style='width:30%'>" + $translate('IP') + "</th>";
                            //             output += "<th style='width:30%'>" + $translate('REMARK') + "</th>";
                            //             output += "<th style='width:10%'>" + $translate('Operator_Name') + "</th>";
                            //             output += "</tr></thead>";
                            //             output += "<tbody>";
                            //             if (row && row.blacklistIp && row.blacklistIp.length > 0) {
                            //                 let i = 1;
                            //                 row.blacklistIp.forEach(IP => {
                            //                     output += "<tr>";
                            //                     output += "<td>" + i + "</td>";
                            //                     output += "<td>" + IP.ip + "</td>";
                            //                     output += "<td>" + IP.remark + "</td>";
                            //                     output += "<td>" + IP.adminName + "</td>";
                            //                     output += "</tr>";
                            //                     i++;
                            //                 });
                            //             }
                            //             output += "</tbody>";
                            //             output += "</table></span></span>";
                            //         }
                            //     }
                            // });
                            output += "</a>";

                            if (remarkMatches) {
                                return output;
                            } else {
                                return emptyOutput;
                            }
                        }
                    },
                    {
                        title: $translate('LEVEL'), "data": 'playerLevel',
                        render: function (data, type, row) {
                            // todo :: #22
                            data = data || '';
                            if ($scope.checkViewPermission('Player', 'Player', 'Edit')) {
                                return $("<a style='z-index: auto' data-toggle='modal' data-container= 'body' " +
                                    "data-placement='bottom' data-trigger='focus' type='button' data-html='true' href='#' " +
                                    "ng-click='vm.onClickPlayerCheck(\"" + row._id + "\", vm.openEditPlayerDialog, \"basicInfo\", " + JSON.stringify(row) + ")'></a>")
                                    .attr("data-row", JSON.stringify(row))
                                    .text($translate(data.name))
                                    .prop("outerHTML");
                            } else {
                                return $('<span style="z-index: auto" data-toggle="modal" data-container="body" ' +
                                    'data-placement="bottom" data-trigger="focus" type="button" data-html="true" href="#" ></span>')
                                    .attr('data-row', JSON.stringify(row))
                                    .text($translate(data.name))
                                    .prop('outerHTML');
                            }
                        },
                        // advSearch: true,
                        filterConfig: {
                            type: "dropdown",
                            options: vm.allPlayerLvl.map(function (level) {
                                return {
                                    value: level._id,
                                    text: $translate(level.name)
                                };
                            })
                        },
                        "sClass": "alignLeft"
                    },
                    {
                        title: $translate('CREDIT'),
                        data: 'validCredit',
                        sType: 'Credit',
                        orderable: true,
                        bSortable: true,
                        render: function (data, type, row) {
                            // todo :: #13
                            if (type == 'sort') return row.validCredit;
                            data = data || 0;
                            var link = $('<div>', {
                                'data-order': row.validCredit,
                            })
                            link.append($('<i class="fa fa-usd"></i>'));
                            if (row.rewardGroupInfo && row.rewardGroupInfo.length > 0) {
                                link.append(
                                    $('<a>', {
                                        'class': 'rewardTaskPopover',
                                        'ng-click': 'vm.rewardTaskPlayerName = "' + row.name + '";', // @todo: escaping issue
                                        'data-row': JSON.stringify(row),
                                        'href': '',
                                        'data-toggle': 'popover',
                                        'data-trigger': 'focus',
                                        'data-placement': 'bottom',
                                        'data-container': 'body'
                                    }).text($noRoundTwoDecimalPlaces(row.validCredit))
                                )
                            } else {
                                link.append(
                                    $('<text>', {
                                        'data-row': JSON.stringify(row)
                                    }).text($noRoundTwoDecimalPlaces(row.validCredit))
                                )
                            }
                            link.append($('<span>').html('&nbsp;&nbsp;&nbsp;'));
                            //if (data != 0) {
                            if (row.rewardInfo && row.rewardInfo.length > 0) {
                                link.append($('<i class="fa fa-lock"></i>'))
                                    .append(
                                        $('<a>', {
                                            'class': 'rewardTaskPopover',
                                            'ng-click': 'vm.rewardTaskPlayerName = "' + row.name + '";', // @todo: escaping issue
                                            'data-row': JSON.stringify(row),
                                            'href': '',
                                            'data-toggle': 'popover',
                                            'data-trigger': 'focus',
                                            'data-placement': 'bottom',
                                            'data-container': 'body'
                                        }).text($noRoundTwoDecimalPlaces(row.lockedCredit))
                                    )
                                    .append($('<span>').html('&nbsp;&nbsp;&nbsp;'));
                            }

                            // TODO:: Temporary measure to show reward group credit
                            if (row.rewardGroupInfo && row.rewardGroupInfo.length > 0) {
                                link.append($('<i class="fa fa-lock"></i>'))
                                    .append(
                                        $('<a>', {
                                            'class': 'rewardTaskPopover',
                                            'ng-click': 'vm.rewardTaskPlayerName = "' + row.name + '";', // @todo: escaping issue
                                            'data-row': JSON.stringify(row),
                                            'href': '',
                                            'data-toggle': 'popover',
                                            'data-trigger': 'focus',
                                            'data-placement': 'bottom',
                                            'data-container': 'body'
                                        }).text($noRoundTwoDecimalPlaces(row.lockedCredit))
                                    )
                                    .append($('<span>').html('&nbsp;&nbsp;&nbsp;'));
                            }

                            //}
                            link.append(
                                $('<a>', {
                                    'class': 'fa fa-gamepad',
                                    'ng-click': 'vm.showPlayerCreditinProvider(' + JSON.stringify(row) + ')', // @todo: escaping issue
                                    'data-row': JSON.stringify(row),
                                    'href': '',
                                    'data-toggle': 'popover',
                                    'data-trigger': 'manual',
                                    'data-placement': 'bottom',
                                    'data-container': 'body'
                                })
                            );
                            return link.prop('outerHTML');
                            //return '<a href="" ng-click="vm.rewardTaskPlayerName = \'' + row.name + '\'; vm.getRewardTask(\'' + row._id + '\')" data-toggle="modal" data-target="#modalRewardTask">' + data + '</a>';
                        },
                        "sClass": "alignLeft"
                    },
                    {
                        title: $translate('POINT'),
                        "orderable": false,
                        visible: vm.selectedPlatform.data.usePointSystem,
                        data: 'point$',
                        render: function (data, type, row) {
                            data = data || '0';
                            return $('<a data-target="#modalPlayerRewardPointsLog" style="z-index: auto" data-toggle="modal" data-container="body" ' +
                                'data-placement="bottom" data-trigger="focus" type="button" ng-click="vm.initPlayerRewardPointLog()" data-html="true" href="#"></a>')
                                .attr('data-row', JSON.stringify(row))
                                .text((data))
                                .prop('outerHTML');
                        },
                        "sClass": "alignRight",
                    },
                    {
                        title: $translate('REGISTRATION_TIME'),
                        data: 'registrationTime',
                        advSearch: true,
                        filterConfig: {
                            type: "datetimepicker",
                            id: "regDateTimePicker",
                            options: {
                                language: 'en',
                                format: 'dd/MM/yyyy hh:mm:ss',
                            }
                        },
                        "sClass": "alignLeft",
                        render: function (data, type, row) {
                            return utilService.getFormatTime(data);
                        }
                    },
                    {
                        title: $translate('LAST_ACCESS_TIME'),
                        data: 'lastAccessTime',
                        advSearch: true,
                        type: "datetimepicker",
                        filterConfig: {
                            type: "datetimepicker",
                            id: "lastAccessDateTimePicker",
                            options: {
                                language: 'en',
                                format: 'dd/MM/yyyy hh:mm:ss',
                            }
                        },
                        "sClass": "alignLeft",
                        render: function (data, type, row) {
                            return utilService.getFormatTime(data);
                        }
                    },
                    {
                        title: $translate('LOGIN_TIMES'), data: "loginTimes",
                        render: function (data, type, row) {
                            data = data || '0';
                            return $('<a data-target="#modalPlayerApiLog" style="z-index: auto" data-toggle="modal" data-container="body" ' +
                                'data-placement="bottom" data-trigger="focus" type="button" ng-click="vm.initPlayerApiLog()" data-html="true" href="#"></a>')
                                .attr('data-row', JSON.stringify(row))
                                .text((data))
                                .prop('outerHTML');
                        },
                        "sClass": "alignRight"

                    },
                    {
                        title: "<div>" + $translate('TOP_UP') + "</div><div>" + $translate('TIMES') + "</div>",
                        "data": 'topUpTimes',
                        "sClass": "alignRight",
                        // todo :: link to #13-4
                        // render: function (data, type, row) {
                        //     var link = $('<text>', {
                        //         'ng-click': "vm.showPlayerTopupModal(" + JSON.stringify(row) + ")",
                        //     }).text(data);
                        //     return link.prop('outerHTML');
                        // },
                    },
                    {
                        title: $translate('Function'), //data: 'phoneNumber',
                        orderable: false,
                        render: function (data, type, row) {
                            data = data || '';
                            var playerObjId = row._id ? row._id : "";
                            var link = $('<div>', {});
                            link.append($('<a>', {
                                'class': 'fa fa-envelope margin-right-5',
                                'ng-click': 'vm.initMessageModal(); vm.sendMessageToPlayerBtn(' + '"msg", ' + JSON.stringify(row) + ');',
                                'data-row': JSON.stringify(row),
                                'data-toggle': 'tooltip',
                                'title': $translate("SEND_MESSAGE_TO_PLAYER"),
                                'data-placement': 'left',   // because top and bottom got hidden behind the table edges
                            }));
                            link.append($('<a>', {
                                'class': 'fa fa-comment margin-right-5' + (row.permission.SMSFeedBack === false ? " text-danger" : ""),
                                'ng-click': 'vm.initSMSModal(' + JSON.stringify(row) + ');' + "vm.onClickPlayerCheck('" +
                                playerObjId + "', " + "vm.telorMessageToPlayerBtn" +
                                ", " + "[" + '"msg"' + ", " + JSON.stringify(row) + "]);",
                                'data-row': JSON.stringify(row),
                                'data-toggle': 'tooltip',
                                'title': $translate("Send SMS to Player"),
                                'data-placement': 'left',
                            }));
                            link.append($('<a>', {
                                'class': 'fa fa-volume-control-phone margin-right-5' + (row.permission.phoneCallFeedback === false ? " text-danger" : ""),
                                'ng-click': 'vm.telorMessageToPlayerBtn(' + '"tel", "' + playerObjId + '",' + JSON.stringify(row) + ');',
                                'data-row': JSON.stringify(row),
                                'data-toggle': 'tooltip',
                                'title': $translate("PHONE"),
                                'data-placement': 'left',
                            }));
                            if ($scope.checkViewPermission('Player', 'Feedback', 'AddFeedback')) {
                                link.append($('<a>', {
                                    'class': 'fa fa-commenting margin-right-5',
                                    'ng-click': 'vm.initFeedbackModal(' + JSON.stringify(row) + ');vm.getSelectedFeedBackDetails(' + JSON.stringify(row) + ')',
                                    'data-row': JSON.stringify(row),
                                    'data-toggle': 'modal',
                                    'data-target': '#modalAddPlayerFeedback',
                                    'title': $translate("ADD_FEEDBACK"),
                                    'data-placement': 'right',
                                }));
                            }
                            if (row.isRealPlayer) {
                                if ($scope.checkViewPermission('Player', 'TopUp', 'ApplyManualTopup')) {
                                    link.append($('<a>', {
                                        'class': 'fa fa-plus-circle',
                                        'ng-click': 'vm.showTopupTab(null);vm.onClickPlayerCheck("' + playerObjId + '", vm.initPlayerManualTopUp);vm.getSelectedRowTopUpGroupDetails(' + JSON.stringify(row) + ');',
                                        'data-row': JSON.stringify(row),
                                        'data-toggle': 'modal',
                                        'data-target': '#modalPlayerTopUp',
                                        'title': $translate("TOP_UP"),
                                        'data-placement': 'left',
                                        'style': 'color: #68C60C'
                                    }));
                                }
                                link.append($('<br>'));
                                if ($scope.checkViewPermission('Player', 'Bonus', 'applyBonus')) {
                                    link.append($('<img>', {
                                        'class': 'margin-right-5 margin-right-5',
                                        'src': (row.permission.applyBonus === false ? "images/icon/withdrawRed.png" : "images/icon/withdrawBlue.png"),
                                        'height': "14px",
                                        'width': "14px",
                                        'ng-click': 'vm.initPlayerBonus(' + JSON.stringify(row) + ');vm.getPlayerBankList();',
                                        'data-row': JSON.stringify(row),
                                        'data-toggle': 'modal',
                                        'data-target': '#modalPlayerBonus',
                                        'title': $translate("Bonus"),
                                        'data-placement': 'left',   // because top and bottom got hidden behind the table edges
                                    }));
                                }
                                if ($scope.checkViewPermission('Player', 'Reward', 'AddRewardTask')) {
                                    link.append($('<img>', {
                                        'class': 'margin-right-5 margin-right-5',
                                        'src': "images/icon/rewardBlue.png",
                                        'height': "14px",
                                        'width': "14px",
                                        'ng-click': 'vm.initRewardSettings(' + JSON.stringify(row) + ');vm.initPlayerAddRewardTask();',
                                        'data-row': JSON.stringify(row),
                                        'data-toggle': 'modal',
                                        'data-target': '#modalPlayerAddRewardTask',
                                        'title': $translate("REWARD_ACTION"),
                                        'data-placement': 'left',
                                    }));
                                }
                                if ($scope.checkViewPermission('Player', 'Player', 'RepairPayment') || $scope.checkViewPermission('Player', 'Player', 'RepairTransaction')) {
                                    link.append($('<img>', {
                                        'class': 'margin-right-5',
                                        'src': "images/icon/reapplyBlue.png",
                                        'height': "14px",
                                        'width': "14px",
                                        'ng-click': 'vm.showReapplyLostOrderTab(null);vm.prepareShowPlayerCredit();vm.prepareShowRepairPayment(\'#modalReapplyLostOrder\');',
                                        'data-row': JSON.stringify(row),
                                        'data-toggle': 'modal',
                                        'title': $translate("ALL_REAPPLY_ORDER"),
                                        'data-placement': 'right',
                                    }));
                                }
                                if ($scope.checkViewPermission('Player', 'Credit', 'CreditAdjustment')) {
                                    link.append($('<img>', {
                                        'class': 'margin-right-5',
                                        'src': "images/icon/creditAdjustBlue.png",
                                        'height': "14px",
                                        'width': "14px",
                                        'ng-click': 'vm.getSelectedRowPlatformDetails(' + JSON.stringify(row) + ');vm.onClickPlayerCheck("' + playerObjId + '", vm.prepareShowPlayerCreditAdjustment, \'adjust\')',
                                        'data-row': JSON.stringify(row),
                                        'data-toggle': 'modal',
                                        'data-target': '#modalPlayerCreditAdjustment',
                                        'title': $translate("CREDIT_ADJUSTMENT"),
                                        'data-placement': 'right',
                                    }));
                                }
                                if ($scope.checkViewPermission('Player', 'RewardPoints', 'RewardPointsChange') /*|| $scope.checkViewPermission('Player', 'RewardPoints', 'RewardPointsConvert')*/) {
                                    link.append($('<img>', {
                                        'class': 'margin-right-5',
                                        'src': (row.permission.rewardPointsTask === false ? "images/icon/rewardPointsRed.png" : "images/icon/rewardPointsBlue.png"),
                                        'height': "14px",
                                        'width': "14px",
                                        'ng-click': 'vm.getSelectedRowPlatformDetails(' + JSON.stringify(row) + ');vm.showRewardPointsAdjustmentTab(null);vm.onClickPlayerCheck("' + playerObjId + '", vm.prepareShowPlayerRewardPointsAdjustment);',
                                        'data-row': JSON.stringify(row),
                                        'data-toggle': 'modal',
                                        'data-target': '#modalPlayerRewardPointsAdjustment',
                                        'title': $translate("REWARD_POINTS_ADJUSTMENT"),
                                        'data-placement': 'right',
                                    }));
                                }
                            }
                            return link.prop('outerHTML');
                        },
                        "sClass": "alignLeft"
                    },
                    {
                        title: $translate('MAIN') + $translate('PERMISSION'), //data: 'phoneNumber',
                        orderable: false,
                        render: function (data, type, row) {
                            data = data || {permission: {}};

                            var link = $('<a>', {
                                'class': 'playerPermissionPopover',
                                'ng-click': 'vm.getSelectedRowPlatformDetails(' + JSON.stringify(row) + ');vm.permissionPlayer = ' + JSON.stringify(row)
                                + '; vm.permissionPlayer.permission.banReward = !vm.permissionPlayer.permission.banReward;'
                                + '; vm.permissionPlayer.permission.disableWechatPay = !vm.permissionPlayer.permission.disableWechatPay;'
                                + '; vm.permissionPlayer.permission.forbidPlayerConsumptionReturn = !vm.permissionPlayer.permission.forbidPlayerConsumptionReturn;'
                                + '; vm.permissionPlayer.permission.forbidPlayerConsumptionIncentive = !vm.permissionPlayer.permission.forbidPlayerConsumptionIncentive;'
                                + '; vm.permissionPlayer.permission.forbidPlayerFromLogin = !vm.permissionPlayer.permission.forbidPlayerFromLogin;'
                                + '; vm.permissionPlayer.permission.forbidPlayerFromEnteringGame = !vm.permissionPlayer.permission.forbidPlayerFromEnteringGame;',
                                'data-row': JSON.stringify(row),
                                'data-toggle': 'popover',
                                'data-trigger': 'focus',
                                'data-placement': 'left',
                                'data-container': 'body',
                            });

                            let perm = (row && row.permission) ? row.permission : {};

                            if (row.forbidRewardEvents && row.forbidRewardEvents.length && vm.allXimaID && vm.allXimaID.length) {
                                vm.allXimaID.forEach(id => {
                                    // if xima in secondary permission is forbidden, then forbid xima in main permission will be true
                                    if (row.forbidRewardEvents.includes(id)) {
                                        perm.forbidPlayerConsumptionReturn = true;
                                    }
                                })
                            }

                            if (row.isRealPlayer) {
                                link.append($('<img>', {
                                    'class': 'margin-right-5 ',
                                    'src': "images/icon/" + (perm.applyBonus === true ? "withdrawBlue.png" : "withdrawRed.png"),
                                    height: "14px",
                                    width: "14px",
                                }));
                                link.append($('<img>', {
                                    'class': 'margin-right-5 ',
                                    'src': "images/icon/" + (perm.allTopUp === false ? "allTopUpRed.png" : "allTopUpBlue.png"),
                                    height: "13px",
                                    width: "15px",
                                }));
                                link.append($('<img>', {
                                    'class': 'margin-right-5 ',
                                    'src': "images/icon/" + (perm.topupOnline === true ? "onlineTopUpBlue.png" : "onlineTopUpRed.png"),
                                    height: "13px",
                                    width: "15px",
                                }));
                                link.append($('<img>', {
                                    'class': 'margin-right-5 ',
                                    'src': "images/icon/" + (perm.topupManual === true ? "manualTopUpBlue.png" : "manualTopUpRed.png"),
                                    height: "14px",
                                    width: "14px",
                                }));

                                link.append($('<img>', {
                                    'class': 'margin-right-5',
                                    'src': "images/icon/" + (perm.alipayTransaction === true ? "aliPayBlue.png" : "aliPayRed.png"),
                                    height: "15px",
                                    width: "15px",
                                }));

                                link.append($('<i>', {
                                    'class': 'fa fa-comments margin-right-5 ' + (perm.disableWechatPay === true ? "text-danger" : "text-primary"),
                                }));

                                link.append($('<img>', {
                                    'class': 'margin-right-5 ',
                                    'src': "images/icon/" + (perm.topUpCard === false ? "cardTopUpRed.png" : "cardTopUpBlue.png"),
                                    height: "14px",
                                    width: "14px",
                                }));
                            }
                            link.append($('<i>', {
                                'class': 'fa margin-right-5 ' + (perm.forbidPlayerFromLogin === true ? "fa-sign-out text-danger" : "fa-sign-in  text-primary"),
                            }));

                            link.append($('<i>', {
                                'class': 'fa fa-gamepad margin-right-5 ' + (perm.forbidPlayerFromEnteringGame === true ? "text-danger" : "text-primary"),
                            }));

                            if (row.isRealPlayer) {
                                link.append($('<br>'));
                            }

                            link.append($('<i>', {
                                'class': 'fa fa-volume-control-phone margin-right-5 ' + (perm.phoneCallFeedback === false ? "text-danger" : "text-primary"),
                            }));

                            link.append($('<i>', {
                                'class': 'fa fa-comment margin-right-5 ' + (perm.SMSFeedBack === false ? "text-danger" : "text-primary"),
                            }));

                            // link.append($('<img>', {
                            //     'class': 'margin-right-5 ',
                            //     'src': "images/icon/" + (perm.PlayerLimitedOfferReward === false ? "limitedRewardRed.png" : "limitedRewardBlue.png"),
                            //     height: "14px",
                            //     width: "14px",
                            // }));
                            if (row.isRealPlayer) {
                                link.append($('<i>', {
                                    'class': 'fa fa-gift margin-right-5 ' + (perm.banReward === false ? "text-primary" : "text-danger"),
                                }));

                                link.append($('<i>', {
                                    'class': 'fa fa-repeat margin-right-5 ' + (perm.forbidPlayerConsumptionReturn === true ? "text-danger" : "text-primary"),
                                }));

                                link.append($('<img>', {
                                    'class': 'margin-right-5 ',
                                    'src': "images/icon/" + (perm.allowPromoCode === false ? "promoCodeRed.png" : "promoCodeBlue.png"),
                                    height: "14px",
                                    width: "14px",
                                }));

                                link.append($('<img>', {
                                    'class': 'margin-right-5 ',
                                    'src': "images/icon/" + (perm.rewardPointsTask === false ? "rewardPointsRed.png" : "rewardPointsBlue.png"),
                                    height: "14px",
                                    width: "14px",
                                }));

                                link.append($('<img>', {
                                    'class': 'margin-right-5 ',
                                    'src': "images/icon/" + (perm.levelChange === false ? "levelRed.png" : "levelBlue.png"),
                                    height: "14px",
                                    width: "14px",
                                }));
                            }

                            return link.prop('outerHTML') + "&nbsp;";
                        },
                        "sClass": "alignLeft"
                    },
                    {
                        title: $translate('SECONDARY') + $translate('PERMISSION'),
                        orderable: false,
                        render: function (data, type, row) {
                            // data = data || {permission: {}};

                            var link = $('<div>', {});
                            var playerObjId = row._id ? row._id : "";

                            if (row.isRealPlayer) {
                                let forbidFixedRewardsCount = 0;
                                // if (row.forbidPromoCode) {
                                //     forbidFixedRewardsCount++;
                                // }
                                if (row.forbidLevelUpReward) {
                                    forbidFixedRewardsCount++;
                                }
                                if (row.forbidLevelMaintainReward) {
                                    forbidFixedRewardsCount++;
                                }

                                link.append($('<a>', {
                                    'class': 'forbidRewardEventPopover fa fa-gift margin-right-5' + (row.forbidRewardEvents && (row.forbidRewardEvents.length + forbidFixedRewardsCount) > 0 ? " text-danger" : ""),
                                    'data-row': JSON.stringify(row),
                                    'data-toggle': 'popover',
                                    // 'title': $translate("PHONE"),
                                    'data-placement': 'left',
                                    'data-trigger': 'focus',
                                    'type': 'button',
                                    'data-html': true,
                                    'href': '#',
                                    'style': "z-index: auto; min-width:23px",
                                    'data-container': "body",
                                    'html': (row.forbidRewardEvents && (row.forbidRewardEvents.length + forbidFixedRewardsCount) > 0 ? '<sup>' + (row.forbidRewardEvents.length + forbidFixedRewardsCount) + '</sup>' : ''),
                                }));

                                link.append($('<a>', {
                                    'class': 'forbidPromoCodePopover margin-right-5' + (row.forbidPromoCodeList && row.forbidPromoCodeList.length > 0 ? " text-danger" : ""),
                                    'data-row': JSON.stringify(row),
                                    'data-toggle': 'popover',
                                    'ng-click': 'vm.getPromoCodeByPlatform(' + JSON.stringify(row.platform) + ');',
                                    'data-placement': 'left',
                                    'data-trigger': 'focus',
                                    'type': 'button',
                                    'data-html': true,
                                    'href': '#',
                                    'data-container': "body",
                                    'html': '<img width="14px" height="14px" src="images/icon/' + (row.forbidPromoCodeList && row.forbidPromoCodeList.length > 0 ? "promoCodeRed.png" : "promoCodeBlue.png") + '"></img>'
                                        + (row.forbidPromoCodeList && row.forbidPromoCodeList.length > 0 ? '<sup>' + row.forbidPromoCodeList.length + '</sup>' : ''),
                                    'style': "z-index: auto; width:23px; display: inline-block;",
                                }));
                            }

                            link.append($('<a>', {
                                'class': 'prohibitGamePopover fa fa-gamepad margin-right-5 ' + (row.forbidProviders && row.forbidProviders.length > 0 ? " text-danger" : ""),
                                'data-row': JSON.stringify(row),
                                'data-toggle': 'popover',
                                // 'title': $translate("PHONE"),
                                'data-placement': 'left',
                                'data-trigger': 'focus',
                                'type': 'button',
                                'data-html': true,
                                'href': '#',
                                'style': "z-index: auto; min-width:23px",
                                'data-container': "body",
                                'html': (row.forbidProviders && row.forbidProviders.length > 0 ? '<sup>' + row.forbidProviders.length + '</sup>' : ''),
                            }));

                            if (row.isRealPlayer) {
                                link.append($('<a>', {
                                    'class': 'forbidTopUpPopover margin-right-5' + (row.forbidTopUpType && row.forbidTopUpType.length > 0 ? " text-danger" : ""),
                                    'data-row': JSON.stringify(row),
                                    'data-toggle': 'popover',
                                    // 'title': $translate("PHONE"),
                                    'data-placement': 'left',
                                    'data-trigger': 'focus',
                                    'type': 'button',
                                    'data-html': true,
                                    'href': '#',
                                    // 'style': "z-index: auto; min-width:23px",
                                    'data-container': "body",
                                    'html': '<img width="15px" height="12px" src="images/icon/' + (row.forbidTopUpType && row.forbidTopUpType.length > 0 ? "onlineTopUpRed.png" : "onlineTopUpBlue.png") + '"></img>'
                                    + (row.forbidTopUpType && row.forbidTopUpType.length > 0 ? '<sup>' + row.forbidTopUpType.length + '</sup>' : ''),
                                    'style': "z-index: auto; width:23px; display:inline-block;",
                                }));

                                link.append($('<a>', {
                                    'class': 'forbidRewardPointsEventPopover margin-right-5' + (row.forbidRewardPointsEvent && row.forbidRewardPointsEvent.length > 0 ? " text-danger" : ""),
                                    'data-row': JSON.stringify(row),
                                    'ng-click': 'vm.getRewardPointsEventByPlatform(' + JSON.stringify(row.platform) + ');',
                                    'data-toggle': 'popover',
                                    'data-placement': 'left',
                                    'data-trigger': 'focus',
                                    'type': 'button',
                                    'data-html': true,
                                    'href': '#',
                                    'data-container': "body",
                                    'html': '<img width="14px" height="14px" src="images/icon/' + (row.forbidRewardPointsEvent && row.forbidRewardPointsEvent.length > 0 ? "rewardPointsRed.png" : "rewardPointsBlue.png") + '"></img>'
                                    + (row.forbidRewardPointsEvent && row.forbidRewardPointsEvent.length > 0 ? '<sup>' + row.forbidRewardPointsEvent.length + '</sup>' : ''),
                                    'style': "z-index: auto; width:23px; display: inline-block;",
                                }));
                            }
                            return link.prop('outerHTML');
                        },
                        "sClass": "alignLeft"
                    },
                    {
                        title: $translate('partner'),
                        orderable: false,
                        data: "partner.partnerName",
                        "sClass": "alignRight"
                    },
                    {title: $translate('REFERRAL'), orderable: false, data: "referralName$", "sClass": "alignRight"},
                    {
                        // keep for date time
                        // todo :: use createDatePicker after it load instead
                        "visible": false,
                        title: $translate('REGISTRATION_TIME_END'),
                        data: 'registrationEndTime',
                        advSearch: true,
                        filterConfig: {
                            type: "datetimepicker",
                            id: "regEndDateTimePicker",
                            options: {
                                language: 'en',
                                format: 'dd/MM/yyyy hh:mm:ss',
                            }
                        },
                        "sClass": "alignLeft"
                    },
                    {
                        "visible": false,
                        title: $translate('LAST_ACCESS_TIME_END'),
                        data: 'lastAccessEndTime',
                        advSearch: true,
                        type: "datetimepicker",
                        filterConfig: {
                            type: "datetimepicker",
                            id: "lastAccessEndDateTimePicker",
                            options: {
                                language: 'en',
                                format: 'dd/MM/yyyy hh:mm:ss',
                            }
                        },
                        "sClass": "alignLeft"
                    },
                ],
                //"autoWidth": false,
                "scrollX": false,
                "deferRender": true,
                "bDeferRender": true,
                "bProcessing": true,
                // "scrollY": "384px",
                // "scrollCollapse": false,
                "destroy": true,
                "paging": false,
                //"dom": '<"top">rt<"bottom"il><"clear">',
                "language": {
                    "info": $translate("Display _MAX_ players"),
                    "emptyTable": $translate("No data available in table"),
                },
                //dom: 'Zrtlip',
                // dom: "Z<'row'<'col-sm-12'tr>>" + "<'row'<'col-sm-4'l><'col-sm-4'i><'col-sm-4'p>>",
                dom: "Z<'row'<'col-sm-12'tr>>",
                fnRowCallback: vm.playerTableRowClick,
                fnDrawCallback: function (oSettings) {
                    var container = oSettings.nTable;

                    $(container).find('[title]').tooltip();

                    utilService.setupPopover({
                        context: container,
                        elem: '.rewardTaskPopover',
                        onClickAsync: function (showPopover) {
                            var that = this;
                            var row = JSON.parse(this.dataset.row);

                            vm.selectedPlayerValidCredit = parseFloat((row.validCredit).toFixed(2));
                            if (vm.selectedPlatform.data.useProviderGroup) {
                                vm.getRewardTaskGroupDetail(row._id, function (data) {
                                    vm.showAnyLobby = false;
                                    vm.rewardTaskGroupPopoverData = vm.curRewardTask.map(group => {
                                        if (group.providerGroup.name === "ANY_LOBBY") {
                                            vm.showAnyLobby = true;
                                            group.validCredit = row.validCredit;
                                            vm.anyLobbyCurConsumption = group.curConsumption;
                                            vm.anyLobbyTargetConsumption = group.targetConsumption;
                                            vm.anyLobbyForbidXIMAAmt = group.forbidXIMAAmt;
                                        }
                                        // if (group.rewardAmt) {
                                        //     group.rewardAmt = Math.floor(group.rewardAmt);
                                        // }
                                        return group;
                                    });
                                    vm.rewardTaskGroupPopoverData = vm.rewardTaskGroupPopoverData.filter(group => group.providerGroup.name !== "ANY_LOBBY");
                                    vm.showLocalCredit = true;
                                    vm.curRewardTask.forEach(group => {
                                        if (group.providerGroup.name === "ANY_LOBBY") {
                                            vm.showLocalCredit = false;
                                        }
                                    });
                                    $scope.safeApply();
                                    showPopover(that, '#rewardTaskGroupPopover', data);

                                });
                            } else {
                                vm.getRewardTaskDetail(row._id, function (data) {
                                    showPopover(that, '#rewardTaskPopover', data);
                                });
                            }
                        }
                    });

                    utilService.setupPopover({
                        context: container,
                        elem: '.playerFeedbackPopover',
                        onClickAsync: function (showPopover) {
                            var that = this;
                            var row = JSON.parse(this.dataset.row);
                            vm.getPlayer5Feedback(row._id, function (data) {
                                showPopover(that, '#playerFeedbackPopover', data);
                            });
                        }
                    });

                    utilService.setupPopover({
                        context: container,
                        elem: '.levelPopover',
                        content: function () {
                            var data = JSON.parse(this.dataset.row);
                            vm.levelPlayer = data;
                            // Optional: If the player lost his level for any reason, set him to the first level, instead of crashing.
                            if (!vm.levelPlayer.playerLevel) {
                                vm.levelPlayer.playerLevel = vm.allPlayerLvl[0];
                            }
                            var curLevel = vm.levelPlayer.playerLevel.value;
                            vm.nextPlayerLevelData = '';
                            $.each(vm.allPlayerLvl, function (i, v) {
                                console.log(i, v);
                                if (v.value == curLevel + 1) {
                                    vm.nextPlayerLevelData = v;
                                    return true;
                                }
                            })
                            if (!vm.nextPlayerLevelData) {
                            }
                            console.log('vm.playerLvlData', vm.playerLvlData);
                            $scope.safeApply();

                            return $('#levelPopover').html();
                        },
                        callback: function () {
                            //todo::this will need to change now that there are multiple conditions to reach the next level
                            var topupPercentString = String((vm.levelPlayer.curLevelTopUpSum / vm.nextPlayerLevelData.topupLimit * 100).toFixed(1)) + "%";
                            var consumPercentString = String((vm.levelPlayer.curLevelConsumptionSum / vm.nextPlayerLevelData.consumptionLimit * 100).toFixed(1)) + "%";
                            console.log('string', topupPercentString, consumPercentString);
                            $(".topupPlayer .progress-bar").text(topupPercentString).animate({
                                width: topupPercentString
                            }, 1000);
                            $(".consumptionPlayer .progress-bar").text(consumPercentString).animate({
                                width: consumPercentString
                            }, 1000);
                        }
                    });

                    $(".remarkCol > a").on("click", vm.initPlayerCredibility);

                    utilService.setupPopover({
                        context: container,
                        elem: '.telPopover',
                        content: function () {
                            var data = JSON.parse(this.dataset.row);
                            vm.telphonePlayer = data;
                            $scope.safeApply();
                            return $('#telPopover').html();
                        },
                        callback: function () {
                            $("button.playerMessage").on('click', function () {
                                console.log('message', this);
                                //alert("will send message to " + vm.telphonePlayer.name);
                                // showMessagePlayerModalFor(vm.teleplhonePlayer);

                            });
                            $("button.playerTelephone").on('click', function () {
                                alert("will call " + vm.telphonePlayer.name);
                            });
                        }
                    });

                    function showMessagePlayerModalFor(player) {
                        var $modalScope = $scope.$new(true);
                        $('#messagePlayerModal').modal('show');
                    }

                    vm.sendMessageToPlayer = function () {
                        // Currently we are passing the adminId from the client side, but we should really pick it up on the server side.
                        let sendData = {
                            //adminId: authService.adminId,
                            adminName: authService.adminName,
                            platformId: vm.selectedPlatform.id,
                            playerId: vm.telphonePlayer._id,
                            title: vm.messageForPlayer.title,
                            content: vm.messageForPlayer.content
                        };
                        $scope.$socketPromise('sendPlayerMailFromAdminToPlayer', sendData).then(function () {
                            // We could show a confirmation message, but currently showConfirmMessage() is doing that for us.
                        }).done();
                    };

                    utilService.setupPopover({
                        context: container,
                        elem: '.statusPopover',
                        content: function () {
                            //console.log('this', this);
                            vm.playerStatusHistory = null;
                            var data = JSON.parse(this.dataset.row);
                            vm.statusPopover = data;
                            $scope.safeApply();
                            $('.playerStatusConfirmation').hide();
                            return $compile($('#statusPopover').html())($scope);
                        },
                        callback: function () {
                            // Problem with compiling here, if we click from one popover directly to open another one,
                            // then callback + compile gets called on the old popover (again), but Bootstrap actually
                            // displays a fresh non-bound popover!
                            var data = JSON.parse(this.dataset.row);
                            var thisPopover = utilService.$getPopoverID(this);
                            // if (data.status == '2') { // 2 means "ForbidGame"
                            //     $(thisPopover).find('.showGames').show();
                            // }
                            //var rowData = {};
                            // var status = '';
                            var rowData = JSON.parse(this.dataset.row);
                            var status = rowData.status;

                            $scope.safeApply();
                            $("button.playerStatusHistory").on('click', function () {
                                Q.all(vm.getPlayerStatusChangeLog(vm.statusPopover))
                                    .then(function (data) {
                                        console.log('vm.playerStatusHistory', vm.playerStatusHistory);
                                    }, function (error) {
                                    })
                                    .done()
                            });
                            $("button.playerStatusConfirm").on('click', function () {
                                if ($(this).hasClass('disabled')) {
                                    return;
                                }
                                var reason = $(thisPopover).find('.playerStatusChangeReason').val();
                                var sendData = {
                                    _id: rowData._id,
                                    status: status,
                                    reason: reason,
                                    adminName: authService.adminName
                                }
                                vm.updatePlayerStatus(rowData, sendData);
                                $('.playerStatusConfirmation').hide();
                                $(".statusPopover").popover('hide');
                            });
                            $("textarea.playerStatusChangeReason").keyup(function () {
                                var reason = $(thisPopover).find('.playerStatusChangeReason').val();
                                if (reason) {
                                    $(thisPopover).find('.playerStatusConfirm').removeClass('disabled');
                                } else {
                                    $(thisPopover).find('.playerStatusConfirm').addClass('disabled');
                                }
                            });

                            $("button.playerStatusCancel").on('click', function () {
                                $('.playerStatusConfirmation').hide();
                                $(".statusPopover").popover('hide');
                            });

                            $('.playerStatusProviderForbid').change(function () {
                                $('.playerStatusConfirmation').show();
                            });
                            $("input.playerStatusChange").on('click', function () {
                                rowData = JSON.parse(this.dataset.row);
                                status = this.dataset.status;
                                console.log('this:playerStatusChange:onClick', rowData, status);
                                // var toSHow = $(thisPopover).find('.showGames');
                                // if (status == '2') { // 2 means "ForbidGame"
                                //     $(toSHow).show();
                                // } else {
                                //     $(toSHow).hide();
                                // }
                                $scope.safeApply();

                                console.log($('.playerStatusConfirmation'));
                                $('.playerStatusConfirmation').show();
                            });
                        }
                    });

                    utilService.setupPopover({
                        context: container,
                        elem: '.prohibitGamePopover',
                        content: function () {
                            var data = JSON.parse(this.dataset.row);
                            vm.prohibitGamePopover = data;
                            vm.forbidGameDisable = true;
                            vm.forbidGameRemark = '';
                            $scope.safeApply();
                            return $compile($('#prohibitGamePopover').html())($scope);
                        },
                        callback: function () {
                            let thisPopover = utilService.$getPopoverID(this);
                            let rowData = JSON.parse(this.dataset.row);
                            $scope.safeApply();

                            $("button.forbidGameCancel").on('click', function () {
                                $(".prohibitGamePopover").popover('hide');
                            });

                            $("button.showForbidGame").on('click', function () {
                                $(".prohibitGamePopover").popover('hide');
                            });

                            $("input.playerStatusProviderForbid").on('click', function () {
                                if ($(this).hasClass('disabled')) {
                                    return;
                                }
                                let forbidProviderList = $(thisPopover).find('.playerStatusProviderForbid');
                                let forbidProviders = [];
                                $.each(forbidProviderList, function (i, v) {
                                    if ($(v).prop('checked')) {
                                        forbidProviders.push($(v).attr('data-provider'));
                                    }
                                });
                                vm.forbidGameDisable = vm.isForbidChanged(forbidProviders, vm.prohibitGamePopover.forbidProviders);
                                $scope.safeApply();
                            });

                            $("button.forbidGameConfirm").on('click', function () {
                                if ($(this).hasClass('disabled')) {
                                    return;
                                }
                                let forbidProviderList = $(thisPopover).find('.playerStatusProviderForbid');
                                let forbidProviders = [];
                                $.each(forbidProviderList, function (i, v) {
                                    if ($(v).prop('checked')) {
                                        forbidProviders.push($(v).attr('data-provider'));
                                    }
                                });
                                let sendData = {
                                    _id: rowData._id,
                                    forbidProviders: forbidProviders,
                                    adminName: authService.adminName
                                };
                                vm.updatePlayerForbidProviders(sendData);
                                $(".prohibitGamePopover").popover('hide');
                            });
                        }
                    });

                    utilService.setupPopover({
                        context: container,
                        elem: '.forbidRewardPointsEventPopover',
                        content: function () {
                            var data = JSON.parse(this.dataset.row);
                            vm.forbidRewardPointsEventPopover = data;
                            vm.forbidRewardPointsEventDisable = true;
                            vm.forbidRewardPointsEventRemark = '';
                            $scope.safeApply();
                            return $compile($('#forbidRewardPointsEventPopover').html())($scope);
                        },
                        callback: function () {
                            let thisPopover = utilService.$getPopoverID(this);
                            let rowData = JSON.parse(this.dataset.row);
                            $scope.safeApply();

                            $("button.forbidRewardPointsEventCancel").on('click', function () {
                                $(".forbidRewardPointsEventPopover").popover('hide');
                            });

                            $("button.showForbidRewardPointsEvent").on('click', function () {
                                $(".forbidRewardPointsEventPopover").popover('hide');
                            });

                            $("input.playerRewardPointsEventForbid").on('click', function () {
                                if ($(this).hasClass('disabled')) {
                                    return;
                                }
                                let forbidRewardPointsEventList = $(thisPopover).find('.playerRewardPointsEventForbid');
                                let forbidRewardPointsEvent = [];
                                $.each(forbidRewardPointsEventList, function (i, v) {
                                    if ($(v).prop('checked')) {
                                        forbidRewardPointsEvent.push($(v).attr('data-provider'));
                                    }
                                });
                                vm.forbidRewardPointsEventDisable = vm.isForbidChanged(forbidRewardPointsEvent, vm.forbidRewardPointsEventPopover.forbidRewardPointsEvent);
                                $scope.safeApply();
                            });

                            $("button.forbidRewardPointsEventConfirm").on('click', function () {
                                if ($(this).hasClass('disabled')) {
                                    return;
                                }
                                let forbidRewardPointsEventList = $(thisPopover).find('.playerRewardPointsEventForbid');
                                let forbidRewardPointsEvent = [];
                                $.each(forbidRewardPointsEventList, function (i, v) {
                                    if ($(v).prop('checked')) {
                                        forbidRewardPointsEvent.push($(v).attr('data-provider'));
                                    }
                                });
                                let sendData = {
                                    _id: rowData._id,
                                    forbidRewardPointsEvent: forbidRewardPointsEvent,
                                    adminName: authService.adminName
                                };
                                vm.updatePlayerForbidRewardPointsEvent(sendData);
                                $(".forbidRewardPointsEventPopover").popover('hide');
                            });
                        }
                    });

                    utilService.setupPopover({
                        context: container,
                        elem: '.forbidTopUpPopover',
                        content: function () {
                            var data = JSON.parse(this.dataset.row);
                            vm.forbidTopUpPopover = data;
                            vm.forbidTopUpDisable = true;
                            vm.forbidTopUpRemark = '';
                            $scope.safeApply();
                            return $compile($('#forbidTopUpPopover').html())($scope);
                        },
                        callback: function () {
                            let thisPopover = utilService.$getPopoverID(this);
                            let rowData = JSON.parse(this.dataset.row);
                            $scope.safeApply();

                            $("button.forbidTopUpCancel").on('click', function () {
                                $(".forbidTopUpPopover").popover('hide');
                            });

                            $("button.showForbidTopUp").on('click', function () {
                                $(".forbidTopUpPopover").popover('hide');
                            });

                            $("input.playerTopUpTypeForbid").on('click', function () {
                                if ($(this).hasClass('disabled')) {
                                    return;
                                }
                                let forbidTopUpList = $(thisPopover).find('.playerTopUpTypeForbid');
                                let forbidTopUpTypes = [];
                                $.each(forbidTopUpList, function (i, v) {
                                    if ($(v).prop('checked')) {
                                        forbidTopUpTypes.push($(v).attr('data-provider'));
                                    }
                                });
                                vm.forbidTopUpDisable = vm.isForbidChanged(forbidTopUpTypes, vm.forbidTopUpPopover.forbidTopUpType);
                                $scope.safeApply();
                            });

                            $("button.forbidTopUpConfirm").on('click', function () {
                                if ($(this).hasClass('disabled')) {
                                    return;
                                }
                                let forbidTopUpList = $(thisPopover).find('.playerTopUpTypeForbid');
                                let forbidTopUpTypes = [];
                                $.each(forbidTopUpList, function (i, v) {
                                    if ($(v).prop('checked')) {
                                        forbidTopUpTypes.push($(v).attr('data-provider'));
                                    }
                                });
                                let sendData = {
                                    query: {_id: rowData._id},
                                    updateData: {forbidTopUpType: forbidTopUpTypes},
                                    adminName: authService.adminName
                                };
                                vm.confirmUpdatePlayerTopupTypes(sendData);
                                $(".forbidTopUpPopover").popover('hide');
                            });
                        }
                    });

                    utilService.setupPopover({
                        context: container,
                        elem: '.forbidRewardEventPopover',
                        content: function () {
                            var data = JSON.parse(this.dataset.row);
                            vm.forbidRewardEventPopover = data;
                            // vm.forbidPromoCode = vm.forbidRewardEventPopover.forbidPromoCode || false;
                            vm.forbidLevelUpReward = vm.forbidRewardEventPopover.forbidLevelUpReward || false;
                            vm.forbidLevelMaintainReward = vm.forbidRewardEventPopover.forbidLevelMaintainReward || false;
                            vm.forbidRewardEvents = [];
                            vm.forbidRewardDisable = true;
                            vm.selectedAllForbidRewardEvent = false;
                            if (vm.forbidLevelUpReward && vm.forbidLevelMaintainReward && vm.allRewardEvent && vm.forbidRewardEventPopover && vm.forbidRewardEventPopover.forbidRewardEvents && (vm.allRewardEvent.length === vm.forbidRewardEventPopover.forbidRewardEvents.length)) {
                                vm.selectedAllForbidRewardEvent = true;
                            }
                            $scope.safeApply();
                            return $compile($('#forbidRewardEventPopover').html())($scope);
                        },
                        callback: function () {
                            let thisPopover = utilService.$getPopoverID(this);
                            let rowData = JSON.parse(this.dataset.row);
                            $scope.safeApply();

                            $("input.playerRewardEventForbid").on('click', function () {
                                let forbidRewardEventList = $(thisPopover).find('.playerRewardEventForbid');
                                let forbidRewardEvents = [];
                                $.each(forbidRewardEventList, function (i, v) {
                                    if ($(v).prop('checked')) {
                                        forbidRewardEvents.push($(v).attr('data-provider'));
                                    }
                                });
                                if (vm.forbidPromoCode != rowData.forbidPromoCode || vm.forbidLevelUpReward != rowData.forbidLevelUpReward || vm.forbidLevelMaintainReward != rowData.forbidLevelMaintainReward) {
                                    vm.forbidRewardDisable = false;
                                } else {
                                    vm.forbidRewardDisable = vm.isForbidChanged(forbidRewardEvents, vm.forbidRewardEventPopover.forbidRewardEvents);
                                }
                                $scope.safeApply();
                            });

                            $("button.forbidRewardEventCancel").on('click', function () {
                                $(".forbidRewardEventPopover").popover('hide');
                            });

                            $("button.showForbidreward").on('click', function () {
                                $(".forbidRewardEventPopover").popover('hide');
                            });

                            $("button.forbidRewardEventConfirm").on('click', function () {
                                if ($(this).hasClass('disabled')) {
                                    return;
                                }
                                let forbidRewardEventList = $(thisPopover).find('.playerRewardEventForbid');
                                let forbidRewardEvents = [];
                                $.each(forbidRewardEventList, function (i, v) {
                                    if ($(v).prop('checked') && $(v).attr('data-provider')) {
                                        forbidRewardEvents.push($(v).attr('data-provider'));
                                    }
                                });
                                let sendData = {
                                    _id: rowData._id,
                                    forbidRewardEvents: forbidRewardEvents,
                                    forbidLevelUpReward: vm.forbidLevelUpReward,
                                    forbidLevelMaintainReward: vm.forbidLevelMaintainReward,
                                    adminName: authService.adminName
                                };
                                vm.updatePlayerForbidRewardEvents(sendData);
                                $(".forbidRewardEventPopover").popover('hide');
                            });
                        }
                    });

                    utilService.setupPopover({
                        context: container,
                        elem: '.forbidPromoCodePopover',
                        content: function () {
                            var data = JSON.parse(this.dataset.row);
                            vm.forbidPromoCodePopover = data;
                            vm.forbidPromoCode = [];
                            vm.forbidPromoCodeDisable = true;
                            vm.selectedAllPromoCode = false;
                            let totalLength  = 0;
                            vm.promoCodeByPlatform.forEach(
                                p => {
                                    if (p && p.data){
                                        totalLength += p.data.length;
                                    }
                                }
                            )
                            if (vm.promoCodeByPlatform && vm.forbidPromoCodePopover && vm.forbidPromoCodePopover.forbidPromoCode && (totalLength === vm.forbidPromoCodePopover.forbidPromoCode.length)) {
                                vm.selectedAllPromoCode = true;
                            }
                            $scope.safeApply();
                            return $compile($('#forbidPromoCodePopover').html())($scope);
                        },
                        callback: function () {
                            let thisPopover = utilService.$getPopoverID(this);
                            let rowData = JSON.parse(this.dataset.row);
                            $scope.safeApply();

                            $("input.playerPromoCodeForbid").on('click', function () {
                                let forbidPromoCodeList = $(thisPopover).find('.playerPromoCodeForbid');
                                let forbidPromoCode = [];
                                $.each(forbidPromoCodeList, function (i, v) {
                                    if ($(v).prop('checked')) {
                                        forbidPromoCode.push($(v).attr('data-provider'));
                                    }
                                });

                                vm.forbidPromoCodeDisable = vm.isForbidChanged(forbidPromoCode, vm.forbidPromoCodePopover.forbidPromoCodeList);
                                $scope.safeApply();
                            });

                            $("button.forbidPromoCodeCancel").on('click', function () {
                                $(".forbidPromoCodePopover").popover('hide');
                            });

                            $("button.showForbidPromoCode").on('click', function () {
                                $(".forbidPromoCodePopover").popover('hide');
                            });

                            $("button.forbidPromoCodeConfirm").on('click', function () {
                                if ($(this).hasClass('disabled')) {
                                    return;
                                }
                                let forbidPromoCodeList = $(thisPopover).find('.playerPromoCodeForbid');
                                let forbidPromoCode = [];
                                $.each(forbidPromoCodeList, function (i, v) {
                                    if ($(v).prop('checked') && $(v).attr('data-provider')) {
                                        forbidPromoCode.push($(v).attr('data-provider'));
                                    }
                                });
                                let sendData = {
                                    _id: rowData._id,
                                    forbidPromoCodeList: forbidPromoCode,
                                    adminName: authService.adminName
                                };
                                vm.updatePlayerForbidPromoCode(sendData);
                                $(".forbidPromoCodePopover").popover('hide');
                            });
                        }
                    });

                    utilService.setupPopover({
                        context: container,
                        elem: '.playerPermissionPopover',
                        onClickAsync: function (showPopover) {
                            var that = this;
                            var row = JSON.parse(this.dataset.row);
                            vm.playerPermissionTypes = {
                                applyBonus: {
                                    imgType: 'img',
                                    src: "images/icon/withdrawBlue.png",
                                    width: "26px",
                                    height: '26px'
                                },
                                // transactionReward: {imgType: 'i', iconClass: "fa fa-share-square"},
                                allTopUp: {
                                    imgType: 'img',
                                    src: "images/icon/allTopUpBlue.png",
                                    width: "26px",
                                    height: '20px'
                                },
                                topupOnline: {
                                    imgType: 'img',
                                    src: "images/icon/onlineTopUpBlue.png",
                                    width: "26px",
                                    height: '20px'
                                },
                                topupManual: {
                                    imgType: 'img',
                                    src: "images/icon/manualTopUpBlue.png",
                                    width: "26px",
                                    height: '26px'
                                },
                                alipayTransaction: {
                                    imgType: 'img',
                                    src: "images/icon/aliPayBlue.png",
                                    width: "26px",
                                    height: '26px'
                                },
                                disableWechatPay: {imgType: 'i', iconClass: "fa fa-comments"},
                                topUpCard: {
                                    imgType: 'img',
                                    src: "images/icon/cardTopUpBlue.png",
                                    width: "26px",
                                    height: '26px'
                                },
                                forbidPlayerFromLogin: {imgType: 'i', iconClass: "fa fa-sign-in", testPlayer: true},
                                forbidPlayerFromEnteringGame: {
                                    imgType: 'i',
                                    iconClass: "fa fa-gamepad",
                                    testPlayer: true
                                },
                                // forbidPlayerConsumptionReturn: {imgType: 'i', iconClass: "fa fa-repeat"},
                                // forbidPlayerConsumptionIncentive: {imgType: 'i', iconClass: "fa fa-ambulance"},
                                // advanceConsumptionReward: {imgType: 'i', iconClass: "fa fa-tint"},
                                // PlayerTopUpReturn: {imgType: 'i', iconClass: "fa fa-plus-square"},
                                // PlayerDoubleTopUpReturn: {imgType: 'i', iconClass: "fa fa-plus-square-o"},
                                // playerConsecutiveConsumptionReward: {imgType: 'i', iconClass: "fa fa-forward"},
                                // PlayerPacketRainReward: {imgType: 'i', iconClass: "fa fa-umbrella"},
                                phoneCallFeedback: {
                                    imgType: 'i',
                                    iconClass: "fa fa-volume-control-phone",
                                    testPlayer: true
                                },
                                SMSFeedBack: {imgType: 'i', iconClass: "fa fa-comment", testPlayer: true},
                                // PlayerLimitedOfferReward: {
                                //     imgType: 'img',
                                //     src: "images/icon/limitedRewardBlue.png",
                                //     width: "26px",
                                //     height: '26px'
                                // },
                                banReward: {imgType: 'i', iconClass: "fa fa-gift"},
                                forbidPlayerConsumptionReturn: {imgType: 'i', iconClass: "fa fa-repeat"},
                                allowPromoCode: {
                                    imgType: 'img',
                                    src: "images/icon/promoCodeBlue.png",
                                    width: "26px",
                                    height: '26px'
                                },
                                rewardPointsTask: {
                                    imgType: 'img',
                                    src: "images/icon/rewardPointsBlue.png",
                                    width: "26px",
                                    height: '26px'
                                },
                                levelChange: {
                                    imgType: 'img',
                                    src: "images/icon/levelBlue.png",
                                    width: "26px",
                                    height: '26px'
                                },
                            };

                            $("#playerPermissionTable td").removeClass('hide');

                            vm.popOverPlayerPermission = row;

                            // Invert second render
                            row.permission.banReward = !row.permission.banReward;
                            row.permission.disableWechatPay = !row.permission.disableWechatPay;
                            row.permission.forbidPlayerConsumptionReturn = !row.permission.forbidPlayerConsumptionReturn;
                            row.permission.forbidPlayerConsumptionIncentive = !row.permission.forbidPlayerConsumptionIncentive;
                            row.permission.forbidPlayerFromLogin = !row.permission.forbidPlayerFromLogin;
                            row.permission.forbidPlayerFromEnteringGame = !row.permission.forbidPlayerFromEnteringGame;

                            $.each(vm.playerPermissionTypes, function (key, v) {
                                if (row.permission && row.permission[key] === false) {
                                    $("#playerPermissionTable .permitOn." + key).addClass('hide');
                                } else {
                                    $("#playerPermissionTable .permitOff." + key).addClass('hide');
                                }
                            });
                            $scope.safeApply();
                            showPopover(that, '#playerPermissionPopover', row);
                        },
                        callback: function () {
                            var changeObj = {}
                            var thisPopover = utilService.$getPopoverID(this);
                            var $remark = $(thisPopover + ' .permissionRemark');
                            var $submit = $(thisPopover + ' .submit');
                            var $disableAllMainPermission = $(thisPopover + ' .disableAllMainPermission');
                            var $enableAllMainPermission = $(thisPopover + ' .enableAllMainPermission');
                            var $selectedMainPermission = $(thisPopover + ' .selectedMainPermission');
                            var row = JSON.parse(this.dataset.row);
                            $submit.prop('disabled', true);
                            $selectedMainPermission.prop('disabled', false);

                            $(thisPopover + " .togglePlayer").on('click', function () {
                                var key = $(this).data("which");
                                var select = $(this).data("on");
                                changeObj[key] = !select;
                                $(thisPopover + ' .' + key).toggleClass('hide');
                                $submit.prop('disabled', $remark.val() == '');
                                $selectedMainPermission.prop('disabled', true);
                            });

                            $remark.on('input selectionchange propertychange', function () {
                                $submit.prop('disabled', this.value.length === 0 || changeObj == {})
                            });

                            $disableAllMainPermission.on('click', function () {
                                if (row.isRealPlayer) {
                                    changeObj.applyBonus = false;
                                    changeObj.allTopUp = false;
                                    changeObj.topupOnline = false;
                                    changeObj.topupManual = false;
                                    changeObj.alipayTransaction = false;
                                    changeObj.disableWechatPay = false;
                                    changeObj.topUpCard = false;
                                    changeObj.banReward = false;
                                    changeObj.forbidPlayerConsumptionReturn = false;
                                    changeObj.allowPromoCode = false;
                                    changeObj.rewardPointsTask = false;
                                    changeObj.levelChange = false;

                                    $(thisPopover + ' .permitOn.applyBonus').addClass('hide');
                                    $(thisPopover + ' .permitOn.allTopUp').addClass('hide');
                                    $(thisPopover + ' .permitOn.topupOnline').addClass('hide');
                                    $(thisPopover + ' .permitOn.topupManual').addClass('hide');
                                    $(thisPopover + ' .permitOn.alipayTransaction').addClass('hide');
                                    $(thisPopover + ' .permitOn.disableWechatPay').addClass('hide');
                                    $(thisPopover + ' .permitOn.topUpCard').addClass('hide');
                                    $(thisPopover + ' .permitOn.banReward').addClass('hide');
                                    $(thisPopover + ' .permitOn.forbidPlayerConsumptionReturn').addClass('hide');
                                    $(thisPopover + ' .permitOn.allowPromoCode').addClass('hide');
                                    $(thisPopover + ' .permitOn.rewardPointsTask').addClass('hide');
                                    $(thisPopover + ' .permitOn.levelChange').addClass('hide');

                                    $(thisPopover + ' .permitOff.applyBonus').removeClass('hide');
                                    $(thisPopover + ' .permitOff.allTopUp').removeClass('hide');
                                    $(thisPopover + ' .permitOff.topupOnline').removeClass('hide');
                                    $(thisPopover + ' .permitOff.topupManual').removeClass('hide');
                                    $(thisPopover + ' .permitOff.alipayTransaction').removeClass('hide');
                                    $(thisPopover + ' .permitOff.disableWechatPay').removeClass('hide');
                                    $(thisPopover + ' .permitOff.topUpCard').removeClass('hide');
                                    $(thisPopover + ' .permitOff.banReward').removeClass('hide');
                                    $(thisPopover + ' .permitOff.forbidPlayerConsumptionReturn').removeClass('hide');
                                    $(thisPopover + ' .permitOff.allowPromoCode').removeClass('hide');
                                    $(thisPopover + ' .permitOff.rewardPointsTask').removeClass('hide');
                                    $(thisPopover + ' .permitOff.levelChange').removeClass('hide');
                                }

                                changeObj.forbidPlayerFromLogin = false;
                                changeObj.forbidPlayerFromEnteringGame = false;
                                changeObj.phoneCallFeedback = false;
                                changeObj.SMSFeedBack = false;

                                $(thisPopover + ' .permitOn.forbidPlayerFromLogin').addClass('hide');
                                $(thisPopover + ' .permitOn.forbidPlayerFromEnteringGame').addClass('hide');
                                $(thisPopover + ' .permitOn.phoneCallFeedback').addClass('hide');
                                $(thisPopover + ' .permitOn.SMSFeedBack').addClass('hide');

                                $(thisPopover + ' .permitOff.forbidPlayerFromLogin').removeClass('hide');
                                $(thisPopover + ' .permitOff.forbidPlayerFromEnteringGame').removeClass('hide');
                                $(thisPopover + ' .permitOff.phoneCallFeedback').removeClass('hide');
                                $(thisPopover + ' .permitOff.SMSFeedBack').removeClass('hide');
                            });

                            $enableAllMainPermission.on('click', function () {
                                if (row.isRealPlayer) {
                                    changeObj.applyBonus = true;
                                    changeObj.allTopUp = true;
                                    changeObj.topupOnline = true;
                                    changeObj.topupManual = true;
                                    changeObj.alipayTransaction = true;
                                    changeObj.disableWechatPay = true;
                                    changeObj.topUpCard = true;
                                    changeObj.banReward = true;
                                    changeObj.forbidPlayerConsumptionReturn = true;
                                    changeObj.allowPromoCode = true;
                                    changeObj.rewardPointsTask = true;
                                    changeObj.levelChange = true;

                                    $(thisPopover + ' .permitOn.applyBonus').removeClass('hide');
                                    $(thisPopover + ' .permitOn.allTopUp').removeClass('hide');
                                    $(thisPopover + ' .permitOn.topupOnline').removeClass('hide');
                                    $(thisPopover + ' .permitOn.topupManual').removeClass('hide');
                                    $(thisPopover + ' .permitOn.alipayTransaction').removeClass('hide');
                                    $(thisPopover + ' .permitOn.disableWechatPay').removeClass('hide');
                                    $(thisPopover + ' .permitOn.topUpCard').removeClass('hide');
                                    $(thisPopover + ' .permitOn.banReward').removeClass('hide');
                                    $(thisPopover + ' .permitOn.forbidPlayerConsumptionReturn').removeClass('hide');
                                    $(thisPopover + ' .permitOn.allowPromoCode').removeClass('hide');
                                    $(thisPopover + ' .permitOn.rewardPointsTask').removeClass('hide');
                                    $(thisPopover + ' .permitOn.levelChange').removeClass('hide');

                                    $(thisPopover + ' .permitOff.applyBonus').addClass('hide');
                                    $(thisPopover + ' .permitOff.allTopUp').addClass('hide');
                                    $(thisPopover + ' .permitOff.topupOnline').addClass('hide');
                                    $(thisPopover + ' .permitOff.topupManual').addClass('hide');
                                    $(thisPopover + ' .permitOff.alipayTransaction').addClass('hide');
                                    $(thisPopover + ' .permitOff.disableWechatPay').addClass('hide');
                                    $(thisPopover + ' .permitOff.topUpCard').addClass('hide');
                                    $(thisPopover + ' .permitOff.banReward').addClass('hide');
                                    $(thisPopover + ' .permitOff.forbidPlayerConsumptionReturn').addClass('hide');
                                    $(thisPopover + ' .permitOff.allowPromoCode').addClass('hide');
                                    $(thisPopover + ' .permitOff.rewardPointsTask').addClass('hide');
                                    $(thisPopover + ' .permitOff.levelChange').addClass('hide');
                                }

                                changeObj.forbidPlayerFromLogin = true;
                                changeObj.forbidPlayerFromEnteringGame = true;
                                changeObj.phoneCallFeedback = true;
                                changeObj.SMSFeedBack = true;

                                $(thisPopover + ' .permitOn.forbidPlayerFromLogin').removeClass('hide');
                                $(thisPopover + ' .permitOn.forbidPlayerFromEnteringGame').removeClass('hide');
                                $(thisPopover + ' .permitOn.phoneCallFeedback').removeClass('hide');
                                $(thisPopover + ' .permitOn.SMSFeedBack').removeClass('hide');

                                $(thisPopover + ' .permitOff.forbidPlayerFromLogin').addClass('hide');
                                $(thisPopover + ' .permitOff.forbidPlayerFromEnteringGame').addClass('hide');
                                $(thisPopover + ' .permitOff.phoneCallFeedback').addClass('hide');
                                $(thisPopover + ' .permitOff.SMSFeedBack').addClass('hide');
                            });

                            $submit.on('click', function () {
                                $submit.off('click');
                                $(thisPopover + " .togglePlayer").off('click');
                                $remark.off('input selectionchange propertychange');

                                // Invert faked permission display
                                if (changeObj.hasOwnProperty('banReward')) {
                                    changeObj.banReward = !changeObj.banReward;
                                }

                                if (changeObj.hasOwnProperty('disableWechatPay')) {
                                    changeObj.disableWechatPay = !changeObj.disableWechatPay;
                                }

                                if (changeObj.hasOwnProperty('forbidPlayerConsumptionReturn')) {
                                    changeObj.forbidPlayerConsumptionReturn = !changeObj.forbidPlayerConsumptionReturn;
                                }

                                if (changeObj.hasOwnProperty('forbidPlayerConsumptionIncentive')) {
                                    changeObj.forbidPlayerConsumptionIncentive = !changeObj.forbidPlayerConsumptionIncentive;
                                }

                                if (changeObj.hasOwnProperty('forbidPlayerFromLogin')) {
                                    changeObj.forbidPlayerFromLogin = !changeObj.forbidPlayerFromLogin;
                                }

                                if (changeObj.hasOwnProperty('forbidPlayerFromEnteringGame')) {
                                    changeObj.forbidPlayerFromEnteringGame = !changeObj.forbidPlayerFromEnteringGame;
                                }

                                // Invert third render
                                vm.permissionPlayer.permission.banReward = !vm.permissionPlayer.permission.banReward;
                                vm.permissionPlayer.permission.disableWechatPay = !vm.permissionPlayer.permission.disableWechatPay;
                                vm.permissionPlayer.permission.forbidPlayerFromLogin = !vm.permissionPlayer.permission.forbidPlayerFromLogin;
                                vm.permissionPlayer.permission.forbidPlayerFromEnteringGame = !vm.permissionPlayer.permission.forbidPlayerFromEnteringGame;
                                vm.permissionPlayer.permission.forbidPlayerConsumptionReturn = !vm.permissionPlayer.permission.forbidPlayerConsumptionReturn;

                                let selectedMainPermission = $selectedMainPermission.val() ? $selectedMainPermission.val() : "";
                                let status = selectedMainPermission && vm.permissionPlayer.permission ? vm.permissionPlayer.permission[selectedMainPermission] : "";

                                // if permission has any changes
                                if (!$.isEmptyObject(changeObj)) {
                                    selectedMainPermission = "";
                                }

                                socketService.$socket($scope.AppSocket, 'updatePlayerPermission', {
                                    query: {
                                        platform: vm.permissionPlayer.platform,
                                        _id: vm.permissionPlayer._id
                                    },
                                    admin: authService.adminId,
                                    permission: changeObj,
                                    remark: $remark.val(),
                                    selected: {
                                        mainPermission: selectedMainPermission || "",
                                        status: status
                                    }
                                }, function (data) {
                                    if (changeObj.hasOwnProperty('allowPromoCode') ) {
                                        let sendData = {
                                            query: {
                                                platformObjId: vm.permissionPlayer.platform,
                                                name: "Main Permission Disabled (default)", //hard code name
                                                isBlockByMainPermission: true,
                                                color: "lightgrey"
                                            },
                                            updateData: {}
                                        }

                                        if (!changeObj.allowPromoCode) {
                                            sendData.updateData["$addToSet"] = {playerNames: vm.permissionPlayer.name};
                                        } else {
                                            sendData.updateData["$pull"] = {playerNames: vm.permissionPlayer.name};
                                        }
                                        socketService.$socket($scope.AppSocket, 'updatePromoCodeGroupMainPermission', sendData, function () {
                                        });
                                    }
                                    vm.getPlatformPlayersData();
                                }, null, true);

                                $(thisPopover).popover('hide');
                            })

                        }
                    });

                    //
                    // $('#playerDataTable').resize();
                    // $('#playerDataTable').resize();
                }
            }
            // $.each(tableOptions.columns, function (i, v) {
            //     v.defaultContent = "";
            // });
            vm.playerTable = $('#playerDataTable').DataTable(tableOptions);
            vm.playerFeedbackTable = $('#playerFeedbackDataTable').DataTable(tableOptions);
            // $('#playerDataTable').DataTable(tableOptions);

            // vm.playerTable.columns.adjust().draw();
            utilService.setDataTablePageInput('playerDataTable', vm.playerTable, $translate);
            utilService.setDataTablePageInput('playerFeedbackDataTable', vm.playerFeedbackTable, $translate);

            if (!vm.playersQueryCreated) {
                createPlayerAdvancedSearchFilters({
                    tableOptions: tableOptions,
                    filtersElement: '#playerTable-search-filters',
                    queryFunction: vm.updatePlayerQuery
                });
            }
        };

        function createPlayerAdvancedSearchFilters(config) {
            vm.playersQueryCreated = true;
            var currentQueryValues = {};
            $(config.filtersElement).empty();

            function getRegTimeQueryValue(src) {
                var startValue = $('#regDateTimePicker').data('datetimepicker').getLocalDate();
                var endValue = $('#regEndDateTimePicker').data('datetimepicker').getLocalDate();
                var queryValue = {};
                if ($('#regDateTimePicker input').val()) {
                    queryValue["$gte"] = startValue;
                }
                if ($('#regEndDateTimePicker input').val()) {
                    queryValue["$lt"] = endValue;
                }
                return $.isEmptyObject(queryValue) ? null : queryValue;
            }

            function getAccessTimeQueryValue(src) {
                var startValue = $('#lastAccessDateTimePicker').data('datetimepicker').getLocalDate();
                var endValue = $('#lastAccessEndDateTimePicker').data('datetimepicker').getLocalDate();
                var queryValue = {};
                if ($('#lastAccessDateTimePicker input').val()) {
                    queryValue["$gte"] = startValue;
                }
                if ($('#lastAccessEndDateTimePicker input').val()) {
                    queryValue["$lt"] = endValue;
                }
                return $.isEmptyObject(queryValue) ? null : queryValue;
            }

            config.tableOptions.columns.forEach(function (columnConfig, i) {
                var shouldBeSearchable = columnConfig.advSearch;
                if (shouldBeSearchable) {
                    var fieldName = columnConfig.data;

                    // Add the search filter textbox for this field
                    var label = $('<label class="control-label">').text(columnConfig.title);

                    var filterConfig = columnConfig.filterConfig;

                    var input = getFilterInputForColumn(filterConfig).addClass('form-control');
                    // console.log("input", input);

                    if (columnConfig.filterConfig &&
                        columnConfig.filterConfig.hasOwnProperty('type') &&
                        columnConfig.filterConfig.type === 'datetimepicker') {
                        console.log("columnConfig.filterConfig.id", columnConfig.filterConfig.id);
                        var newFilter = $('<div class="search-filter col-xs-12 col-sm-6 col-md-3">')
                            .append(label).append(input);
                    }
                    else {
                        var newFilter = $('<div class="search-filter col-xs-12 col-sm-6 col-md-3">')
                            .append(label).append(input);
                    }
                    $(config.filtersElement).append(newFilter);

                    // Listen for user editing the textbox, and pass the search to datatable
                    //var ptCol = vm.playerTable.columns(i);

                    var regStartTime = '';
                    var regEndTime = '';
                    var lastAccessStartTime = '';
                    var lastAccessEndTime = '';

                    if (fieldName == "registrationTime") {
                        $('#regDateTimePicker').datetimepicker().off('changeDate');
                        $('#regDateTimePicker').datetimepicker().on('changeDate', function (ev) {
                            getQueryFunction(config, filterConfig, 'registrationTime', getRegTimeQueryValue(), true);

                        });
                    }

                    if (fieldName == "registrationEndTime") {
                        $('#regEndDateTimePicker').datetimepicker().off('changeDate');
                        $('#regEndDateTimePicker').datetimepicker().on('changeDate', function (ev) {
                            getQueryFunction(config, filterConfig, 'registrationTime', getRegTimeQueryValue(), true);

                        });
                    }
                    if (fieldName == "lastAccessTime") {
                        $('#lastAccessDateTimePicker').datetimepicker().off('changeDate');
                        $('#lastAccessDateTimePicker').datetimepicker().on('changeDate', function (ev) {
                            getQueryFunction(config, filterConfig, 'lastAccessTime', getAccessTimeQueryValue(), true);

                        });
                    }

                    if (fieldName == "lastAccessEndTime") {
                        $('#lastAccessEndDateTimePicker').datetimepicker().off('changeDate');
                        $('#lastAccessEndDateTimePicker').datetimepicker().on('changeDate', function (ev) {
                            getQueryFunction(config, filterConfig, 'lastAccessTime', getAccessTimeQueryValue(), true);
                        });
                    }

                    input.on('keyup change', (function (evt) {
                        //Text inputs do not fire the change event until they lose focus.
                        if (evt.currentTarget.tagName == "INPUT" && evt.type == 'change') return;
                        var queryValue = '';
                        // Do Additional listening to the keyup event of datetime picker by the className of the div
                        if (this.className == 'datetimepicker form-control') {
                            // assign the value of input (firstchild of the div) to queryValue
                            if (evt.currentTarget.id == "regDateTimePicker" || evt.currentTarget.id == "regEndDateTimePicker") {
                                queryValue = getRegTimeQueryValue();
                                getQueryFunction(config, filterConfig, "registrationTime", queryValue, false);
                            } else if (evt.currentTarget.id == "lastAccessDateTimePicker" || evt.currentTarget.id == "lastAccessEndDateTimePicker") {
                                queryValue = getAccessTimeQueryValue();
                                getQueryFunction(config, filterConfig, "lastAccessTime", queryValue, false);
                            }
                        }
                        else if (filterConfig && filterConfig.type === "multi") {
                            let values = [];
                            let options = this && this.options;
                            for (let i = 0; i < options.length; i++) {
                                let option = options[i];
                                if (option.selected && option.text !== "—") {
                                    values.push(option.value || option.text);
                                }
                            }

                            if (values.length === 0) {
                                values = null;
                            }
                            getQueryFunction(config, filterConfig, fieldName, values, false);
                        }
                        else {
                            queryValue = this.value;
                            getQueryFunction(config, filterConfig, fieldName, queryValue, false);
                        }
                    }));
                }
            });
        }

        function getQueryFunction(config, filterConfig, fieldName, queryValue, isDateTimePicker) {

            var currentQueryValues = {};
            if (isDateTimePicker) {
                currentQueryValues[fieldName] = queryValue;
                config.queryFunction(currentQueryValues);
            }
            if (filterConfig && typeof filterConfig.convertValueForQuery === 'function') {
                queryValue = filterConfig.convertValueForQuery(queryValue);
            }
            if (filterConfig && typeof filterConfig.writeOwnQueryParameters === 'function') {
                filterConfig.writeOwnQueryParameters(queryValue, currentQueryValues);
                // In this case we skip the optimization below, and always perform a query
                config.queryFunction(currentQueryValues);
            }
            else {
                if (currentQueryValues[fieldName] !== queryValue) {
                    currentQueryValues[fieldName] = queryValue;
                    config.queryFunction(currentQueryValues);
                }
            }
        };

        function getFilterInputForColumn(filterConfig) {
            if (filterConfig && filterConfig.type === 'dropdown') {
                var select = $('<select>');
                var options = filterConfig.options.slice(0);
                options.unshift({value: "", html: '&mdash;'});
                options.forEach(function (option) {
                    $('<option>', option).appendTo(select);
                });
                return select;
            }

            if (filterConfig && filterConfig.type === 'multi') {
                let select = $('<select multiple>');
                let options = filterConfig.options.slice(0);
                options.unshift({value: "", html: '&mdash;'});
                options.forEach(function (option) {
                    $('<option>', option).appendTo(select);
                });
                return select;
            }

            // do something here if datetimepicker
            if (filterConfig && filterConfig.type === 'datetimepicker') {

                var input = $('<input type="text",style="width:76%,border:0;", data-format="dd/MM/yyyy hh:mm:ss",class="input-append playerDate">');
                var icon = $('<i>', {
                    'data-date-icon': 'fa fa-calendar',
                    'data-time-icon': 'fa fa-clock-o',
                    'class': 'fa-calendar fa'
                });
                var span = $('<span>', {'class': 'add-on'}).append(icon);
                var div = $('<div id=' + filterConfig.id + ' class="datetimepicker">').append(input).append(span);
                return div;
            }
            else {
                return $('<input type="text">');
            }
        }

        vm.playerBatchPermitTableRowClick = function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
            $compile(nRow)($scope);
        };
        vm.playerTableRowClick = function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
            if(vm.ctiData && vm.ctiData.hasOnGoingMission) {
                if(aData.callOutMissionStatus == $scope.constCallOutMissionCalleeStatus.SUCCEEDED) {
                    $(nRow).addClass('callOutSucceeded');
                } else if(aData.callOutMissionStatus == $scope.constCallOutMissionCalleeStatus.FAILED) {
                    $(nRow).addClass('callOutFailed');
                }
            }
            //MARK!!!
            $compile(nRow)($scope);

            // Row click
            $(nRow).off('click');
            $(nRow).on('click', function () {
                $('#playerDataTable tbody tr').removeClass('selected');
                $('#playerFeedbackDataTable tbody tr').removeClass('selected');
                $(this).toggleClass('selected');
                vm.selectedPlayersCount = 1;
                vm.playerTableRowClicked(aData);
                vm.playerTableClickedRow = vm.playerTable.row(this);
                //display qq in email when no email added
                vm.qqAddress = (vm.selectedSinglePlayer.qq ? vm.selectedSinglePlayer.qq + "@qq.com" : null);
            });
        };

        vm.getSelectedRowPlatformDetails = function(rowData){
            let selectedPlatformData = vm.allPlatformData.filter(platform => platform._id == rowData.platform)[0];
            vm.selectedPlatform = {
                text: selectedPlatformData.name,
                id: selectedPlatformData._id,
                selectable: true,
                data: selectedPlatformData,
                image: {
                    url: selectedPlatformData.icon,
                    width: 30,
                    height: 30,
                }
            };
        };

        vm.getSelectedRowPlayerCredibility = function(rowData) {
            vm.getSelectedRowPlatformDetails(rowData);
            vm.initPlayerCredibility();
        };

        vm.getSelectedRowProviderDetails = function(rowData){
            vm.getSelectedRowPlatformDetails(rowData);
            vm.platformProviderList = vm.selectedPlatform.data.gameProviderDetails || [];
            vm.platformProviderList.forEach(item => {
                if (item && item.batchCreditTransferOutStatus && item.batchCreditTransferOutStatus[vm.selectedPlatform.id]) {
                    item.batchCreditTransferOut = item.batchCreditTransferOutStatus[vm.selectedPlatform.id];
                }
                // remove bUsed added to sameLineProviders
                if (item && item.sameLineProviders) {
                    for (let i in item.sameLineProviders) {
                        let len = item.sameLineProviders[i].length;
                        if (item.sameLineProviders[i] && item.sameLineProviders[i][len-1] === 'bUsed') {
                            item.sameLineProviders[i].pop();
                        }
                    }
                }
            });
        };

        vm.getSelectedRowTopUpGroupDetails = function(rowData){
            vm.getSelectedRowPlatformDetails(rowData);
            vm.loadBankCard();
            vm.loadAliPayAcc();
            vm.loadWechatPayAcc();
        };

        vm.setPlayerLevelAccordingByPlatformId = function (platformObjId){
            $scope.$evalAsync(() => {
                vm.playerLevelByAllPlatform.forEach(
                    playerLevel => {
                        if (playerLevel && playerLevel.platform && playerLevel.platform == platformObjId) {
                            vm.playerLevelPeriod = {};
                            vm.allPlayerLvl = playerLevel.playerLevel;
                            vm.platformBatchLevelUp = true;
                            vm.autoCheckPlayerLevelUp = vm.selectedPlatform.data.autoCheckPlayerLevelUp;
                            vm.manualPlayerLevelUp = vm.selectedPlatform.data.manualPlayerLevelUp;
                            vm.playerLevelPeriod.playerLevelUpPeriod = vm.selectedPlatform.data.playerLevelUpPeriod ? vm.selectedPlatform.data.playerLevelUpPeriod : vm.allPlayerLevelUpPeriod.MONTH;
                            vm.playerLevelPeriod.playerLevelDownPeriod = vm.selectedPlatform.data.playerLevelDownPeriod ? vm.selectedPlatform.data.playerLevelDownPeriod : vm.allPlayerLevelUpPeriod.MONTH;
                            vm.allPlayerLvlReordered = false;
                            vm.sortPlayerLevels();
                            console.log("vm.allPlayerLvl", playerLevel);
                            vm.playerLvlData = {};
                            if (vm.allPlayerLvl) {
                                $.each(vm.allPlayerLvl, function (i, v) {
                                    vm.playerIDArr.push(v._id);
                                    vm.playerLvlData[v._id] = v;
                                })
                            }
                            vm.playerLevelPeriod.levelUpPeriodName = vm.getPlayerLevelUpPeriodName(vm.playerLevelPeriod.playerLevelUpPeriod);
                            vm.playerLevelPeriod.levelDownPeriodName = vm.getPlayerLevelUpPeriodName(vm.playerLevelPeriod.playerLevelDownPeriod);
                            vm.initiateLevelDownPeriodAllField();
                        }
                    }
                );
            });
        };

        vm.getSelectedFeedBackDetails = function (rowData){
            vm.getSelectedRowPlatformDetails(rowData);
            vm.loadFeedBackResult();
            vm.loadFeedBackTopic();
        };

        vm.loadFeedBackResult = function () {
            // 1st dependencies variable
            return Promise.all([
                commonService.getAllPlayerFeedbackResults($scope).catch(err => Promise.resolve([]))
            ]).then(
                result => {
                    $scope.$evalAsync(() => {
                        if(result && result.length){
                            vm.allPlayerFeedbackResults = result[0];
                        }else{
                            vm.allPlayerFeedbackResults = [];
                        }
                    });
                }
            );
        };

        vm.loadFeedBackTopic = function () {
            // 1st dependencies variable
            return Promise.all([
                commonService.getPlayerFeedbackTopic($scope, vm.selectedPlatform.id).catch(err => Promise.resolve([]))
            ]).then(
                result => {
                    $scope.$evalAsync(() => {
                        if(result && result.length){
                            vm.playerFeedbackTopic = result[0];
                        }else{
                            vm.playerFeedbackTopic = [];
                        }
                    });
                }
            );
        };

        vm.initRewardSettings = function (rowData){
            vm.getSelectedRowPlatformDetails(rowData);
            vm.getPlatformProviderGroup();
            vm.getRewardEventGroupByPlatform();
            vm.getRewardEventByPlatform();
        };

        vm.getRewardEventGroupByPlatform = function () {
            // 1st dependencies variable
            return Promise.all([
                commonService.getRewardEventsGroupByPlatform($scope, vm.selectedPlatform.id).catch(err => Promise.resolve([]))
            ]).then(
                result => {
                    $scope.$evalAsync(() => {
                        if(result && result.length){
                            vm.rewardEventGroup = result[0];
                        }else{
                            vm.rewardEventGroup = [];
                        }
                    });
                }
            );
        };

        vm.getRewardEventByPlatform = function () {
            // 1st dependencies variable
            return Promise.all([
                commonService.getRewardEventsByPlatform($scope, vm.selectedPlatform.id).catch(err => Promise.resolve([]))
            ]).then(
                result => {
                    $scope.$evalAsync(() => {
                        if(result && result.length){
                            vm.allRewardEvent = result[0];
                        }else{
                            vm.allRewardEvent = [];
                        }
                    });
                }
            );
        };

        vm.updatePlayerForbidPromoCode = function (sendData) {
            socketService.$socket($scope.AppSocket, 'updatePlayerForbidPromoCode', sendData, function (data) {
                vm.getPlatformPlayersData();
                let tempPromoCodeList = [];
                if (vm.promoCodeByPlatform && vm.promoCodeByPlatform.length){
                    vm.promoCodeByPlatform.forEach(
                        promoCode => {
                            if (promoCode && promoCode.data){
                                tempPromoCodeList =tempPromoCodeList.concat(promoCode.data)
                            }
                        }
                    )
                }
                vm.updateForbidPromoCodeLog(data.data._id, vm.findForbidCheckedName(data.data.forbidPromoCodeList, tempPromoCodeList), data.data);
            });
        };

        vm.updateForbidPromoCodeLog = function (playerId, forbidPromoCode, playerObj) {
            let queryData = {
                playerId: playerId,
                remark: vm.forbidPromoCodeRemark,
                adminId: authService.adminId,
                forbidPromoCodeNames: forbidPromoCode
            };
            socketService.$socket($scope.AppSocket, 'createForbidPromoCodeLog', queryData, function (created) {
                vm.forbidPromoCodeRemark = '';
                console.log('Forbid promo code log created', created);
            });
        };

        vm.getForbidPromoCode = function () {
            vm.forbidPromoCodeLog = {};
            utilService.actionAfterLoaded('#modalForbidPromoCodeLog.in #forbidPromoCodeSearch .endTime', function () {
                vm.forbidPromoCodeLog.startTime = utilService.createDatePicker('#forbidPromoCodeSearch .startTime');
                vm.forbidPromoCodeLog.endTime = utilService.createDatePicker('#forbidPromoCodeSearch .endTime');
                vm.forbidPromoCodeLog.startTime.data('datetimepicker').setDate(utilService.setLocalDayStartTime(utilService.setNDaysAgo(new Date(), 180)));
                vm.forbidPromoCodeLog.endTime.data('datetimepicker').setDate(utilService.setLocalDayEndTime(new Date()));
                vm.forbidPromoCodeLog.pageObj = utilService.createPageForPagingTable("#forbidPromoCodeTblPage", {}, $translate, function (curP, pageSize) {
                    vm.commonPageChangeHandler(curP, pageSize, "forbidPromoCodeLog", vm.getForbidPromoCodeLog)
                });
                vm.getForbidPromoCodeLog(true);
            });
        };

        vm.getForbidPromoCodeLog = function (newSearch) {
            var sendQuery = {
                startTime: vm.forbidPromoCodeLog.startTime.data('datetimepicker').getLocalDate(),
                endTime: vm.forbidPromoCodeLog.endTime.data('datetimepicker').getLocalDate(),
                playerId: vm.forbidPromoCodePopover._id,
                limit: newSearch ? 10 : vm.forbidPromoCodeLog.limit,
                index: newSearch ? 0 : vm.forbidPromoCodeLog.index,
                sortCol: vm.forbidPromoCodeLog.sortCol || undefined
            };
            if (vm.forbidPromoCodeLog.status) {
                sendQuery.status = vm.forbidPromoCodeLog.status;
            }
            vm.forbidPromoCodeLog.isSearching = true;
            console.log("Second:Query:", sendQuery);
            $scope.safeApply();
            socketService.$socket($scope.AppSocket, 'getForbidPromoCodeLog', sendQuery, function (data) {
                let showData = data.data ? data.data.data.map(item => {
                    item.createTime$ = vm.dateReformat(item.createTime);
                    // item.curAmount$ = item.data && item.data.curAmount ? item.data.curAmount.toFixed(2) : 0;
                    for (let i = 0; i < item.forbidPromoCodeNames.length; i++) {
                        if (i > 0)
                            item.forbidPromoCodeNames[i] = " " + item.forbidPromoCodeNames[i];
                    }
                    return item;
                }) : [];
                vm.forbidPromoCodeLog.totalCount = data.data ? data.data.size : 0;
                let summary = data.data ? data.data.summary : {sumAmt: 0};
                console.log("ForbidPromoCodeLog:length:", showData);
                vm.drawForbidPromoCodeLogTbl(showData, vm.forbidPromoCodeLog.totalCount, newSearch, summary);
                vm.forbidPromoCodeLog.isSearching = false;
                $scope.safeApply();
            });
        }

        vm.drawForbidPromoCodeLogTbl = function (showData, size, newSearch, summary) {
            var tableOptions = $.extend({}, vm.generalDataTableOptions, {
                data: showData,
                "aaSorting": vm.forbidPromoCodeLog.aaSorting || [],
                aoColumnDefs: [
                    {'sortCol': 'createTime$', bSortable: true, 'aTargets': [0]},
                    {'sortCol': 'admin.adminName', bSortable: true, 'aTargets': [1]},
                    {targets: '_all', defaultContent: ' ', bSortable: false}
                ],
                columns: [
                    {title: $translate('date'), data: "createTime$"},
                    {title: $translate('OPERATOR_NAME'), data: "admin.adminName"},
                    {title: $translate('FORBID_PROMOCODE'), data: "forbidPromoCodeNames"},
                    {title: $translate('REMARK'), data: "remark"},
                ],
                "paging": false,
            });
            utilService.createDatatableWithFooter("#forbidPromoCodeTbl", tableOptions, {});

            // var aTable = $("#forbidRewardTbl").DataTable(tableOptions);
            vm.forbidPromoCodeLog.pageObj.init({maxCount: size}, newSearch);
            $("#forbidPromoCodeTbl").off('order.dt');
            $("#forbidPromoCodeTbl").on('order.dt', function (event, a, b) {
                vm.commonSortChangeHandler(a, 'forbidPromoCodeLog', vm.getForbidPromoCodeLog);
            });
            $('#forbidPromoCodeTbl').resize();
            $scope.safeApply();
        };

        vm.getAllPromoCode = function () {
            // 1st dependencies variable
            return Promise.all([
                commonService.getAllPromoCode($scope).catch(err => Promise.resolve([]))
            ]).then(
                result => {
                    $scope.$evalAsync(() => {
                        if(result && result.length){
                            vm.allPromoCode = result[0];
                        }else{
                            vm.allPromoCode = [];
                        }
                    });
                }
            );
        };

        vm.getRewardPointsEventByPlatform = function (platformObjId) {
            vm.rewardPointsEventByPlatform = [];
            if (vm.rewardPointsAllEvent && platformObjId){
                vm.rewardPointsEventByPlatform = vm.rewardPointsAllEvent.filter(p => {
                    if (p && p.platformObjId) {
                        return p.platformObjId.toString() == platformObjId.toString()
                    }
                })
            }
        };

        vm.getPromoCodeByPlatform = function (platformObjId) {
            vm.promoCodeByPlatform = [];
            let tempData = [];
            if (vm.allPromoCode && platformObjId){
                vm.allPromoCode.forEach(
                    promoCodeList => {
                        if (promoCodeList && promoCodeList.data){
                            tempData = promoCodeList.data.filter(p => {
                                if (p && p.platformObjId) {
                                    return p.platformObjId.toString() == platformObjId.toString()
                                }
                            })
                        }
                        vm.promoCodeByPlatform.push({
                            category: promoCodeList.category,
                            data: tempData
                        })
                    }
                )
            }
        }

        vm.getEncPhoneNumber = function (playerData) {
            return (playerData && playerData.phoneNumber) ? (playerData.phoneNumber.substring(0, 3) + "******" + playerData.phoneNumber.slice(-4)) : ''
        };

        vm.encryptField = (field) => field && field.substring(0, 3) + "******" + field.slice(-4);

        /**** Similar Player ****/
        vm.showSimilarPlayerTab = function (tabName) {
            vm.selectedSimilarPlayerTab = tabName == null ? "similar-phone" : tabName;

            if (vm.selectedSimilarPlayerTab === 'similar-phone') {
                vm.showPagedSimilarPhoneForPlayer();
            }
            if (vm.selectedSimilarPlayerTab === 'similar-ip') {
                vm.showPagedSimilarIpForPlayer();
            }
        };

        /**** Similar Phone tab ****/
        vm.showPagedSimilarPhoneForPlayer = function () {
            vm.similarPhoneForPlayer = {};
            vm.similarPhoneForPlayer.index = 0;
            vm.similarPhoneForPlayer.limit = vm.similarPhoneForPlayer && vm.similarPhoneForPlayer.limit ? vm.similarPhoneForPlayer.limit : 50;
            utilService.actionAfterLoaded(('#similarPhoneForPlayer'), function () {
                vm.similarPhoneForPlayer.pageObj = utilService.createPageForPagingTable("#similarPhoneForPlayerTablePage", {pageSize: 50}, $translate, function (curP, pageSize) {
                    vm.commonPageChangeHandler(curP, pageSize, "similarPhoneForPlayer", vm.getPagedSimilarPhoneForPlayer)
                });
                vm.getPagedSimilarPhoneForPlayer(true);
            });
        };

        vm.getPagedSimilarPhoneForPlayer = function (newSearch) {
            vm.similarPhoneForPlayer.loading = true;
            let sendQuery = {
                playerId: vm.selectedSinglePlayer._id,
                platformId: vm.selectedSinglePlayer.platform,
                phoneNumber: vm.selectedSinglePlayer.phoneNumber,
                index: newSearch ? 0 : vm.similarPhoneForPlayer.index,
                limit: newSearch ? vm.similarPhoneForPlayer.limit : (vm.similarPhoneForPlayer.limit || 50),
                sortCol: {registrationTime: -1},
                isRealPlayer: true,
                admin: 'System',
            };
            socketService.$socket($scope.AppSocket, "getPagedSimilarPhoneForPlayers", sendQuery, function (data) {
                vm.similarPhoneForPlayers = data.data.data;
                vm.similarPhoneForPlayer.totalCount = data.data.total || 0;
                vm.similarPhoneForPlayer.loading = false;
                vm.drawPagedSimilarPhoneForPlayerTable(vm.similarPhoneForPlayers, vm.similarPhoneForPlayer.totalCount, newSearch);
            })
        };

        vm.drawPagedSimilarPhoneForPlayerTable = function (data, size, newSearch) {
            let tableData = data ? data.map(item => {
                let remarks = '';
                let breakLine = "<br>";

                if (item.credibilityRemarks && item.credibilityRemarks.length > 0) {
                    item.credibilityRemarks = vm.credibilityRemarks.filter(remark => {
                        return item.credibilityRemarks.includes(remark._id);
                    });
                    item.credibilityRemarks.forEach(function (value, index) {
                        remarks += value.name + breakLine;
                    });
                    item.credibilityRemarksName = remarks;
                } else {
                    item.credibilityRemarksName = "--";
                }
                item.playerLevelName = item.playerLevel ? item.playerLevel.name : "";
                item.lastAccessTime = item.lastAccessTime ? vm.dateReformat(item.lastAccessTime) : "";
                item.registrationTime = item.registrationTime ? vm.dateReformat(item.registrationTime) : "";
                return item;
            }) : [];

            let option = $.extend({}, vm.generalDataTableOptions, {
                data: tableData,
                order: vm.similarPhoneForPlayer.aaSorting || [[5, 'desc']],
                columnDefs: [
                    {'sortCol': 'lastAccessTime', bSortable: true, 'aTargets': [5]},
                    {'sortCol': 'registrationTime', bSortable: true, 'aTargets': [6]},
                    {targets: '_all', defaultContent: ' ', bSortable: false}
                ],
                columns: [
                    {'title': $translate('PLAYER_NAME'), data: 'name'},
                    {'title': $translate('realName'), data: 'realName'},
                    {'title': $translate('PLAYER_VALUE'), data: 'valueScore'},
                    {'title': $translate('CREDIBILITY_REMARK'), data: 'credibilityRemarksName'},
                    {'title': $translate('LEVEL'), data: 'playerLevelName'},
                    {'title': $translate('registrationTime'), data: 'registrationTime'},
                    {'title': $translate('lastAccessTime'), data: 'lastAccessTime'},
                    {'title': $translate('LOGIN_TIMES'), data: 'loginTimes'},
                    {'title': $translate('topUpTimes'), data: 'topUpTimes'},
                ],
                paging: false,
                fnRowCallback: function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                    $compile(nRow)($scope);
                }
            });
            let a = utilService.createDatatableWithFooter('#similarPhoneForPlayerTable', option, {});
            vm.similarPhoneForPlayer.pageObj.init({maxCount: size}, newSearch);

            $('#similarPhoneForPlayerTable').off('order.dt');
            $('#similarPhoneForPlayerTable').on('order.dt', function (event, a, b) {
                vm.commonSortChangeHandler(a, 'similarPhoneForPlayer', vm.getPagedSimilarPhoneForPlayer);
            });
            $("#similarPhoneForPlayerTable").resize();
            $scope.safeApply();
        };

        /**** Similar IP tab ****/
        vm.showPagedSimilarIpForPlayer = function () {
            vm.similarIpForPlayer = {};
            vm.similarIpForPlayer.index = 0;
            vm.similarIpForPlayer.limit = vm.similarIpForPlayer && vm.similarIpForPlayer.limit ? vm.similarIpForPlayer.limit : 50;
            utilService.actionAfterLoaded(('#similarIpForPlayer'), function () {
                vm.similarIpForPlayer.pageObj = utilService.createPageForPagingTable("#similarIpForPlayerTablePage", {pageSize: 50}, $translate, function (curP, pageSize) {
                    vm.commonPageChangeHandler(curP, pageSize, "similarIpForPlayer", vm.getPagedSimilarIpForPlayer)
                });
                vm.getPagedSimilarIpForPlayer(true);
            });
        };

        vm.getPagedSimilarIpForPlayer = function (newSearch) {
            vm.similarIpForPlayer.loading = true;
            let sendQuery = {
                playerId: vm.selectedSinglePlayer._id,
                platformId: vm.selectedSinglePlayer.platform,
                registrationIp: vm.selectedSinglePlayer.loginIps[0] || "",
                index: newSearch ? 0 : vm.similarIpForPlayer.index,
                limit: newSearch ? vm.similarIpForPlayer.limit : (vm.similarIpForPlayer.limit || 50),
                sortCol: {registrationTime: -1},
                isRealPlayer: true,
                admin: 'System',
            };
            socketService.$socket($scope.AppSocket, "getPagedSimilarIpForPlayers", sendQuery, function (data) {
                vm.similarIpForPlayers = data.data.data;
                vm.similarIpForPlayer.totalCount = data.data.total || 0;
                vm.similarIpForPlayer.loading = false;
                vm.drawPagedSimilarIpForPlayerTable(vm.similarIpForPlayers, vm.similarIpForPlayer.totalCount, newSearch);
            })
        };

        vm.drawPagedSimilarIpForPlayerTable = function (data, size, newSearch) {
            let tableData = data ? data.map(item => {
                let remarks = '';
                let breakLine = "<br>";

                if (item.credibilityRemarks && item.credibilityRemarks.length > 0) {
                    item.credibilityRemarks = vm.credibilityRemarks.filter(remark => {
                        return item.credibilityRemarks.includes(remark._id);
                    });
                    item.credibilityRemarks.forEach(function (value, index) {
                        remarks += value.name + breakLine;
                    });
                    item.credibilityRemarksName = remarks;
                } else {
                    item.credibilityRemarksName = "--";
                }
                item.playerLevelName = item.playerLevel ? item.playerLevel.name : "";
                item.lastAccessTime = vm.dateReformat(item.lastAccessTime);
                item.registrationTime = vm.dateReformat(item.registrationTime);
                return item;
            }) : [];

            let option = $.extend({}, vm.generalDataTableOptions, {
                data: tableData,
                order: vm.similarIpForPlayer.aaSorting || [[5, 'desc']],
                columnDefs: [
                    {'sortCol': 'lastAccessTime', bSortable: true, 'aTargets': [5]},
                    {'sortCol': 'registrationTime', bSortable: true, 'aTargets': [6]},
                    {targets: '_all', defaultContent: ' ', bSortable: false}
                ],
                columns: [
                    {'title': $translate('PLAYER_NAME'), data: 'name'},
                    {'title': $translate('realName'), data: 'realName'},
                    {'title': $translate('PLAYER_VALUE'), data: 'valueScore'},
                    {'title': $translate('CREDIBILITY_REMARK'), data: 'credibilityRemarksName'},
                    {'title': $translate('LEVEL'), data: 'playerLevelName'},
                    {'title': $translate('registrationTime'), data: 'registrationTime'},
                    {'title': $translate('lastAccessTime'), data: 'lastAccessTime'},
                    {'title': $translate('LOGIN_TIMES'), data: 'loginTimes'},
                    {'title': $translate('topUpTimes'), data: 'topUpTimes'},
                ],
                paging: false,
                fnRowCallback: function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                    $compile(nRow)($scope);
                }
            });
            let a = utilService.createDatatableWithFooter('#similarIpForPlayerTable', option, {});
            vm.similarIpForPlayer.pageObj.init({maxCount: size}, newSearch);

            $('#similarIpForPlayerTable').off('order.dt');
            $('#similarIpForPlayerTable').on('order.dt', function (event, a, b) {
                vm.commonSortChangeHandler(a, 'similarIpForPlayer', vm.getPagedSimilarIpForPlayer);
            });
            $("#similarIpForPlayerTable").resize();
            $scope.safeApply();
        };
        /**** Similar Player END ****/

        vm.showPlayerInfoModal = function (playerName) {
            vm.showSimilarPlayersTable = false;
            vm.similarPlayersForPlayer = null;
            var watch = $scope.$watch(function () {
                return vm.selectedSinglePlayer
            }, function (newV, oldV) {
                if (newV && newV.name == playerName) {
                    // console.log('newV', newV, oldV);
                    watch();
                    var nowDate = new Date();
                    var playerConsumptionQuery = {
                        startDate: new Date().setDate(nowDate.getDate() - 20),
                        endDate: nowDate,
                        playerId: newV._id,
                        platformId: newV.platform
                    }
                    console.log('playerConsumptionQuery', playerConsumptionQuery);

                    vm.showReferralName = '';
                    socketService.$socket($scope.AppSocket, 'getSimilarPlayers', {
                        playerId: vm.selectedSinglePlayer._id
                    }, function (data) {
                        if (data && data.data.playerId == vm.selectedSinglePlayer.playerId) {
                            let preDistinctCheckData = data.data.similarData;
                            let distinctData = [];
                            for (let i = 0; i < preDistinctCheckData.length; i++) {
                                let duplicate = false;
                                for (let j = 0; j < distinctData.length; j++) {
                                    if (distinctData[j].field === preDistinctCheckData[i].field && JSON.stringify(distinctData[j].playerObjId) === JSON.stringify(preDistinctCheckData[i].playerObjId)) {
                                        duplicate = true;
                                        break;
                                    }
                                }
                                if (duplicate === false) {
                                    distinctData.push(preDistinctCheckData[i]);
                                }
                            }
                            vm.similarPlayersForPlayer = distinctData;
                            console.log("similarPlayers", vm.similarPlayersForPlayer);
                        }
                        $scope.safeApply();
                        vm.updateDataTableinModal('#modalPlayerInfo', '#similarPlayersTable');
                    });
                    if (vm.selectedSinglePlayer.partner) {
                        if (vm.selectedSinglePlayer.partner.partnerName) {
                            vm.selectedSinglePlayer.partnerName = vm.selectedSinglePlayer.partner.partnerName;
                        } else {
                            socketService.$socket($scope.AppSocket, 'getPartner', {_id: vm.selectedSinglePlayer.partner}, function (data) {
                                vm.selectedSinglePlayer.partnerName = data.data.partnerName;
                                $scope.safeApply();
                            })
                        }
                    }
                    if (vm.selectedSinglePlayer.referral) {
                        socketService.$socket($scope.AppSocket, 'getPlayerInfo', {_id: vm.selectedSinglePlayer.referral}, function (data) {
                            vm.showReferralName = data.data.name;
                            $scope.safeApply();
                        });
                    }

                    socketService.$socket($scope.AppSocket, 'checkIPArea', {_id: vm.selectedSinglePlayer._id}, function (data) {
                        $scope.$evalAsync(() => {
                            if(data && data.data){
                                vm.selectedSinglePlayer.city = data.data.city || "";
                                vm.selectedSinglePlayer.province = data.data.province || "";
                            }
                        });
                    });

                    vm.processDataTableinModal('#modalPlayerInfo', '#similarPlayersTable');

                    vm.showProvinceStr = '';
                    vm.showProvinceStr2 = '';
                    vm.showProvinceStr3 = '';
                    vm.showCityStr = '';
                    vm.showCityStr2 = '';
                    vm.showCityStr3 = '';
                    vm.showDistrictStr = '';
                    vm.showDistrictStr2 = '';
                    vm.showDistrictStr3 = '';

                    // for 1st default bank info
                    let sendData = {
                        province1: vm.selectedSinglePlayer.bankAccountProvince || null,
                        city1: vm.selectedSinglePlayer.bankAccountCity || null,
                        district1: vm.selectedSinglePlayer.bankAccountDistrict || null,
                    };

                    // for 2nd and 3rd bank info
                    if (authService.checkViewPermission('Player', 'Player', 'BindMultiplePaymentInformation')) {
                        if (vm.selectedSinglePlayer.multipleBankDetailInfo) {
                            let bankDetails = vm.selectedSinglePlayer.multipleBankDetailInfo;

                            sendData.province2 = bankDetails.bankAccountProvince2 ? bankDetails.bankAccountProvince2 : null;
                            sendData.city2 = bankDetails.bankAccountCity2 ? bankDetails.bankAccountCity2 : null;
                            sendData.district2 = bankDetails.bankAccountDistrict2 ? bankDetails.bankAccountDistrict2 : null;
                            sendData.province3 = bankDetails.bankAccountProvince3 ? bankDetails.bankAccountProvince3 : null;
                            sendData.city3 = bankDetails.bankAccountCity3 ? bankDetails.bankAccountCity3 : null;
                            sendData.district3 = bankDetails.bankAccountDistrict3 ? bankDetails.bankAccountDistrict3 : null;
                        }
                    }

                    socketService.$socket($scope.AppSocket, 'getBankZoneData', sendData, function (retData) {
                        $scope.$evalAsync(() => {
                            console.log('getBankZoneData', retData);
                            let zoneData = retData.data;

                            vm.showProvinceStr = zoneData.province1 || $translate("Unknown");
                            vm.showProvinceStr2 = zoneData.province2 || $translate("Unknown");
                            vm.showProvinceStr3 = zoneData.province3 || $translate("Unknown");
                            vm.showCityStr = zoneData.city1 || $translate("Unknown");
                            vm.showCityStr2 = zoneData.city2 || $translate("Unknown");
                            vm.showCityStr3 = zoneData.city3 || $translate("Unknown");
                            vm.showDistrictStr = zoneData.district1 || $translate("Unknown");
                            vm.showDistrictStr2 = zoneData.district2 || $translate("Unknown");
                            vm.showDistrictStr3 = zoneData.district3 || $translate("Unknown");
                        });
                    });
                }
            });
            $scope.safeApply();
        };

        vm.showPartnerIPHistory = function () {
            socketService.$socket($scope.AppSocket, 'getPartnerIPHistory', {
                partnerId: vm.selectedSinglePartner._id
            }, function (data) {

                vm.partnerIpHistoryData = data.data;
                vm.partnerIpHistoryData.login = vm.partnerIpHistoryData.login.map(item => {
                    item.loginTime$ = vm.dateReformat(item.loginTime);
                    item.country$ = item.country || $translate("Unknown");
                    item.city$ = item.city || $translate("Unknown");
                    item.clientDomain$ = item.clientDomain || $translate("Unknown");
                    return item;
                });
                console.log('vm.partnerIpHistoryData', data);
                var option = $.extend({}, vm.generalDataTableOptions, {
                    data: vm.partnerIpHistoryData.login,
                    columns: [
                        {"title": $translate('lastLoginIp'), data: "loginIP"},
                        {"title": $translate('TIME'), data: "loginTime$"},
                        {"title": $translate('country'), data: "country$"},
                        {"title": $translate('city'), data: "city$"},
                        {"title": $translate('clientDomain'), data: "clientDomain$"},
                    ],
                    sScrollY: 200,
                });
                var a = $('#partnerIpHistoryTable').DataTable(option);
                $scope.safeApply();
                $('#partnerIpHistory').show();
                $('body').on('click', partnerIpHistoryHandler);

                function partnerIpHistoryHandler(event) {
                    var pageClick = $(event.target).closest('#partnerIpHistory').length;//.attr('aria-controls') == 'partnerIpHistoryTable';
                    var tableClick = $(event.target).attr('aria-controls') == 'partnerIpHistoryTable';
                    if (pageClick == 1 || tableClick) {
                        return;
                    }
                    $('#partnerIpHistory').hide();
                    $('body').off('click', partnerIpHistoryHandler);
                }
            });
        };

        vm.createPlayerFromIntention = function (data) {
            vm.prepareCreatePlayer();
            $('#modalCreatePlayer').modal();
            if (!data || !vm.newPlayer) return;
            data.name ? vm.newPlayer.name = data.name : null;
            data.email ? vm.newPlayer.email = data.email : null;
            data.realName ? vm.newPlayer.realName = data.realName : null;
            data.mobile ? vm.newPlayer.phoneNumber = data.mobile : null;
            data.nickName ? vm.newPlayer.nickName = data.nickName : null;
            if (data.referralName) {
                vm.newPlayer.referralName = data.referralName;
                vm.getReferralPlayer(vm.newPlayer, "change");
            }

            $scope.safeApply();
        };

        vm.showIPHistory = function () {
            socketService.$socket($scope.AppSocket, 'getIpHistory', {
                playerId: vm.selectedSinglePlayer._id
            }, function (data) {
                console.log('data', data);
                vm.playerIpHistoryData = data.data;
                vm.playerIpHistoryData.login = vm.playerIpHistoryData.login.map(item => {
                    item.loginTime$ = vm.dateReformat(item.loginTime);
                    item.country$ = item.country || $translate("Unknown");
                    item.city$ = item.city || $translate("Unknown");
                    item.clientDomain$ = item.clientDomain || $translate("Unknown");
                    if (item.hasOwnProperty('osType') && item.osType !== '' && item.userAgent && item.userAgent.hasOwnProperty('os')) {
                        item.userAgent.os = item.osType;
                    }
                    return item;
                });
                var option = $.extend({}, vm.generalDataTableOptions, {
                    data: vm.playerIpHistoryData.login,
                    columns: [
                        {"title": $translate('lastLoginIp'), data: "loginIP"},
                        {"title": $translate('TIME'), data: "loginTime$", sClass: "stdDateCell"},
                        {"title": $translate('country'), data: "country$"},
                        {"title": $translate('city'), data: "city$"},
                        {"title": $translate('OS'), data: "userAgent.os"},
                        {"title": $translate('Browser'), data: "userAgent.browser"},
                        {"title": $translate('clientDomain'), data: "clientDomain$"},
                    ],
                    sScrollY: 200,
                });
                var a = $('#playerIpHistoryTable').DataTable(option);
                $('#playerIpHistoryTable').resize();
                a.columns.adjust().draw();
                $scope.safeApply();
                $('#playerIpHistory').show();
                $('body').on('click', playerIpHistoryHandler);

                function playerIpHistoryHandler(event) {
                    var pageClick = $(event.target).closest('#playerIpHistory').length;//.attr('aria-controls') == 'playerIpHistoryTable';
                    var tableClick = $(event.target).attr('aria-controls') == 'playerIpHistoryTable';
                    if (pageClick == 1 || tableClick) {
                        return;
                    }
                    $('#playerIpHistory').hide();
                    $('body').off('click', playerIpHistoryHandler);
                }
            });
        };

        vm.sendMessageToPlayerBtn = function (type, data) {
            vm.telphonePlayer = data;
            $('#messagePlayerModal').modal('show');

            vm.getSelectedRowPlatformDetails(data);
        };

        vm.callNewPlayerBtn = function (phoneNumber, data) {

            //vm.getSMSTemplate();
            var phoneCall = {
                playerId: data.playerId,
                name: data.name,
                toText: data.playerName ? data.playerName : data.name,
                platform: "jinshihao",
                loadingNumber: true,
            }
            $scope.initPhoneCall(phoneCall);
            $scope.phoneCall.phone = phoneNumber;
            $scope.phoneCall.loadingNumber = false;
            $scope.makePhoneCall(vm.selectedPlatform.data.platformId);
        }
        vm.smsNewPlayerBtn = function (phoneNumber, data) {
            //vm.getSMSTemplate();
            vm.selectedSinglePlayer = data;
            vm.editPlayer = data.data ? data.data : "";
            vm.selectedPlayersCount = 1
            vm.smsPlayer = {
                playerId: data.playerId,
                name: data.name,
                nickName: data.nickName || '',
                platformId: vm.selectedPlatform.data.platformId,
                channel: $scope.channelList[0],
                hasPhone: phoneNumber
            }
            vm.sendSMSResult = {};
            $scope.safeApply();
            $('#smsPlayerModal').modal('show');
        };

        vm.telorMessageToPlayerBtn = function (type, playerObjId, data) {
            // var rowData = JSON.parse(data);
            console.log(type, data);
            //vm.getSMSTemplate();
            var title, text;
            if (type == 'msg' && authService.checkViewPermission('Player', 'Player', 'sendSMS')) {
                vm.smstpl = "";
                vm.smsPlayer = {
                    playerId: playerObjId.playerId,
                    name: playerObjId.name,
                    nickName: playerObjId.nickName,
                    platformId: vm.selectedPlatform.data.platformId,
                    // channel: $scope.channelList[0],
                    hasPhone: playerObjId.phoneNumber
                }

                vm.smsPlayer.channel = null;
                if ($scope.usableChannelList && $scope.usableChannelList.length > 0) {
                    if ($scope.usableChannelList.includes(4)) {
                        vm.smsPlayer.channel = 4; //set default sms channel
                    } else {
                        vm.smsPlayer.channel = $scope.usableChannelList[0];
                    }
                }
                vm.sendSMSResult = {};
                $scope.safeApply();
                $('#smsPlayerModal').modal('show');
                vm.showSmsTab(null);
            } else if (type == 'tel') {
                vm.getSelectedRowPlatformDetails(data);
                var phoneCall = {
                    playerId: data.playerId,
                    name: data.name,
                    toText: data.playerName ? data.playerName : data.name,
                    platform: "jinshihao",
                    loadingNumber: true,
                }
                $scope.initPhoneCall(phoneCall);
                socketService.$socket($scope.AppSocket, 'getPlayerPhoneNumber', {playerObjId: playerObjId}, function (data) {
                    $scope.phoneCall.phone = data.data;
                    $scope.phoneCall.loadingNumber = false;
                    $scope.safeApply();
                    $scope.makePhoneCall(vm.selectedPlatform.data.platformId);
                }, function (err) {
                    $scope.phoneCall.loadingNumber = false;
                    $scope.phoneCall.err = err.error.message;
                    alert($scope.phoneCall.err);
                    $scope.safeApply();
                }, true);
            }
        };

        vm.callDemoPlayer = function (data) {
            var phoneCall = {
                // playerId: "5a74167afe96b103da96f5fc",//data.playerId,
                name: $translate("demoPlayer"),
                toText: $translate("demoPlayer"),
                platform: "jinshihao",
                loadingNumber: true,
            }
            $scope.initPhoneCall(phoneCall);
            $scope.phoneCall.phone = data.tel;
            $scope.phoneCall.loadingNumber = false;
            $scope.safeApply();
            $scope.makePhoneCall(vm.selectedPlatform.data.platformId);
        }

        vm.sendSMSToPlayer = function () {
            vm.sendSMSResult = {sent: "sending"};

            if (vm.smsPlayer.playerId == '') {
                return $scope.sendSMSToNewPlayer(vm.smsPlayer, function (data) {
                    vm.sendSMSResult = {sent: true, result: data.success};
                    $scope.safeApply();
                });
            } else {
                return $scope.sendSMSToPlayer(vm.smsPlayer, function (data) {
                    vm.sendSMSResult = {sent: true, result: data.success};
                    $scope.safeApply();
                });
            }
        };


        //player datatable row click handler
        vm.playerTableRowClicked = function (rowData) {
            var deferred = Q.defer();
            console.log('player', rowData);
            vm.selectedPlayers = {};
            vm.selectedPlayers[rowData._id] = rowData;
            vm.selectedSinglePlayer = rowData;
            vm.currentSelectedPlayerObjId = '';

            var sendData = {_id: rowData._id};
            socketService.$socket($scope.AppSocket, 'getOnePlayerInfo', sendData, function (retData) {
                $scope.$evalAsync(() => {
                    var player = retData.data;
                    console.log('updated info');
                    if (!vm.selectedSinglePlayer) return;
                    if (player._id != vm.selectedSinglePlayer._id) {
                        console.log('click rowId is not equal to resultId');
                        //the result should be same with the click , if some condition like network not stable ,
                        //then we would rather use the pre-load data.
                        return;
                    }
                    vm.currentSelectedPlayerObjId = player._id;
                    vm.selectedPlayers[player._id] = player;
                    vm.selectedSinglePlayer = player;
                    vm.editPlayer = {
                        name: vm.selectedSinglePlayer.name,
                        email: vm.selectedSinglePlayer.email,
                        realName: vm.selectedSinglePlayer.realName,
                        nickName: vm.selectedSinglePlayer.nickName,
                        gameCredit: vm.selectedSinglePlayer.gameCredit,
                        gold: vm.selectedSinglePlayer.gold,
                        phoneNumber: vm.selectedSinglePlayer.phoneNumber,
                        partner: vm.selectedSinglePlayer.partner,
                        receiveSMS: vm.selectedSinglePlayer.receiveSMS,
                        bankCardGroup: vm.selectedSinglePlayer.bankCardGroup,
                        merchantGroup: vm.selectedSinglePlayer.merchantGroup,
                        alipayGroup: vm.selectedSinglePlayer.alipayGroup,
                        wechatPayGroup: vm.selectedSinglePlayer.wechatPayGroup,
                        quickPayGroup: vm.selectedSinglePlayer.quickPayGroup,
                        trustLevel: vm.selectedSinglePlayer.trustLevel,
                        photoUrl: vm.selectedSinglePlayer.photoUrl,
                        playerLevel: vm.selectedSinglePlayer.playerLevel ? vm.selectedSinglePlayer.playerLevel._id : null,
                        referral: vm.selectedSinglePlayer.referral,
                        smsSetting: vm.selectedSinglePlayer.smsSetting,
                        gender: vm.selectedSinglePlayer.gender,
                        DOB: vm.selectedSinglePlayer.DOB,
                        accAdmin: vm.selectedSinglePlayer.accAdmin
                    };
                    vm.selectedSinglePlayer.encodedBankAccount =
                        vm.selectedSinglePlayer.bankAccount ?
                            vm.selectedSinglePlayer.bankAccount.slice(0, 6) + "**********" + vm.selectedSinglePlayer.bankAccount.slice(-4)
                            : null;
                    if (vm.selectedSinglePlayer.multipleBankDetailInfo) {
                        vm.selectedSinglePlayer.multipleBankDetailInfo.encodedBankAccount2 =
                            vm.selectedSinglePlayer.multipleBankDetailInfo.bankAccount2 ?
                                vm.selectedSinglePlayer.multipleBankDetailInfo.bankAccount2.slice(0, 6) + "**********" + vm.selectedSinglePlayer.multipleBankDetailInfo.bankAccount2.slice(-4)
                                : null;
                        vm.selectedSinglePlayer.multipleBankDetailInfo.encodedBankAccount3 =
                            vm.selectedSinglePlayer.multipleBankDetailInfo.bankAccount3 ?
                                vm.selectedSinglePlayer.multipleBankDetailInfo.bankAccount3.slice(0, 6) + "**********" + vm.selectedSinglePlayer.multipleBankDetailInfo.bankAccount3.slice(-4)
                                : null;
                    }

                    // Fix partnerName disappeared on second load
                    if (!vm.selectedSinglePlayer.partnerName) {
                        if (vm.selectedSinglePlayer.partner) {
                            vm.selectedSinglePlayer.partnerName = vm.selectedSinglePlayer.partner.partnerName;
                        }
                    }

                    if (vm.selectedSinglePlayer.sourceUrl && vm.selectedSinglePlayer.sourceUrl.length > 35) {
                        vm.selectedSinglePlayer.$displaySourceUrl = vm.selectedSinglePlayer.sourceUrl.substring(0, 30) + "...";
                    } else {
                        vm.selectedSinglePlayer.$displaySourceUrl = vm.selectedSinglePlayer.sourceUrl || null;
                    }

                    if (vm.selectedSinglePlayer.domain && vm.selectedSinglePlayer.domain.length > 35) {
                        vm.selectedSinglePlayer.$displayDomain = vm.selectedSinglePlayer.domain.substring(0, 30) + "...";
                    } else {
                        vm.selectedSinglePlayer.$displayDomain = vm.selectedSinglePlayer.domain || null;
                    }

                    vm.selectedSinglePlayer = utilService.determineRegistrationDevice(vm.selectedSinglePlayer);

                })
                deferred.resolve();
            }, function (err) {
                vm.selectedPlayers = {};
                vm.selectedPlayers[rowData._id] = rowData;
                vm.selectedSinglePlayer = rowData;
                deferred.resolve();
            })
            return deferred.promise;
        };

        vm.prepareCreatePlayer = function () {
            vm.playerDOB = utilService.createDatePicker('#datepickerDOB', {
                language: 'en',
                format: 'yyyy/MM/dd',
                maxDate: new Date()
            });
            vm.existPhone = false;
            vm.existRealName = false;
            vm.newPlayer = {};
            vm.newPlayer.gender = "true";
            vm.duplicateNameFound = false;
            vm.euPrefixNotExist = false;
            $('.referralValidTrue').hide();
            $('.referralValidFalse').hide();
            $('.hitReferralLimit').hide();
            vm.newPlayer.domain = window.location.hostname;
            vm.getReferralPlayer(vm.newPlayer, "new");
            vm.playerCreateResult = null;
            vm.playerPswverify = null;

            vm.phoneDuplicate = {totalCount: 0};
            vm.phoneDuplicate.pageObj = utilService.createPageForPagingTable("#samePhoneNumTablePage", {}, $translate, function (curP, pageSize) {
                vm.commonPageChangeHandler(curP, pageSize, "phoneDuplicate", vm.loadPhoneNumberRecord)
            });
            vm.getAllPromoteWay();
        }
        vm.editPlayerStatus = function (id) {
            console.log(id);
        }

        vm.isOneSelectedPlayer = function () {
            return vm.selectedSinglePlayer;
        };

        vm.isOneSelectedPartner = function () {
            return vm.selectedSinglePartner;
        };

        //check if delete player button can be enabled
        vm.canDeletePlayers = function () {
            if (vm.selectedPlayers) {
                for (var key in vm.selectedPlayers) {
                    if (vm.selectedPlayers[key]) {
                        return true;
                    }
                }
            }
            return false;
        };

        //check if update player button can be enabled
        vm.canEditPlayer = function () {
            return vm.isOneSelectedPlayer();
        };

        vm.checkPlayerNameValidity = function (name, form, type) {
            if (!name) return;
            // vm.euPrefixNotExist = false;
            vm.wrongPrefix = false;
            if (type == 'edit' && name == vm.selectedSinglePlayer.name) {
                vm.duplicateNameFound = false;
                return;
            }

            // if (type !== 'edit' && vm.selectedPlatform.data.name === "EU8" && name && name.charAt(0) !== "e") {
            //     vm.euPrefixNotExist = true;
            // }
            // form.$setValidity('euPrefixNotExist', !vm.euPrefixNotExist);

            let platformObjId = vm.selectedPlatform.id;
            if(form && form.$name == "form_new_player" && vm.newPlayer && vm.newPlayer.platform){
                platformObjId = vm.newPlayer.platform;

                if (type !== 'edit') {
                    let platformData = vm.allPlatformData.find(platform => platform._id == platformObjId);
                    if (platformData.prefix && !name.startsWith(platformData.prefix)) {
                        vm.wrongPrefix = true;
                    }
                }
            }
            form.$setValidity('wrongPrefix', !vm.wrongPrefix);
            $scope.safeApply();

            if (vm.wrongPrefix) {
                return;
            }

            socketService.$socket($scope.AppSocket, 'checkPlayerNameValidity', {
                platform: platformObjId,
                name: name
            }, function (data) {
                if (data && data.data.isPlayerNameValid == false) {
                    vm.duplicateNameFound = true;
                } else if (data && data.data.isPlayerNameValid) {
                    vm.duplicateNameFound = false;
                }
                form.$setValidity('usedPlayerName', !vm.duplicateNameFound);
                $scope.safeApply();
            }, function (err) {
                console.log('err', err);
            }, true);
        }

        vm.checkAdminNameValidity = ((adminName) => {
            if (!adminName || adminName == '') {
                return
            }

            socketService.$socket($scope.AppSocket, 'getAdminInfo', {adminName: adminName}, function (data) {
                $scope.$evalAsync(() => {
                    if (!data || !data.data) {
                        vm.isAdminNameValidity = true;
                    } else {
                        if (data.data._id) {
                            vm.csOfficer = data.data._id;
                        }
                        vm.isAdminNameValidity = false;
                    }
                })
            });
        })

        //check if enable player button is active
        vm.canEnablePlayer = function () {
            var selectedPlayer = vm.isOneSelectedPlayer();
            return selectedPlayer ? !selectedPlayer.status : false;
        };

        var _ = {
            clone: function (obj) {
                return $.extend({}, obj);
            }
        };

        vm.commonPageChangeHandler = function (curP, pageSize, objKey, searchFunc) {
            var isChange = false;
            if (!curP) {
                curP = 1;
            }
            if (pageSize != vm[objKey].limit) {
                isChange = true;
                vm[objKey].limit = pageSize;
            }
            if ((curP - 1) * pageSize != vm[objKey].index) {
                isChange = true;
                vm[objKey].index = (curP - 1) * pageSize;
            }
            if (isChange) return searchFunc.call(this);
        };

        //check if value is pass in before data table function is call
        vm.onClickPlayerCheck = function (recordId, callback, param, row) {
            if (!(param instanceof Array)) {
                param = param ? [param] : [];
            }

            if(row){
                param.push(row);
            }

            if (vm.currentSelectedPlayerObjId && recordId === vm.currentSelectedPlayerObjId) {
                callback.apply(null, param);
            }
            else {
                setTimeout(function () {
                    vm.onClickPlayerCheck(recordId, callback, param);
                }, 50);
            }
        };


        vm.openEditPlayerDialog = function (selectedTab, row) {
            vm.editSelectedTab = "";
            vm.editSelectedTab = selectedTab ? selectedTab.toString() : "basicInfo";
            vm.prepareEditCritical('player');
            vm.prepareEditPlayerPayment();
            vm.prepareEditPlayerPayment2();
            vm.prepareEditPlayerPayment3();

            if(row){
                let platformObjId = row && row.platform ? row.platform : "";
                vm.getSelectedRowPlatformDetails(row);
                vm.setPlayerLevelAccordingByPlatformId(platformObjId);
                Promise.all([vm.loadBankCardGroupData(), vm.loadMerchantGroupData(), vm.loadAlipayGroupData(), vm.loadWechatPayGroupData()]).then(
                    () => {
                        dialogDetails();
                    }
                );
            }else{
                dialogDetails();
            }

            function dialogDetails() {
                let selectedPlayer = vm.isOneSelectedPlayer();   // ~ 20 fields!
                let editPlayer = vm.editPlayer;                  // ~ 6 fields
                vm.editPlayer.DOB = vm.editPlayer.DOB? new Date(vm.editPlayer.DOB): null;
                let allPartner = vm.partnerIdObj;
                let allPlayerLevel = vm.allPlayerLvl;

                let option = {
                    $scope: $scope,
                    $compile: $compile,
                    childScope: {
                        // vm: vm,
                        playerTopUpGroupQuery: {
                            index: 0,
                            limit: 10
                        },
                        isChangeLogTableInitiated: false,
                        playerTopUpGroupLog: vm.playerTopUpGroupLog,
                        editPlayerPermission: $scope.checkViewPermission('Player', 'Player', 'Edit'),
                        editContactPermission: $scope.checkViewPermission('Player', 'Player', 'EditContact'),
                        editWithdrawPermission: $scope.checkViewPermission('Player', 'Player', 'PaymentInformation'),
                        editMultipleWithdrawPermission: $scope.checkViewPermission('Player', 'Player', 'BindMultiplePaymentInformation'),
                        selectedTab: vm.editSelectedTab,
                        modifyCritical: vm.modifyCritical,
                        verifyPlayerPhoneNumber: vm.verifyPlayerPhoneNumber,
                        correctVerifyPhoneNumber: vm.correctVerifyPhoneNumber,
                        platformPageName: vm.platformPageName,
                        prepareEditCritical: vm.prepareEditCritical,
                        submitCriticalUpdate: vm.submitCriticalUpdate,
                        isEditingPlayerPayment: vm.isEditingPlayerPayment,
                        isEditingPlayerPayment2: vm.isEditingPlayerPayment2,
                        isEditingPlayerPayment3: vm.isEditingPlayerPayment3,
                        playerPayment: vm.playerPayment,
                        playerPayment2: vm.playerPayment2,
                        playerPayment3: vm.playerPayment3,
                        allBankTypeList: vm.allBankTypeList,
                        filteredBankTypeList: vm.filteredBankTypeList,
                        filterBankName: vm.filterBankName,
                        filterBankname: vm.filterBankname,
                        isEditingPlayerPaymentShowVerify: vm.isEditingPlayerPaymentShowVerify,
                        correctVerifyBankAccount: vm.correctVerifyBankAccount,
                        currentProvince: vm.currentProvince,
                        currentProvince2: vm.currentProvince2,
                        currentProvince3: vm.currentProvince3,
                        provinceList: vm.provinceList,
                        provinceList2: vm.provinceList2,
                        provinceList3: vm.provinceList3,
                        changeProvince: vm.changeProvince,
                        changeProvince2: vm.changeProvince2,
                        changeProvince3: vm.changeProvince3,
                        currentCity: vm.currentCity,
                        currentCity2: vm.currentCity2,
                        currentCity3: vm.currentCity3,
                        cityList: vm.cityList,
                        cityList2: vm.cityList2,
                        cityList3: vm.cityList3,
                        changeCity: vm.changeCity,
                        changeCity2: vm.changeCity2,
                        changeCity3: vm.changeCity3,
                        currentDistrict: vm.currentDistrict,
                        currentDistrict2: vm.currentDistrict2,
                        currentDistrict3: vm.currentDistrict3,
                        districtList: vm.districtList,
                        districtList2: vm.districtList2,
                        districtList3: vm.districtList3,
                        verifyBankAccount: vm.verifyBankAccount,
                        verifyPlayerBankAccount: vm.verifyPlayerBankAccount,
                        updatePlayerPayment: vm.updatePlayerPayment,
                        deletePlayerPayment: vm.deletePlayerPayment,
                        today: new Date().toISOString(),
                        allPlayerLevel: allPlayerLevel,
                        allPartner: allPartner,
                        playerId: selectedPlayer._id,
                        playerBeforeEditing: _.clone(editPlayer),
                        playerBeingEdited: _.clone(editPlayer),
                        topUpGroupRemark: "",
                        platformBankCardGroupList: vm.platformBankCardGroupList,
                        platformMerchantGroupList: vm.platformMerchantGroupList,
                        platformAlipayGroupList: vm.platformAlipayGroupList,
                        platformWechatPayGroupList: vm.platformWechatPayGroupList,
                        platformQuickPayGroupList: vm.platformQuickPayGroupList,
                        isIdInList: commonService.isIdInList,
                        //vm.platformCreditTransferLog.endTime.data('datetimepicker').setDate(utilService.setLocalDayEndTime(new Date()));
                        updateEditedPlayer: function () {

                            // this ng-model has to be in date object
                            if (this.playerBeingEdited.DOB) {
                                this.playerBeingEdited.DOB = new Date(this.playerBeingEdited.DOB);
                            }
                            sendPlayerUpdate(this.playerId, this.playerBeforeEditing, this.playerBeingEdited, this.topUpGroupRemark, selectedPlayer.permission);
                        },
                        checkPlayerNameValidity: function (a, b, c) {
                            vm.checkPlayerNameValidity(a, b, c);
                        },
                        duplicateNameFound: function () {
                            return vm.duplicateNameFound;
                        },
                        showReferralLimitMsg: function () {
                            return vm.showReferralLimitMsg;
                        },
                        checkDuplicatedBankAccount: function (playerPaymentData){

                            if (playerPaymentData.newBankAccount == selectedPlayer.bankAccount){
                                playerPaymentData.invalid = false;
                                playerPaymentData.showAlert = false;
                            }
                            else {
                                if (playerPaymentData.newBankAccount && playerPaymentData.newBankAccount.length) {

                                    socketService.$socket($scope.AppSocket, 'checkDuplicatedBankAccount', {
                                        bankAccount: playerPaymentData.newBankAccount,
                                        platform: vm.isOneSelectedPlayer().platform || vm.selectedPlatform.id,
                                        playerObjId: selectedPlayer._id
                                    }, function (data) {
                                        if (data && data.data === true) {
                                            if (playerPaymentData.newBankAccount.length >= 16 && playerPaymentData.newBankAccount.length <= 19) {
                                                playerPaymentData.invalid = false;
                                                if (playerPaymentData.newBankAccount.match(/[a-z]/i)){
                                                    playerPaymentData.invalid = true;
                                                }
                                            }
                                            else {
                                                playerPaymentData.invalid = true;
                                            }

                                            playerPaymentData.alertMsg = null;
                                            playerPaymentData.duplicatePlayerName = null;
                                            playerPaymentData.showAlert = false;
                                            $scope.$evalAsync();

                                        }
                                        else {
                                            playerPaymentData.showAlert = true;
                                            playerPaymentData.invalid = false;
                                            playerPaymentData.alertMsg = "Bank account has been bind with another player";
                                            playerPaymentData.duplicatePlayerName = ` ${data.data.player}`;
                                            $scope.$evalAsync();
                                        }

                                    })
                                }
                                else {
                                    playerPaymentData.invalid = false;
                                    playerPaymentData.showAlert = false;
                                }
                            }
                        },
                        initTopUpGroupChangeLog: function () {
                            let cvm = this;
                            utilService.actionAfterLoaded(".topupGroupRecordTablePage", function () {
                                cvm.playerTopUpGroupQuery.pageObj = utilService.createPageForPagingTable(".topupGroupRecordTablePage", {}, $translate, function (curP, pageSize) {
                                    var isChange = false;
                                    if (pageSize != cvm.playerTopUpGroupQuery.limit) {
                                        isChange = true;
                                        cvm.playerTopUpGroupQuery.limit = pageSize;
                                    }
                                    if ((curP - 1) * pageSize != cvm.playerTopUpGroupQuery.index) {
                                        isChange = true;
                                        cvm.playerTopUpGroupQuery.index = (curP - 1) * pageSize;
                                    }
                                    if (isChange) return cvm.getPlayerTopUpGroupChangeLog(cvm.playerTopUpGroupQuery.index, cvm.playerTopUpGroupQuery.limit);
                                });
                            });
                        },
                        getPlayerTopUpGroupChangeLog: function (index, limit) {
                            let cvm = this;
                            let playerId = cvm.playerId;
                            let query = {
                                playerId,
                                index,
                                limit
                            };

                            if (!cvm.isChangeLogTableInitiated) {
                                cvm.isChangeLogTableInitiated = true;
                                cvm.initTopUpGroupChangeLog();
                            }

                            $scope.$socketPromise('getPlayerTopUpGroupLog', query).then(function (data) {
                                    // socketService.$socket($scope.AppSocket, 'getPlayerTopUpGroupLog', query, function (data) {
                                    // it is a change log for topup group
                                    // let singleLog = data.data[i]
                                    // vm.playerTopUpGroupLog.length = 0;
                                    cvm.drawChangeLogTable(data.data.data.map(log => {
                                        console.log(log);
                                        log.createTime = $scope.timeReformat(new Date(log.createTime));
                                        log.topUpGroupNames$ = Object.keys(log.topUpGroupNames)[0];
                                        log.topUpGroupChanges = log.topUpGroupNames[Object.keys(log.topUpGroupNames)[0]];


                                        return log;
                                    }), data.data.size, index, limit)
                                },
                                function (err) {
                                    console.log(err);
                                });
                        },
                        drawChangeLogTable: function (tableData, size, index, limit) {
                            let cvm = this;
                            let tableOptions = {
                                data: tableData,
                                order: [[2, 'desc']],
                                columns: [
                                    {title: $translate('OPERATOR_NAME'), data: "admin.adminName"},
                                    {
                                        title: $translate('Topup Group'),
                                        data: "topUpGroupNames$",
                                        sClass: "realNameCell wordWrap",
                                        render: function (data, type, row) {
                                            return $translate(data);
                                        }
                                    },
                                    {title: $translate('TIME'), data: "createTime"},
                                    {title: $translate("OPERATOR_ACTION"), data: "topUpGroupChanges"},
                                    {title: $translate("remark"), data: "remark"},
                                ],
                                "paging": false,
                                "dom": 'Zrtlp',
                                "autoWidth": true,
                                "scrollX": true,
                                "scrollCollapse": true,
                                "destroy": true,
                                "language": {
                                    "emptyTable": $translate("No data available in table"),
                                },
                            };

                            if ($('.dataTables_scrollHeadInner > .topupGroupRecordTable').length > 0) {
                                $(".topupGroupRecordTable").parent().parent().parent().remove();
                                $(".topupGroupRecordTablePage").before('<table class="topupGroupRecordTable common-table display" style="width:100%"></table>')
                            }

                            $(".topupGroupRecordTablePage").show();

                            utilService.createDatatableWithFooter('.topupGroupRecordTable', tableOptions, {});
                            cvm.playerTopUpGroupQuery.pageObj.init({maxCount: size}, false);
                            $scope.$evalAsync();
                        },
                        checkAdminNameValidity: function (adminName, form) {
                            vm.checkAdminNameValidity(adminName, form);
                            return vm.isAdminNameValidity;
                        },
                        checkIsPhoneNumberExist: vm.checkIsPhoneNumberExist,
                        duplicatedPhoneErr: vm.duplicatedPhoneErr
                    }
                };

                option.childScope.prepareEditPlayerPayment = function () {
                    vm.prepareEditPlayerPayment();
                    this.isEditingPlayerPayment = vm.isEditingPlayerPayment;
                    this.playerPayment = vm.playerPayment;
                    this.allBankTypeList = vm.allBankTypeList;
                    this.filteredBankTypeList = vm.filteredBankTypeList;
                    this.filterBankName = vm.filterBankName;
                    this.isEditingPlayerPaymentShowVerify = vm.isEditingPlayerPaymentShowVerify;
                    this.correctVerifyBankAccount = vm.correctVerifyBankAccount;
                    this.verifyBankAccount = "";
                    this.topUpGroupRemark = "";
                };
                option.childScope.prepareEditPlayerPayment2 = function () {
                    vm.prepareEditPlayerPayment2();
                    this.isEditingPlayerPayment2 = vm.isEditingPlayerPayment2;
                    this.playerPayment2 = vm.playerPayment2;
                    this.allBankTypeList = vm.allBankTypeList;
                    this.filteredBankTypeList = vm.filteredBankTypeList;
                    this.filterBankName = vm.filterBankName;
                    this.isEditingPlayerPaymentShowVerify = vm.isEditingPlayerPaymentShowVerify;
                    this.correctVerifyBankAccount = vm.correctVerifyBankAccount;
                    this.verifyBankAccount = "";
                    this.topUpGroupRemark = "";
                };
                option.childScope.prepareEditPlayerPayment3 = function () {
                    vm.prepareEditPlayerPayment3();
                    this.isEditingPlayerPayment3 = vm.isEditingPlayerPayment3;
                    this.playerPayment3 = vm.playerPayment3;
                    this.allBankTypeList = vm.allBankTypeList;
                    this.filteredBankTypeList = vm.filteredBankTypeList;
                    this.filterBankName = vm.filterBankName;
                    this.isEditingPlayerPaymentShowVerify = vm.isEditingPlayerPaymentShowVerify;
                    this.correctVerifyBankAccount = vm.correctVerifyBankAccount;
                    this.verifyBankAccount = "";
                    this.topUpGroupRemark = "";
                };

                let debounceGetReferralPlayer = $scope.debounce(function refreshReferral() {
                    return vm.getReferralPlayer(option.childScope.playerBeingEdited, "change");
                }, 500);

                let debounceGetPartnerInPlayer = $scope.debounce(function (form) {
                    return vm.getPartnerinPlayer(option.childScope.playerBeingEdited, "change", form);
                }, 500, false);

                option.childScope.playerBeforeEditing.smsSetting = _.clone(editPlayer.smsSetting);
                option.childScope.playerBeingEdited.smsSetting = _.clone(editPlayer.smsSetting);
                option.childScope.changeReferral = function () {
                    debounceGetReferralPlayer();
                };
                option.childScope.changePartner = function (form) {
                    form.$setValidity('validPartner', false);
                    debounceGetPartnerInPlayer(form);
                };

                vm.partnerChange = false;
                $('.referralValidTrue').hide();
                $('.referralValidFalse').hide();
                $('.hitReferralLimit').hide();
                $('.partnerValidTrue').hide();
                $('.partnerValidFalse').hide();
                $('#dialogEditPlayer').floatingDialog(option);
                $('#dialogEditPlayer').focus();
                vm.getReferralPlayer(option.childScope.playerBeingEdited, "new");
                vm.getPartnerinPlayer(option.childScope.playerBeingEdited, "new");
            };

            $(".topupGroupRecordTablePage").hide();

            if ($('.dataTables_scrollHeadInner > .topupGroupRecordTable').length > 0) {
                $(".topupGroupRecordTable").parent().parent().parent().remove();
                $(".topupGroupRecordTablePage").before('<table class="topupGroupRecordTable common-table display" style="width:100%"></table>')
            }
        };

        vm.loadSMSSettings = function () {
            let selectedPlayer = vm.isOneSelectedPlayer();   // ~ 20 fields!
            let editPlayer = vm.editPlayer;                  // ~ 6 fields
            vm.playerBeingEdited = {
                smsSetting: editPlayer.smsSetting,
                receiveSMS: editPlayer.receiveSMS
            };
        };

        function getPlayerLevelName(levelObjId) {
            for (var i = 0; i < vm.allPlayerLvl.length; i++) {
                if (vm.allPlayerLvl[i]._id == levelObjId) {
                    return vm.allPlayerLvl[i].name;
                }
            }
        };

        function getPlayerLevelTier(levelObjId) {
            for (var i = 0; i < vm.allPlayerLvl.length; i++) {
                if (vm.allPlayerLvl[i]._id == levelObjId) {
                    return i;
                }
            }
        };

        vm.getReferralPlayer = function (editObj, type) {
            var sendData = null;
            if (type === 'change' && editObj.referralName) {
                sendData = {name: editObj.referralName}
                if(editObj.platform){
                    sendData.platform = editObj.platform;
                }
                //In edit: playerName will be selected player name.
                //In create: playerName will be new player name.
                if(editObj.name){
                    sendData.playerName = editObj.name;
                }
            } else if (type === 'new' && editObj.referral) {
                sendData = {_id: editObj.referral}
            }
            if (sendData) {
                // sendData.platform = (vm.selectedSinglePlayer && vm.selectedSinglePlayer.platform) || vm.selectedPlatform.id;
                socketService.$socket($scope.AppSocket, 'getReferralPlayerInfo', sendData, function (retData) {
                    var player = retData.data;
                    if (player && player.name !== editObj.name) {
                        $('.dialogEditPlayerSubmitBtn').removeAttr('disabled');
                        $('.referralValidTrue').show();
                        $('.referralValidFalse').hide();
                        $('.hitReferralLimit').hide();
                        editObj.referral = player._id;
                        editObj.referralName = player.name;
                        if (type === 'new') {
                            $('.referralValue').val(player.name);
                        }
                    } else {
                        $('.dialogEditPlayerSubmitBtn').attr('disabled', true);
                        $('.referralValidTrue').hide();
                        $('.referralValidFalse').show();
                        editObj.referral = null;
                    }

                    if (player && player.isHitReferralLimit) {
                        $('.hitReferralLimit').show();
                    } else {
                        $('.hitReferralLimit').hide();
                    }
                })
            } else {
                $('.dialogEditPlayerSubmitBtn').removeAttr('disabled');
                $('.referralValidTrue').hide();
                $('.referralValidFalse').hide();
                $('.hitReferralLimit').hide();
                editObj.referral = null;
            }
        };

        vm.getPartnerinPlayer = function (editObj, type, form) {
            var sendData = null;
            if (editObj.partnerName == '') {
                editObj.partner = null;
                $('.partnerValidTrue').hide();
                $('.partnerValidFalse').hide();
                $scope.$evalAsync(() => {
                    form.$setValidity('validPartner', true);
                });
                return;
            }
            if (type === 'change' && editObj.partnerName) {
                sendData = {partnerName: editObj.partnerName}
            } else if (type === 'new' && editObj.partner) {
                sendData = {_id: editObj.partner}
            }
            if (sendData) {
                sendData.platform = vm.selectedPlatform.id;
                console.log('getPartner sendData', sendData)
                socketService.$socket($scope.AppSocket, 'getPartner', sendData, function (retData) {
                    console.log('getPartner', retData)
                    var partner = retData.data;
                    if (partner && partner.name !== editObj.name) {
                        $('.partnerValidTrue').show();
                        $('.partnerValidFalse').hide();
                        editObj.partner = partner._id;
                        editObj.partnerName = partner.partnerName;
                        if (type === 'new') {
                            $('.partnerValue').val(partner.partnerName);
                        }
                        $scope.$evalAsync(() => {
                            form.$setValidity('validPartner', true);
                        });
                    } else {
                        $('.partnerValidTrue').hide();
                        $('.partnerValidFalse').show();
                        editObj.partner = null;
                    }
                })
            } else {
                $('.partnerValidTrue').hide();
                $('.partnerValidFalse').hide();
                editObj.partner = null;
            }
        };

        function buildTopUpGroupChangesString(updateData, oldData) {
            var bankGroup = {};
            var oldGroupName = "";
            if (updateData.bankCardGroup) {
                for (let i = 0; i < vm.platformBankCardGroupList.length; i++) {
                    if (oldData.bankCardGroup == vm.platformBankCardGroupList[i]._id)
                        oldGroupName = vm.platformBankCardGroupList[i].displayName;
                    if (updateData.bankCardGroup == vm.platformBankCardGroupList[i]._id)
                        bankGroup.bankCardGroup = vm.platformBankCardGroupList[i].displayName;
                }
                bankGroup.bankCardGroup = oldGroupName + " -> " + bankGroup.bankCardGroup;
            }
            if (updateData.merchantGroup) {
                for (let i = 0; i < vm.platformMerchantGroupList.length; i++) {
                    if (oldData.merchantGroup == vm.platformMerchantGroupList[i]._id)
                        oldGroupName = vm.platformMerchantGroupList[i].displayName;
                    if (updateData.merchantGroup == vm.platformMerchantGroupList[i]._id)
                        bankGroup.merchantGroup = vm.platformMerchantGroupList[i].displayName;
                }
                bankGroup.merchantGroup = oldGroupName + " -> " + bankGroup.merchantGroup;
            }
            if (updateData.alipayGroup) {
                for (let i = 0; i < vm.platformAlipayGroupList.length; i++) {
                    if (oldData.alipayGroup == vm.platformAlipayGroupList[i]._id)
                        oldGroupName = vm.platformAlipayGroupList[i].displayName;
                    if (updateData.alipayGroup == vm.platformAlipayGroupList[i]._id)
                        bankGroup.alipayGroup = vm.platformAlipayGroupList[i].displayName;
                }
                bankGroup.alipayGroup = oldGroupName + " -> " + bankGroup.alipayGroup;
            }
            if (updateData.wechatPayGroup) {
                for (let i = 0; i < vm.platformWechatPayGroupList.length; i++) {
                    if (oldData.wechatPayGroup == vm.platformWechatPayGroupList[i]._id)
                        oldGroupName = vm.platformWechatPayGroupList[i].displayName;
                    if (updateData.wechatPayGroup == vm.platformWechatPayGroupList[i]._id)
                        bankGroup.wechatPayGroup = vm.platformWechatPayGroupList[i].displayName;
                }
                bankGroup.wechatPayGroup = oldGroupName + " -> " + bankGroup.wechatPayGroup;
            }
            if (updateData.quickPayGroup) {
                for (let i = 0; i < vm.platformQuickPayGroupList.length; i++) {
                    if (oldData.quickPayGroup == vm.platformQuickPayGroupList[i]._id)
                        oldGroupName = vm.platformQuickPayGroupList[i].displayName;
                    if (updateData.quickPayGroup == vm.platformQuickPayGroupList[i]._id)
                        bankGroup.quickPayGroup = vm.platformQuickPayGroupList[i].displayName;
                }
                bankGroup.quickPayGroup = oldGroupName + " -> " + bankGroup.quickPayGroup;
            }
            return bankGroup;
        }

        function sendPlayerUpdate(playerId, oldPlayerData, newPlayerData, topUpGroupRemark, playerPermission) {
            if (playerPermission.levelChange === false && newPlayerData.playerLevel != oldPlayerData.playerLevel) {
                newPlayerData.playerLevel = oldPlayerData.playerLevel;
                socketService.showErrorMessage($translate("level change fail, please contact cs"));
                return;
            }
            oldPlayerData.partner = oldPlayerData.partner ? oldPlayerData.partner._id : null;
            var updateData = newAndModifiedFields(oldPlayerData, newPlayerData);
            let updateDataPartner = {};
            let updateDataLevel = {};
            let updateDataAccAdmin = {};
            let updatedKeys = Object.keys(updateData);
            var updateSMS = {
                receiveSMS: updateData.receiveSMS != null ? updateData.receiveSMS : undefined,
                smsSetting: updateData.smsSetting ? updateData.smsSetting : undefined
            }
            var updateBankData = {};
            delete updateData.smsSetting;
            delete updateData.receiveSMS;

            var updateReferralName;
            if (newPlayerData["referral"] != oldPlayerData["referral"]) {
                updateReferralName = updateData.referralName;
            } else {
                delete updateData.referralName;
            }

            if (!updateData.partner) {
                delete updateData.partnerName;
            }
            if (Object.keys(updateData).length > 0) {
                updateData._id = playerId;
                var isUpdate = false;
                let isUpdatePlayerInfoPartner = false;
                let isUpdatePlayerInfoLevel = false;
                let isUpdatePlayerAccAdmin = false;
                var isRealName = false;
                let realNameObj = {
                    playerName: newPlayerData.name || vm.editPlayer.name,
                    playerObjId: playerId
                };

                updateData.playerName = newPlayerData.name || vm.editPlayer.name;
                // compare newplayerData & oldPlayerData, if different , update it , exclude bankgroup
                // Object.keys(newPlayerData).forEach(function (key) {
                updatedKeys.forEach(function (key) {
                    // if (newPlayerData[key] != oldPlayerData[key]) {
                    if (key == "smsSetting" || key == "bankCardGroup" || key == "alipayGroup" || key == "wechatPayGroup" || key == "merchantGroup" || key == "quickPayGroup" || key == "referralName") {
                        //do nothing
                    } else if (key == "partnerName" && oldPlayerData.partner == newPlayerData.partner) {
                        //do nothing
                    } else if(key == "realName"){
                        isRealName = true;
                        realNameObj.realName = updateData.realName;
                        delete updateData.realName;
                    } else{
                        isUpdate = true;
                    }
                    // }
                });

                if (updateData.partner == null) {
                    updateData.partnerName = '';
                }

                if (updateData.partnerName) {
                    updateDataPartner._id = updateData._id;
                    updateDataPartner.playerName = updateData.playerName;
                    updateDataPartner.oldPartnerName = vm.editPlayer.partner && vm.editPlayer.partner.partnerName ? vm.editPlayer.partner.partnerName : '';
                    updateDataPartner.newPartnerName = updateData.partnerName;
                    updateDataPartner.partner = updateData.partner;
                    updateDataPartner.remark = $translate("partner");
                    isUpdatePlayerInfoPartner = true;
                    isUpdate = false;
                }

                if (updateData.playerLevel) {
                    updateDataLevel._id = updateData._id;
                    updateDataLevel.playerName = updateData.playerName;
                    updateDataLevel.oldLevelName = getPlayerLevelName(vm.editPlayer.playerLevel);
                    updateDataLevel.newLevelName = getPlayerLevelName(updateData.playerLevel);
                    updateDataLevel.oldLevelTier = getPlayerLevelTier(vm.editPlayer.playerLevel);
                    updateDataLevel.newLevelTier = getPlayerLevelTier(updateData.playerLevel);
                    if (updateDataLevel.hasOwnProperty('oldLevelTier') && updateDataLevel.hasOwnProperty('newLevelTier')){
                        updateDataLevel.upOrDown = updateDataLevel.newLevelTier > updateDataLevel.oldLevelTier ? 'LEVEL_UP' : 'LEVEL_DOWN';
                    }
                    updateDataLevel.playerLevel = updateData.playerLevel;
                    updateDataLevel.remark = $translate("PLAYER_LEVEL");
                    isUpdatePlayerInfoLevel = true;
                    isUpdate = false;
                }

                if (updateData.accAdmin && vm.csOfficer) {
                    updateDataAccAdmin._id = updateData._id;
                    updateDataAccAdmin.playerName = updateData.playerName;
                    updateDataAccAdmin.csOfficer = vm.csOfficer;
                    updateDataAccAdmin.oldAccAdmin = vm.editPlayer.accAdmin ? vm.editPlayer.accAdmin : '';
                    updateDataAccAdmin.newAccAdmin = updateData.accAdmin;
                    updateDataAccAdmin.accAdmin = updateData.accAdmin;
                    updateDataAccAdmin.remark = $translate("AdminName");
                    isUpdatePlayerAccAdmin = true;
                    isUpdate = false;
                }

                // if (updateData.bankCardGroup == 'NULL') {
                //     updateData.bankCardGroup = undefined;
                //     // updateData["$unset"] = {bankCardGroup: null};
                //     // delete updateData.bankCardGroup;
                // }
                // if (updateData.merchantGroup == 'NULL') {
                //     updateData.merchantGroup = undefined;
                //     // updateData["$unset"] = {merchantGroup: null};
                //     // delete updateData.merchantGroup;
                // }
                if (updateData.bankCardGroup) {
                    updateBankData.bankCardGroup = updateData.bankCardGroup;
                }
                if (updateData.merchantGroup) {
                    updateBankData.merchantGroup = updateData.merchantGroup;
                }
                if (updateData.alipayGroup) {
                    updateBankData.alipayGroup = updateData.alipayGroup;
                }
                if (updateData.wechatPayGroup) {
                    updateBankData.wechatPayGroup = updateData.wechatPayGroup;
                }
                if (updateData.quickPayGroup) {
                    updateBankData.quickPayGroup = updateData.quickPayGroup;
                }
                delete updateData.bankCardGroup;
                delete updateData.merchantGroup;
                delete updateData.alipayGroup;
                delete updateData.quickPayGroup;

                updateData.remark = "";
                if (updateData.referralName) {
                    if (updateData.remark) {
                        updateData.remark += ", ";
                    }
                    isUpdate = true;
                    updateData.remark += $translate("REFERRAL");
                }
                if (updateData.DOB) {
                    if (updateData.remark) {
                        updateData.remark += ", ";
                    }
                    isUpdate = true;
                    updateData.remark += $translate("DOB");
                }
                if (updateData.hasOwnProperty("gender")) {
                    if (updateData.remark) {
                        updateData.remark += ", ";
                    }
                    isUpdate = true;
                    updateData.remark += $translate("GENDER");
                }

                if (isUpdate) {
                    socketService.$socket($scope.AppSocket, 'createUpdatePlayerInfoProposal', {
                        creator: {type: "admin", name: authService.adminName, id: authService.adminId},
                        data: updateData,
                        platformId: (vm.selectedSinglePlayer && vm.selectedSinglePlayer.platform) || vm.selectedPlatform.id
                    }, function (data) {
                        if (data.data && data.data.stepInfo) {
                            socketService.showProposalStepInfo(data.data.stepInfo, $translate);
                        }
                        vm.getPlatformPlayersData();
                    }, null, true);
                }

                if (isUpdatePlayerInfoPartner) {
                    socketService.$socket($scope.AppSocket, 'createUpdatePlayerInfoPartnerProposal', {
                        creator: {type: "admin", name: authService.adminName, id: authService.adminId},
                        data: updateDataPartner,
                        platformId: (vm.selectedSinglePlayer && vm.selectedSinglePlayer.platform) || vm.selectedPlatform.id
                    }, function (data) {
                        if (data.data && data.data.stepInfo) {
                            socketService.showProposalStepInfo(data.data.stepInfo, $translate);
                        }
                        vm.getPlatformPlayersData();
                    }, null, true);
                }

                if (isUpdatePlayerInfoLevel) {
                    socketService.$socket($scope.AppSocket, 'createUpdatePlayerInfoLevelProposal', {
                        creator: {type: "admin", name: authService.adminName, id: authService.adminId},
                        data: updateDataLevel,
                        platformId: (vm.selectedSinglePlayer && vm.selectedSinglePlayer.platform) || vm.selectedPlatform.id,
                        playerId: vm.isOneSelectedPlayer().playerId
                    }, function (data) {
                        if (data.data && data.data.stepInfo) {
                            socketService.showProposalStepInfo(data.data.stepInfo, $translate);
                        }
                        vm.getPlatformPlayersData();
                    }, null, true);
                }

                if (isUpdatePlayerAccAdmin) {
                    socketService.$socket($scope.AppSocket, 'createUpdatePlayerInfoAccAdminProposal', {
                        creator: {type: "admin", name: authService.adminName, id: authService.adminId},
                        data: updateDataAccAdmin,
                        platformId: (vm.selectedSinglePlayer && vm.selectedSinglePlayer.platform) || vm.selectedPlatform.id
                    }, function (data) {
                        if (data.data && data.data.stepInfo) {
                            socketService.showProposalStepInfo(data.data.stepInfo, $translate);
                        }
                        vm.getPlatformPlayersData();
                    }, null, true);
                }

                if(isRealName && realNameObj && realNameObj.realName){
                    socketService.$socket($scope.AppSocket, 'createUpdatePlayerRealNameProposal', {
                        creator: {type: "admin", name: authService.adminName, id: authService.adminId},
                        data: realNameObj,
                        platformId: (vm.selectedSinglePlayer && vm.selectedSinglePlayer.platform) || vm.selectedPlatform.id,
                        playerId: vm.isOneSelectedPlayer().playerId
                    }, function (data) {
                        if (data.data && data.data.stepInfo) {
                            socketService.showProposalStepInfo(data.data.stepInfo, $translate);
                        }
                        vm.getPlatformPlayersData();
                    }, null, true);
                }
            }
            if (Object.keys(updateBankData).length > 0) {
                socketService.$socket($scope.AppSocket, 'updatePlayer', {
                    query: {_id: playerId},
                    updateData: updateBankData
                }, function (updated) {
                    console.log('updated', updated);
                    vm.getPlatformPlayersData();
                    let queryData = {
                        playerId: playerId,
                        remark: topUpGroupRemark,
                        adminId: authService.adminId,
                        topUpGroup: buildTopUpGroupChangesString(updateBankData, oldPlayerData)
                    };
                    socketService.$socket($scope.AppSocket, 'createUpdateTopUpGroupLog', queryData, function (created) {
                        console.log('top up group log created', created);
                    });
                });
            }
            if (Object.keys(updateSMS).length > 0) {
                socketService.$socket($scope.AppSocket, 'updatePlayer', {
                    query: {_id: playerId},
                    updateData: updateSMS
                }, function (updated) {
                    console.log('updated', updated);
                    vm.getPlatformPlayersData();
                });
            }
            // if (updateReferralName) {
            //     socketService.$socket($scope.AppSocket, 'updatePlayerReferral', {
            //         playerObjId: playerId,
            //         referral: updateReferralName
            //     }, function (updated) {
            //         console.log('updated', updated);
            //         vm.getPlatformPlayersData();
            //     });
            // }
        }

        vm.smsSettingToggleSelectAll = function () {
            let status = vm.playerBeingEdited.smsSettingSelectAll;
            for (let type in vm.allMessageTypes) {
                let settingName = vm.allMessageTypes[type].name;
                if (settingName != "smsVerificationCode") {
                    vm.playerBeingEdited.smsSetting[settingName] = status;
                }
            }
        };
        vm.smsSettingSetSelectAll = function () {
            for (let type in vm.allMessageTypes) {
                let settingName = vm.allMessageTypes[type].name;
                if (settingName != "smsVerificationCode" && !vm.playerBeingEdited.smsSetting[settingName]) {
                    vm.playerBeingEdited.smsSettingSelectAll = false;
                    return;
                }
            }
            vm.playerBeingEdited.smsSettingSelectAll = true;
        };

        vm.updateSMSSettings = function () {
            //oldPlayerData.partner = oldPlayerData.partner ? oldPlayerData.partner._id : null;
            let playerId = vm.isOneSelectedPlayer()._id;

            var updateSMS = {
                receiveSMS: vm.playerBeingEdited.receiveSMS != null ? vm.playerBeingEdited.receiveSMS : undefined,
                smsSetting: vm.playerBeingEdited.smsSetting,
            }

            socketService.$socket($scope.AppSocket, 'updatePlayer', {
                query: {_id: playerId},
                updateData: updateSMS
            }, function (updated) {
                console.log('updated', updated);
                vm.getPlatformPlayersData();
            });

        };

        /// check the length of password of player/partner before signup
        vm.passwordLengthCheck = function (password) {
            if (password) {
                return password.length < 6;
            }
            else return false;
        }

        //check if disable player button is active
        vm.canDisablePlayer = function () {
            var selectedPlayer = vm.isOneSelectedPlayer();
            return selectedPlayer ? selectedPlayer.status : false;
        };
        //Create new player
        vm.createNewPlayer = function () {
            vm.newPlayer.platformId = vm.getPlatformIdFromByObjId(vm.newPlayer.platform);

            let calendarDate = $('#datepickerDOB input').val();
            if (calendarDate) {
                vm.newPlayer.DOB = vm.playerDOB.data('datetimepicker').getLocalDate();
                vm.newPlayer.DOB = vm.newPlayer.DOB.toISOString();
            } else {
                vm.newPlayer.DOB = null;
            }

            vm.newPlayer.gender = (vm.newPlayer.gender && vm.newPlayer.gender == "true") ? true : false;
            vm.newPlayer.isFromBackstage = Boolean(true);
            console.log('newPlayer', vm.newPlayer);
            if (vm.newPlayer.createPartner) {
                socketService.$socket($scope.AppSocket, 'createPlayerPartner', vm.newPlayer, function (data) {
                    vm.playerCreateResult = data;
                    vm.getPlatformPlayersData();
                    vm.displayPhoneError(data.status);
                    $scope.safeApply();
                }, function (err) {
                    vm.playerCreateResult = err;
                    console.log('createPlayerDataError', err);
                    vm.displayPhoneError(err.status);
                    if (err.status && err.status == 454) {
                        vm.existPhone = true;
                    }
                    $scope.safeApply();
                });
            } else {
                socketService.$socket($scope.AppSocket, 'createPlayer', vm.newPlayer, function (data) {
                    let receiveSMS = Boolean(vm.newPlayer && vm.newPlayer.receiveSMS);
                    vm.createPlayerRegistrationIntentRecord(data, receiveSMS);
                    vm.playerCreateResult = data;
                    vm.getPlatformPlayersData();
                    vm.displayPhoneError(data.status);
                    $scope.safeApply();
                }, function (err) {
                    vm.playerCreateResult = err;
                    console.log('createPlayerDataError', err);
                    vm.displayPhoneError(err.error.status);

                    $scope.safeApply();
                });
            }
        };

        vm.getPlatformIdFromByObjId = function(platformObjId){
            let currentPlatform = vm.allPlatformData.filter(a => a._id.toString() == platformObjId.toString());

            if(currentPlatform && currentPlatform.length && currentPlatform[0].platformId){
                return currentPlatform[0].platformId;
            }

            return null;
        };

        vm.displayPhoneError = function (status) {
            if (status && status == 454) {
                vm.existPhone = true;
            } else {
                vm.existPhone = false;
            }
        }
        vm.createPlayerRegistrationIntentRecord = function (data, isReceiveSMS = true) {

            var intentData = {
                adminInfo: {
                    type: "admin",
                    name: authService.adminName,
                    id: authService.adminId
                },
                name: data.data.name,
                realName: data.data.realName,
                password: data.data.password,
                platformId: data.data.platformId,
                domain: data.data.domain,
                phoneNumber: data.data.phoneNumber,
                email: data.data.email,
                smsCode: "",
                lastLoginIp: data.data.lastLoginIp,
                loginIps: data.data.loginIps,
                userAgent: data.data.userAgent,
                phoneProvince: data.data.phoneProvince,
                phoneCity: data.data.phoneCity,
                phoneType: data.data.phoneType,
                partnerId: data.data.partnerId,
                isOnline: data.data.isOnline,
                playerObjId: data.data._id,
                playerId: data.data.playerId,
                remarks: data.data.partnerName ? $translate("PARTNER") + ": " + data.data.partnerName : "",
                status: vm.constProposalStatus.MANUAL,
                platform: data.data.platform,
                isReceiveSMS: isReceiveSMS
            };

            socketService.$socket($scope.AppSocket, 'createPlayerRegistrationIntentRecord', intentData, function (data) {
                console.log('player registration intent record created', data);
            }, function (err) {
                console.log('player registration intent record creation failed', err);
            });
        }

        vm.showPartnerSelectModal = function (editingObj) {
            vm.showPartnerFilterLevel = null;
            vm.showPartnerFilterName = null;
            $('#modalSelectPartner').modal();
            $('#modalSelectPartner').on('hidden.bs.modal', function (event) {
                if ($('.modal.in').length > 0) {
                    $("body").addClass('modal-open');
                }
                editingObj.partner = vm.parterSelectedforPlayer ? vm.parterSelectedforPlayer._id : null;
                $scope.safeApply();
            });
            vm.showPartners = vm.partners ? vm.partners.map(item => {
                item.parent$ = item.partnerName ? item.partnerName : '';
                item.children$ = item.children.length;
                item.registrationTime$ = vm.dateReformat(item.registrationTime);
                item.level$ = $translate(item.level.name);
                item.lastAccessTime$ = vm.dateReformat(item.lastAccessTime);
                item.validPlayers$ = vm.partnerPlayerObj[item._id] ? vm.partnerPlayerObj[item._id].validPlayers : 0;
                item.activePlayers$ = vm.partnerPlayerObj[item._id] ? vm.partnerPlayerObj[item._id].activePlayers : 0;
                return item;
            }) : [];

            vm.drawSelectPartnerTable(vm.showPartners, editingObj);
            $scope.safeApply();
        };

        vm.drawSelectPartnerTable = function (data, obj) {
            let tableOptions = {
                data: data,
                columnDefs: [{targets: '_all', defaultContent: ' '}],
                aaSorting: [],
                columns: [
                    {title: $translate('PARTNER_ID'), data: 'partnerId', advSearch: true, "sClass": "alignLeft"},
                    {
                        title: $translate('PARTNER_NAME'),
                        data: "partnerName",
                        advSearch: true,
                        "sClass": "alignLeft",
                    },
                    {
                        title: $translate('REAL_NAME'), data: "realName", orderable: false,
                        advSearch: true, "sClass": "alignLeft wordWrap realNameCell"
                    },
                    {
                        title: $translate('PARENT'),
                        data: 'parent$',
                        orderable: false,
                    },
                    {
                        title: $translate('CHILDREN'),
                        data: 'children$',
                    },
                    {
                        title: $translate('REFERRAL_PLAYER'), data: 'totalReferrals',
                        "sClass": "alignRight"
                    },
                    {
                        title: $translate('CREDIT'),
                        data: 'credits'
                    },
                    {
                        title: $translate('REGISTRATION_TIME'), data: 'registrationTime$',
                    },
                    {
                        title: $translate('PARTNER_LEVEL_SHORT'),
                        data: 'level$',
                        "sClass": "alignLeft"
                    },
                    {
                        title: $translate('LAST_ACCESS_TIME'), data: 'lastAccessTime$',
                    },
                    {
                        title: $translate('LAST_LOGIN_IP'), orderable: false,
                        data: 'lastLoginIp'
                    },
                    {
                        title: $translate('ACTIVE_PLAYER'), data: 'activePlayers$',
                        "sClass": "alignRight"
                    },
                    {
                        title: $translate('VALID_PLAYER'), data: 'validPlayers$',
                        "sClass": "alignRight"
                    },
                    {title: $translate('VALID_REWARD'), data: 'validReward', "sClass": "alignRight"},
                ],
                "autoWidth": true,
                "scrollX": true,
                // "scrollY": "480px",
                "scrollCollapse": true,
                "destroy": true,
                "paging": true,
                "language": {
                    "info": $translate("Total _MAX_ partners"),
                    "emptyTable": $translate("No data available in table"),
                },
                "dom": 'Zirtlp',
                fnRowCallback: function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                    // Row click
                    if (aData._id == obj.partner) {
                        $(this).addClass('selected');
                        vm.parterSelectedforPlayer = aData;
                    }
                    $(nRow).off('click');
                    $(nRow).on('click', function () {
                        $('#partnerSelectTable tbody tr').removeClass('selected');
                        $(this).toggleClass('selected');
                        vm.parterSelectedforPlayer = aData;
                        vm.partnerChange = true;
                        $('body').data('partner')
                        console.log('partner selected', vm.parterSelectedforPlayer);
                        // $('#partnerInEditPlayer').text(aData.partnerName);
                        $scope.safeApply();
                    });
                }
            };
            vm.partnerSelectTable = $('#partnerSelectTable').DataTable(tableOptions);
            utilService.setDataTablePageInput('partnerSelectTable', vm.partnerSelectTable, $translate);
            $('#partnerSelectTable').resize();
            $('#partnerSelectTable').resize();
        };

        vm.clearPartnerSelection = function () {
            $('#partnerSelectTable tbody tr').removeClass('selected');
            vm.parterSelectedforPlayer = null;
            vm.partnerChange = true;
            $scope.safeApply();
        }
        vm.showPartnerFilterChange = function () {
            var newData = vm.showPartners.filter(item => {
                var toShow = true;
                if (vm.showPartnerFilterLevel && item.level.value != vm.showPartnerFilterLevel) {
                    toShow = false;
                } else if (vm.showPartnerFilterName && item.partnerName.indexOf(vm.showPartnerFilterName) == -1) {
                    toShow = false;
                }
                return toShow;
            });
            vm.partnerSelectTable.clear();
            newData.forEach(function (rowData) {
                vm.partnerSelectTable.row.add(rowData);
            });
            vm.partnerSelectTable.draw();
            $scope.safeApply();
        }

        vm.createTrialPlayerAccount = function () {
            //createTestPlayerForPlatform
            socketService.$socket($scope.AppSocket, 'createDemoPlayer', {platformId: vm.testPlayerPlatform}, function (data) {
                vm.createtrail = data.data;
                vm.testPlayerName = data.data.playerData.name;
                vm.testPlayerPassword = data.data.playerData.password;
                console.log('testaccount', data);
                $scope.safeApply();
                //$('#modalTestPlayer').modal();
                vm.getPlatformPlayersData();
            });
        };

        vm.initResetPlayerPasswordModal = () => {
            vm.customNewPassword = "888888";
            vm.playerNewPassword = "";
            vm.resetPartnerNewPassword = false;
        };

        vm.initPlayerCredibility = () => {
            vm.credibilityRemarkComment = "";
            vm.credibilityRemarkUpdateMessage = "";
            vm.somePlayerRemarksRemoved = false;
            vm.playerCredibilityRemarksUpdated = false;
            vm.prepareCredibilityConfig().then(
                () => {
                    $scope.$evalAsync(() => {
                        if (!vm.selectedSinglePlayer.credibilityRemarks) {
                            return;
                        }

                        let playerRemarksId = vm.selectedSinglePlayer.credibilityRemarks;
                        for (let i = 0; i < playerRemarksId.length; i++) {
                            for (let j = 0; j < vm.credibilityRemarks.length; j++) {
                                if (playerRemarksId[i] === vm.credibilityRemarks[j]._id) {
                                    vm.credibilityRemarks[j].selected = true;
                                }
                            }
                        }
                        vm.getPlayerCredibilityComment();
                  });
                }
            );
        };

        vm.checkAnyPlayerRemarkRemoved = () => {
            let playerRemarksId = vm.selectedSinglePlayer.credibilityRemarks;
            for (let i = 0; i < playerRemarksId.length; i++) {
                for (let j = 0; j < vm.credibilityRemarks.length; j++) {
                    if (playerRemarksId[i] === vm.credibilityRemarks[j]._id) {
                        if (vm.credibilityRemarks[j].selected !== true) {
                            vm.somePlayerRemarksRemoved = true;
                            return;
                        }
                        break;
                    }
                }
            }
            vm.somePlayerRemarksRemoved = false;
        };

        vm.submitRemarkUpdate = () => {
            let selectedRemarks = [];
            for (let i = 0; i < vm.credibilityRemarks.length; i++) {
                if (vm.credibilityRemarks[i].selected === true) {
                    selectedRemarks.push(vm.credibilityRemarks[i]._id);
                }
            }

            let sendQuery = {
                admin: authService.adminName,
                platformObjId: vm.selectedSinglePlayer.platform,
                playerObjId: vm.selectedSinglePlayer._id,
                remarks: selectedRemarks,
                comment: vm.credibilityRemarkComment
            };

            socketService.$socket($scope.AppSocket, "updatePlayerCredibilityRemark", sendQuery, function (data) {
                vm.playerCredibilityRemarksUpdated = true;
                vm.credibilityRemarkUpdateMessage = "SUCCESS";
                vm.getPlatformPlayersData();
                $scope.safeApply();
            }, function (error) {
                vm.playerCredibilityRemarksUpdated = true;
                vm.credibilityRemarkUpdateMessage = error.error.message;
                $scope.safeApply();
            });
        };


        vm.submitResetPlayerPassword = function () {
            console.log('here', {_id: vm.isOneSelectedPlayer()._id});

            let queryObj = {
                playerId: vm.isOneSelectedPlayer()._id,
                platform: vm.isOneSelectedPlayer().platform,
                newPassword: vm.customNewPassword,
                creator: {type: "admin", name: authService.adminName, id: authService.adminId},
            };

            if (vm.resetPartnerNewPassword) {
                queryObj.resetPartnerPassword = true;
            }

            socketService.$socket($scope.AppSocket, 'resetPlayerPassword', queryObj, function (data) {
                console.log('password', data);
                vm.playerNewPassword = data.data;
                $scope.safeApply();
            });
        };
        //get player credit change log

        vm.showPagedPlayerCreditChangeLog = function () {
            $('#modalPlayerCreditChangeLog').modal().show();
            vm.playerCreditChangeLog = {};
            vm.playerCreditChangeLog.type = 'none';
            vm.playerCreditChangeLog.index = 0;
            vm.playerCreditChangeLog.limit = vm.playerCreditChangeLog && vm.playerCreditChangeLog.limit ? vm.playerCreditChangeLog.limit : 50;
            utilService.actionAfterLoaded(('#playerCreditChangeLog .endTime'), function () {
                vm.playerCreditChangeLog.startTime = utilService.createDatePicker('#playerCreditChangeLog .startTime');
                vm.playerCreditChangeLog.endTime = utilService.createDatePicker('#playerCreditChangeLog .endTime');
                vm.playerCreditChangeLog.startTime.data('datetimepicker').setDate(utilService.setLocalDayStartTime(utilService.setNDaysAgo(new Date(), 1)));
                vm.playerCreditChangeLog.endTime.data('datetimepicker').setDate(utilService.setLocalDayEndTime(new Date()));
                vm.playerCreditChangeLog.pageObj = utilService.createPageForPagingTable("#playerCreditChangeLogTablePage", {pageSize: 50}, $translate, function (curP, pageSize) {
                    vm.commonPageChangeHandler(curP, pageSize, "playerCreditChangeLog", vm.getPagedPlayerCreditChangeLog)
                });
                vm.getPagedPlayerCreditChangeLog(true);
            });
        }

        vm.getPagedPlayerCreditChangeLog = function (newSearch) {
            vm.playerCreditChangeLog.loading = true;
            let sendQuery = {
                playerId: vm.isOneSelectedPlayer()._id,
                startTime: vm.playerCreditChangeLog.startTime.data('datetimepicker').getLocalDate(),
                endTime: vm.playerCreditChangeLog.endTime.data('datetimepicker').getLocalDate(),
                type: vm.playerCreditChangeLog.type,
                index: newSearch ? 0 : vm.playerCreditChangeLog.index,
                limit: newSearch ? vm.playerCreditChangeLog.limit : (vm.playerCreditChangeLog.limit || 50),
                sortCol: vm.playerCreditChangeLog.sortCol,
            };
            socketService.$socket($scope.AppSocket, "getPagedPlayerCreditChangeLogs", sendQuery, function (data) {
                vm.playerCreditChangeLogs = vm.processCreditChangeLogData(data.data.data);
                vm.playerCreditChangeLog.totalCount = data.data.total || 0;
                vm.playerCreditChangeLog.totalChanged = data.data.totalChanged || 0;
                vm.playerCreditChangeLog.loading = false;
                vm.drawPagedCreditChangeQueryTable(vm.playerCreditChangeLogs, vm.playerCreditChangeLog.totalCount, vm.playerCreditChangeLog.totalChanged, newSearch);
            })
        };

        vm.drawPagedCreditChangeQueryTable = function (data, size, totalChangedAmount, newSearch) {
            let tableData = data.map(item => {
                item.createTime$ = vm.dateReformat(item.operationTime);
                item.operationType$ = $translate(item.operationType);
                item.beforeAmount = item.curAmount - item.amount;
                if (item.beforeAmount < 0) {
                    item.beforeAmount = 0
                }
                item.beforeAmount = $noRoundTwoDecimalPlaces(item.beforeAmount);
                item.beforeUnlockedAmount = item.lockedAmount - item.changedLockedAmount;
                item.beforeUnlockedAmount = $noRoundTwoDecimalPlaces(item.beforeUnlockedAmount);
                let remark = (item.data && item.data.remark) ? $translate('remark') + ':' + item.data.remark + ', ' : '';
                item.details$ = remark + item.detail.join(', ');
                item.proposalId$ = item.data ? item.data.proposalId : '';
                item.totalAmountBefore$ = $noRoundTwoDecimalPlaces((Number(item.beforeAmount) + Number(item.beforeUnlockedAmount))) + "(" + item.beforeAmount + "/" + item.beforeUnlockedAmount + ")";
                item.totalAmountAfter$ = $noRoundTwoDecimalPlaces((Number(item.curAmount) + Number(item.lockedAmount))) + "(" + item.curAmount + "/" + item.lockedAmount + ")";
                item.totalChangedAmount$ = $noRoundTwoDecimalPlaces((Number(item.amount) + Number(item.changedLockedAmount))) + "(" + item.amount + "/" + item.changedLockedAmount + ")";

                if (item.operationType == 'OnlineTopUp' && item.data && item.data.amount && item.data.actualAmountReceived) {
                    let serviceChargeFee = $noRoundTwoDecimalPlaces(item.data.amount - item.data.actualAmountReceived) >= 0 ? $noRoundTwoDecimalPlaces(item.data.amount - item.data.actualAmountReceived) : 0;

                    item.totalChangedAmount$ = $noRoundTwoDecimalPlaces((Number(item.amount) + Number(item.changedLockedAmount))) + "(" + item.data.amount + "/" + item.changedLockedAmount + ")";
                    item.totalAmountAfter$ = $noRoundTwoDecimalPlaces((Number(item.curAmount) + Number(item.lockedAmount))) + "(" + $noRoundTwoDecimalPlaces(Number(item.curAmount) + serviceChargeFee) + "/" + item.lockedAmount + ")";
                }

                return item;
            });

            let option = $.extend({}, vm.generalDataTableOptions, {
                data: tableData,
                order: vm.playerCreditChangeLog.aaSorting || [[0, 'desc']],
                columnDefs: [
                    {'sortCol': 'operationTime', bSortable: true, 'aTargets': [0]},
                    {'sortCol': 'operationType', bSortable: true, 'aTargets': [1]},
                    // {'sortCol': 'registrationTime', bSortable: true, 'aTargets': [4]},
                    {targets: '_all', defaultContent: ' ', bSortable: false}
                ],
                columns: [
                    {'title': $translate('CREATE_TIME'), data: 'createTime$'},
                    {'title': $translate('Type'), data: 'operationType$', sClass: "wordWrap width10Per"},
                    {
                        'title': $translate('LOCAL_TOTAL_AMOUNT_BEFORE'),
                        data: 'totalAmountBefore$',
                        sClass: "sumText wordWrap"
                    },
                    {
                        'title': $translate('AMOUNT_CHANGE'),
                        data: 'totalChangedAmount$',
                        sClass: "sumFloat textRight",
                        render: function (data, type, row) {
                            var link = $('<span>', {
                                'class': ((Number(row.amount) + Number(row.changedLockedAmount)) < 0 ? "text-danger" : "")
                            }).text(data);
                            return link.prop('outerHTML');

                        }
                    },
                    {'title': $translate('LOCAL_TOTAL_AMOUNT_AFTER'), data: 'totalAmountAfter$', sClass: "wordWrap"},
                    {
                        'title': $translate('View Details'),
                        data: 'details$',
                        sClass: "wordWrap width30Per",
                        render: function (data, type, row) {
                            if (row.proposalId$) {
                                let proposalText = row.operationType == 'OnlineTopUp' ? $translate('PROPOSAL_NO') + ": " + row.proposalId$ + "/" + $translate('Actual Amount') + ": " + row.amount : $translate('PROPOSAL_NO') + ": " + row.proposalId$;
                                var link = $('<a>', {
                                    'ng-click': 'vm.showProposalModalNoObjId("' + row.proposalId$ + '",1)'

                                }).text(proposalText);
                                return link.prop('outerHTML');
                            } else {
                                let details = "";
                                for (let i = 0; i < Object.keys(row.data).length; i++) {
                                    if (Object.keys(row.data)[i] == "transferId" || Object.keys(row.data)[i] == "providerName") {
                                        if (details)
                                            details += "/ ";
                                        details += $translate(Object.keys(row.data)[i]) + ": " + row.data[Object.keys(row.data)[i]];
                                    }
                                }
                                return details;
                            }
                        }
                    }

                    // {'title': $translate('CREATE_TIME'), data: 'createTime$'},
                    // {'title': $translate('Type'), data: 'operationType$', sClass: "wordWrap width10Per"},
                    // {'title': $translate('PROPOSAL_ID'), data: 'proposalId$', sClass: "tbodyNoWrap"},
                    // {'title': $translate('Before Amount'), data: 'beforeAmount', sClass: "sumText wordWrap"},
                    // {'title': $translate('CHANGE_AMOUNT'), data: 'amount', sClass: "sumFloat tbodyNoWrap"},
                    // {'title': $translate('CUR_AMOUNT'), data: 'curAmount', sClass: "tbodyNoWrap"},
                    // {
                    //     'title': $translate('Before UnlockedAmount'),
                    //     data: 'beforeUnlockedAmount',
                    //     sClass: "tbodyNoWrap"
                    // },
                    // {
                    //     'title': $translate('Change UnlockedAmount'),
                    //     data: 'changedLockedAmount',
                    //     sClass: "tbodyNoWrap"
                    // },
                    // {'title': $translate('UNLOCKAMOUNT'), data: 'lockedAmount', sClass: "tbodyNoWrap"},
                    // {'title': $translate('View Details'), data: 'details$', sClass: "wordWrap width30Per"}
                ],
                paging: false,
                fnRowCallback: function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                    $compile(nRow)($scope);
                }
            });
            var a = utilService.createDatatableWithFooter('#playerCreditChangeLogTable', option, {
                3: totalChangedAmount
            });
            vm.playerCreditChangeLog.pageObj.init({maxCount: size}, newSearch);

            $('#playerCreditChangeLogTable').off('order.dt');
            $('#playerCreditChangeLogTable').on('order.dt', function (event, a, b) {
                vm.commonSortChangeHandler(a, 'playerCreditChangeLog', vm.getPagedPlayerCreditChangeLog);
            });
            $("#playerCreditChangeLogTable").resize();
            $scope.safeApply();
        }

        vm.prepareShowPlayerCreditChangeLog = function () {
            vm.processDataTableinModal('#modalPlayerCreditChangeLog', '#playerCreditChangeLogTable', {"aaSorting": [[0, 'desc']]});
            vm.initQueryTimeFilter('playerCreditChangeLog', function () {
                vm.queryPara.playerCreditChangeLog.type = 'none';
                vm.queryPara.playerCreditChangeLog.startTime.data('datetimepicker').setLocalDate(utilService.setNDaysAgo(new Date(), 1));
                vm.showCreditChangeLogByFilter();
                $scope.safeApply();
            });
        }
        vm.showCreditChangeLogByFilter = function (query) {
            // var limit = vm.queryPara.playerCreditChangeLog.limit || '-1';
            var sendData = {
                startTime: vm.queryPara.playerCreditChangeLog.startTime.data('datetimepicker').getLocalDate(),
                endTime: vm.queryPara.playerCreditChangeLog.endTime.data('datetimepicker').getLocalDate(),
                playerId: vm.isOneSelectedPlayer()._id,
                type: vm.queryPara.playerCreditChangeLog.type,
                limit: parseInt('-1')
            };
            vm.queryPara.playerCreditChangeLog.fetching = true;
            vm.getPlayerCreditChangeLogRecords('getPlayerCreditChangeLogsByQuery', sendData, function () {
                vm.updateDataTableinModal('#modalPlayerCreditChangeLog', '#playerCreditChangeLogTable', {"aaSorting": [[0, 'desc']]});
                vm.queryPara.playerCreditChangeLog.fetching = false;
                $scope.safeApply();
            });
        }

        vm.processCreditChangeLogData = function (data) {
            return data ? data.map(a => {
                if (!a) return;
                var checkForObjIdRegExp = new RegExp(/^[a-f\d]{24}$/i);
                var newStr = [];
                a.amount = a.amount != null ? $noRoundTwoDecimalToFix(a.amount) : new Number(0).toFixed(2);
                a.curAmount = a.curAmount != null ? $noRoundTwoDecimalToFix(a.curAmount) : new Number(0).toFixed(2);
                a.lockedAmount = a.lockedAmount != null ? $noRoundTwoDecimalToFix(a.lockedAmount) : new Number(0).toFixed(2);
                a.changedLockedAmount = a.changedLockedAmount != null ? $noRoundTwoDecimalToFix(a.changedLockedAmount) : new Number(0).toFixed(2);
                var newObj = $.extend({}, a.data);
                delete newObj.creator;
                // switch (a.operationType) {
                //     case "TopUp":
                //         break;
                //     case "ManualTopUp":
                //         newObj = {proposalId: newObj.proposalId};
                //         break;
                // }
                if (a.data && a.data._inputCredit != null && a.data.initAmount != null) {
                    newObj = {rewardType: a.data.rewardType};
                } else if (a.data && a.data.proposalId && a.operationType == 'ManualTopUp') {
                    newObj = {proposalId: newObj.proposalId};
                }
                $.each(newObj, (i, v) => {
                    if (!checkForObjIdRegExp.test(v)) {
                        if (i == 'createTime') {
                        } else if (i == '__v') {
                        } else if (i == 'remark') {
                        } else if (i == 'data') {
                        } else {
                            newStr.push($translate(i) + ':' + $translate(v))
                        }
                    }
                })
                a.detail = newStr
                return a;
            }) : [];
        }
        vm.getPlayerCreditChangeLogRecords = function (socketAction, data, callback) {
            console.log("CreditChangeLogs:Query:", data);
            socketService.$socket($scope.AppSocket, socketAction, data, function (data) {
                vm.playerCreditChangeLogs = vm.processCreditChangeLogData(data.data);
                console.log('CreditChangeLogs.length', vm.playerCreditChangeLogs.length);
                $scope.safeApply();
                if (callback) {
                    callback(vm.playerCreditChangeLogs);
                }
            });
        };

        vm.initQueryTimeFilter = function (field, callback) {
            vm.queryPara[field] = {};
            utilService.actionAfterLoaded(('#' + field ), function () {
                vm.queryPara[field].startTime = utilService.createDatePicker('#' + field + ' .startTime');
                vm.queryPara[field].endTime = utilService.createDatePicker('#' + field + ' .endTime');
                vm.queryPara[field].startTime.data('datetimepicker').setDate(utilService.setLocalDayStartTime(utilService.setNDaysAgo(new Date(), 1)));
                vm.queryPara[field].endTime.data('datetimepicker').setDate(utilService.setLocalDayEndTime(new Date()));

                $scope.safeApply();
                if (callback) {
                    callback();
                }
            });

        }

        //  Player's rewardTask log
        vm.showPagedPlayerRewardTaskLog = function () {
            // $('#modalPlayerCreditChangeLog').modal().show();
            vm.playerRewardTaskLog = {};
            vm.playerRewardTaskLog.type = 'none';
            vm.playerRewardTaskLog.index = 0;
            vm.playerRewardTaskLog.limit = vm.playerRewardTaskLog && vm.playerRewardTaskLog.limit ? vm.playerRewardTaskLog.limit : 50;
            utilService.actionAfterLoaded(('#playerRewardTaskLog .endTime'), function () {
                vm.playerRewardTaskLog.startTime = utilService.createDatePicker('#playerRewardTaskLog .startTime');
                vm.playerRewardTaskLog.endTime = utilService.createDatePicker('#playerRewardTaskLog .endTime');
                vm.playerRewardTaskLog.startTime.data('datetimepicker').setDate(utilService.setLocalDayStartTime(utilService.setNDaysAgo(new Date(), 1)));
                vm.playerRewardTaskLog.endTime.data('datetimepicker').setDate(utilService.setLocalDayEndTime(new Date()));
                vm.playerRewardTaskLog.pageObj = utilService.createPageForPagingTable("#playerRewardTaskLogTablePage", {pageSize: 50}, $translate, function (curP, pageSize) {
                    vm.commonPageChangeHandler(curP, pageSize, "playerRewardTaskLog", vm.getPagedPlayerRewardTaskLog)
                });
                vm.getPagedPlayerRewardTaskLog(true);
            });
        }

        vm.getPagedPlayerRewardTaskLog = function (newSearch) {
            vm.playerRewardTaskLog.loading = true;
            let sendQuery = {
                playerId: vm.isOneSelectedPlayer()._id,
                startTime: vm.playerRewardTaskLog.startTime.data('datetimepicker').getLocalDate(),
                endTime: vm.playerRewardTaskLog.endTime.data('datetimepicker').getLocalDate(),
                index: newSearch ? 0 : vm.playerRewardTaskLog.index,
                limit: newSearch ? vm.playerRewardTaskLog.limit : (vm.playerRewardTaskLog.limit || 50),
                sortCol: vm.playerRewardTaskLog.sortCol,
            };

            socketService.$socket($scope.AppSocket, 'getPlayerRewardTaskUnlockedRecord', sendQuery, function (data) {

                console.log('getPlayerRewardTaskUnlockedRecord', data.data[1]);
                let result = data.data[1];
                vm.playerRewardTaskLog.totalCount = data.data[0];
                result.forEach((item, index) => {
                    item['unlockTime'] = vm.dateReformat(item.unlockTime);
                    item['targetProviderGroup'] = $translate(item.targetProviderGroup);
                    item.creator.name = $translate(item.creator.name);
                    item.status = $translate(item.status == 'NoCredit' ? 'NoCreditUnlock' : item.status == 'Achieved' ? 'AchievedUnlock': item.status);
                    item.currentAmt$ = $noRoundTwoDecimalPlaces(item.currentAmount);
                });

                $scope.$evalAsync(vm.drawRewardTaskUnlockedTable(newSearch, result, vm.playerRewardTaskLog.totalCount));
                vm.playerRewardTaskLog.loading = false;
            })
        };

        vm.drawRewardTaskUnlockedTable = function (newSearch, tblData, size) {
            console.log("rewardTaskUnlockedTable", tblData);

            var tableOptions = $.extend({}, vm.generalDataTableOptions, {
                data: tblData,
                "aaSorting": vm.playerRewardTaskLog.sortCol || [[2, 'desc']],
                aoColumnDefs: [
                    // {'sortCol': 'createTime$', bSortable: true, 'aTargets': [3]},
                    {targets: '_all', defaultContent: ' ', bSortable: false}
                ],
                columns: [

                    {
                        title: $translate('RewardProposalId'),
                        data: "proposalNumber",
                        render: function (data, type, row) {
                            var link = $('<a>', {

                                'ng-click': 'vm.showProposalModal("' + data + '",1)'

                            }).text(data);
                            return link.prop('outerHTML');
                        }
                    },
                    {
                        title: $translate('SubRewardType'), data: "rewardTask.type",
                        render: function (data, type, row) {
                            var text = $translate(data);
                            return text;
                        }

                    },
                    {title: $translate('UNLOCKTIME'), data: "unlockTime"},
                    //相關存款金額
                    {title: $translate('Deposit Amount'), data: "topupAmount"},
                    {
                        title: $translate('Deposit ProposalId'),
                        data: "topupProposalNumber",
                        render: function (data, type, row) {
                            var link = $('<a>', {
                                'ng-click': 'vm.showProposalModal("' + data + '",1)'
                            }).text(data);
                            return link.prop('outerHTML');
                        }
                    },
                    //相關存款提案號
                    {title: $translate('REWARD_AMOUNT'), data: "bonusAmount"},
                    {
                        //解锁进度（投注额）
                        "title": $translate('CONSUMPTION_UNLOCK'), data: "currentConsumption",
                        render: function (data, type, row, meta) {
                            let text = row.currentConsumption + "/" + row.maxConsumption;
                            return "<div>" + text + "</div>";
                        }
                    },
                    // 解鎖進度
                    {
                        //解锁进度（输赢值）
                        "title": $translate('WINLOSE_UNLOCK'), data: "currentAmount",
                        render: function (data, type, row, meta) {
                            // let spendingAmt = vm.calSpendingAmt(meta.row);
                            // let isSubmit = vm.isSubmitProposal(meta.row);
                            let text = row.currentAmt$ + "/-" + row.targetAmount;

                            return "<div>" + text + "</div>";
                        }
                    },
                    {title: $translate('GAME LOBBY / REWARD TASK GROUP'), data: "targetProviderGroup"},
                    {
                        "title": $translate('IsConsumption'), data: "useConsumption",
                        render: function (data, type, row) {
                            var text = $translate(data);
                            return "<div>" + text + "</div>";
                        }
                    },
                    {
                        "title": $translate('creator'), data: "creator.name",

                    },
                    {
                        "title": $translate('UNLOCK_REASON'), data: "status",

                    },
                ],
                "paging": false,
                // "scrollX": true,
                // "autoWidth": true,
                // "sScrollY": 350,
                // "scrollCollapse": true,
                // "destroy": true,
                // fnRowCallback: function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                //     $compile(nRow)($scope);
                // }
                fnInitComplete: function(settings){
                    $compile(angular.element('#' + settings.sTableId).contents())($scope);
                }
            });
            tableOptions.language.emptyTable = $translate("No data available in table");

            utilService.createDatatableWithFooter('#playerRewardTaskLogTable', tableOptions, {
                //4: topUpAmountSum,
                // 6: summary ? summary.bonusAmountSum: 0,
                // 7: summary ? summary.requiredBonusAmountSum: 0,
                // 8: summary ? summary.currentAmountSum :0
            });

            vm.playerRewardTaskLog.pageObj.init({maxCount: size}, newSearch);
            $('#playerRewardTaskLogTable').off('order.dt');
            $('#playerRewardTaskLogTable').on('order.dt', function (event, a, b) {
                vm.commonSortChangeHandler(a, 'playerRewardTaskLog', vm.getPagedPlayerRewardTaskLog);
            });
            $('#playerRewardTaskLogTable').resize();

        };

        /**
         * Get player's all available reward task
         * @param playerId
         * @param callback
         */
        vm.getRewardTask = (playerId, callback) => {
            socketService.$socket($scope.AppSocket, 'getPlayerAllRewardTask', {playerId: playerId}, function (data) {
                console.log('getRewardTask', data);
                vm.rewardTask = data.data;
                //$scope.safeApply();
                if (callback) {
                    callback(vm.rewardTask);
                }
            });
        };

        vm.getRewardTaskDetail = (playerId, callback) => {
            let deferred = Q.defer();

            socketService.$socket($scope.AppSocket, 'getPlayerAllRewardTaskDetailByPlayerObjId', {_id: playerId}, function (data) {
                vm.curRewardTask = data.data;
                console.log('vm.curRewardTask', vm.curRewardTask);
                $scope.safeApply();
                if (callback) {
                    callback(vm.curRewardTask);
                }
                deferred.resolve(data);
            });

            return deferred.promise;
        };

        vm.getRewardTaskGroupDetail = (playerId, callback) => {
            return $scope.$socketPromise('getPlayerAllRewardTaskGroupDetailByPlayerObjId', {_id: playerId}).then(
                res => {
                    res.data.map(r => {
                        if (r.providerGroup == null) {
                            r.providerGroup = {
                                name: "ANY_LOBBY"
                            };
                        }
                        return r;
                    });
                    vm.curRewardTask = res.data;
                    console.log('vm.curRewardTask', vm.curRewardTask);
                    if (callback) {
                        callback(vm.curRewardTask);
                    }
                }
            )
        };

        vm.prepareShowFeedbackRecord = function (rowData) {
            if (rowData && rowData.playerId) {
                vm.playerFeedbackRecord = vm.playerFeedbackRecord || {totalCount: 0};
                utilService.actionAfterLoaded('#modalAddPlayerFeedback .searchDiv .startTime', function () {
                    vm.playerFeedbackRecord.startTime = utilService.createDatePicker('#modalAddPlayerFeedback .searchDiv .startTime');
                    vm.playerFeedbackRecord.endTime = utilService.createDatePicker('#modalAddPlayerFeedback .searchDiv .endTime');
                    vm.playerFeedbackRecord.startTime.data('datetimepicker').setDate(utilService.setLocalDayStartTime(utilService.setNDaysAgo(new Date(), 365)));
                    vm.playerFeedbackRecord.endTime.data('datetimepicker').setDate(utilService.setLocalDayEndTime(new Date()));

                    utilService.actionAfterLoaded('#playerFeedbackRecord', function () {
                        vm.playerFeedbackRecord.pageObj = utilService.createPageForPagingTable("#playerFeedbackRecordTablePage", {}, $translate, function (curP, pageSize) {
                            vm.commonPageChangeHandler(curP, pageSize, "playerFeedbackRecord", vm.getFeedbackRecord)
                        });
                        vm.getFeedbackRecord(true);
                    });
                });
            }
        };

        vm.getFeedbackRecord = function (newSearch) {
            vm.playerFeedbackRecord.searching = true;
            let queryData = {
                query: {
                    startTime: vm.playerFeedbackRecord.startTime.data('datetimepicker').getLocalDate(),
                    endTime: vm.playerFeedbackRecord.endTime.data('datetimepicker').getLocalDate(),
                    playerId: vm.selectedSinglePlayer._id
                },
                limit: newSearch ? 10 : (vm.playerFeedbackRecord.limit || 10),
                index: newSearch ? 0 : (vm.playerFeedbackRecord.index || 0),
                sortCol: vm.playerFeedbackRecord.sortCol || null
            };

            console.log("queryData", queryData);
            vm.prepareFeedbackRecord(queryData, newSearch);
        }

        vm.prepareFeedbackRecord = function (queryData, newSearch) {
            vm.playerFeedbackData = [];
            socketService.$socket($scope.AppSocket, 'getPlayerFeedbackReport', queryData, function (data) {
                console.log('getPlayerFeedback', data);

                vm.playerFeedbackData = data.data.data;
                vm.playerFeedbackRecord.totalCount = data.data.size;
                vm.playerFeedbackRecord.searching = false;

                var tableData = vm.playerFeedbackData.map(
                    record => {
                        let resultName;
                        if(!record.resultName) {
                            resultName = utilService.getPlayerFeedbackResultName(vm.allPlayerFeedbackResults, record.result);
                        }

                        record.createTime = (record && record.createTime) ? vm.dateReformat(record.createTime) : "";
                        record.result = (record && record.resultName) ? record.resultName :
                            (resultName ? resultName : $translate(record.result));
                        record.content = (record && record.content) ? record.content : "";
                        record.adminName = (record && record.adminId && record.adminId.adminName) ? record.adminId.adminName : "";
                        record.topic = (record && record.topic) ? record.topic : "";
                        return record
                    }
                );
                var option = $.extend({}, vm.generalDataTableOptions, {
                    data: tableData,
                    aoColumnDefs: [
                        {targets: '_all', defaultContent: ' ', bSortable: false}
                    ],
                    columns: [
                        {title: $translate('TIME'), data: "createTime"},
                        {title: $translate('RESULT'), data: "result"},
                        {title: $translate('CONTENT'), data: "content"},
                        {title: $translate('adminName'), data: "adminName"},
                        {title: $translate('FEEDBACK_TOPIC'), data: "topic"}
                    ],
                    bSortClasses: false,
                    destroy: true,
                    paging: false,
                    autoWidth: true,
                    fnRowCallback: function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                        $compile(nRow)($scope);
                    }
                });
                var a = utilService.createDatatableWithFooter('#playerFeedbackRecordTable', option, {});
                vm.playerFeedbackRecord.pageObj.init({maxCount: vm.playerFeedbackRecord.totalCount}, newSearch);
                $("#playerFeedbackRecordTable").off('order.dt');
                $("#playerFeedbackRecordTable").on('order.dt', function (event, a, b) {
                    vm.commonSortChangeHandler(a, 'playerFeedbackRecord', vm.getFeedbackRecord);
                });
                $('#playerFeedbackRecordTable').resize();
                $scope.safeApply();
            });
        };

        vm.initPlayerModal = function () {
            $scope.$evalAsync(()=>{
                $('#newPlayerListTab').addClass('active');
                $('#attemptNumberListTab').removeClass('active');
                vm.playerModalTab = "newPlayerListPanel";
                vm.newPlayerList(true);
            })
        };

        vm.initFeedbackModal = function (rowData) {
            vm.getSelectedRowPlatformDetails(rowData);
            if (rowData && rowData.playerId) {
                $('#addFeedbackTab').addClass('active');
                $('#feedbackHistoryTab').removeClass('active');
                $scope.safeApply();
                vm.feedbackModalTab = "addFeedbackPanel";
                vm.playerFeedback = {};
                if (vm.selectedPlatform && vm.selectedPlatform.data && vm.selectedPlatform.data.defaultFeedback) {
                    if (vm.selectedPlatform.data.defaultFeedback.defaultPlayerFeedbackResult && vm.playerFeedback) {
                        vm.playerFeedback.result = vm.selectedPlatform.data.defaultFeedback.defaultPlayerFeedbackResult;
                    }

                    if (vm.selectedPlatform.data.defaultFeedback.defaultPlayerFeedbackTopic && vm.playerFeedback) {
                        vm.playerFeedback.topic = vm.selectedPlatform.data.defaultFeedback.defaultPlayerFeedbackTopic;
                    }
                }
            }

            if (rowData && rowData.partnerId) {
                $('#addPartnerFeedbackTab').addClass('active');
                $('#partnerFeedbackHistoryTab').removeClass('active');
                $scope.safeApply();
                vm.feedbackModalTabPartner = "addPartnerFeedbackPanel";
            }
        };

        vm.isFeedbackValid = function () {
            let isValid = false;
            if (vm.playerFeedback && vm.playerFeedback.result && vm.playerFeedback.topic) {
                if (vm.playerFeedback.content) {
                    isValid = true;
                } else if (vm.selectedPlatform && vm.selectedPlatform.data && vm.selectedPlatform.data.defaultFeedback
                            && vm.playerFeedback.result == vm.selectedPlatform.data.defaultFeedback.defaultPlayerFeedbackResult
                            && vm.playerFeedback.topic == vm.selectedPlatform.data.defaultFeedback.defaultPlayerFeedbackTopic) {
                    isValid = true;
                }
            }

            return isValid;
        };

        vm.initNewPlayerFeedbackModal = function (selectedPlayer) {
            vm.selectedSinglePlayer = selectedPlayer;

            socketService.$socket($scope.AppSocket, 'getOnePlayerInfo', {playerId: selectedPlayer.playerId}, function (data) {
                console.log(data);
                let id = data.data._id ? data.data._id : '';
                selectedPlayer._id = id;
                vm.selectedSinglePlayer = selectedPlayer;
                $('#addFeedbackTab').addClass('active');
                $('#feedbackHistoryTab').removeClass('active');
                $scope.safeApply();
                vm.feedbackModalTab = "addFeedbackPanel";
            });
        };

        vm.initMessageModal = function () {
            $('#sendMessageToPlayerTab').addClass('active');
            $('#messageLogTab').removeClass('active');
            $scope.safeApply();
            vm.messageModalTab = "sendMessageToPlayerPanel";
            vm.messageForPlayer = {};
        };

        vm.initSMSModal = function (rowData) {
            $('#smsToPlayerTab').addClass('active');
            $('#smsLogTab').removeClass('active');
            $('#smsSettingTab').removeClass('active');
            vm.smsModalTab = "smsToPlayerPanel";
            vm.playerSmsSetting = {smsGroup: {}};
            vm.getPlatformSmsGroups();
            vm.getAllMessageTypes();
            vm.getSelectedRowPlatformDetails(rowData);
            $scope.$evalAsync();
        };

        vm.isAllNoSmsGroupChecked = () => {
            let isAllChecked = true;
            for (let i = 0; i < vm.noGroupSmsSetting.length; i++) {
                if (vm.playerBeingEdited.smsSetting[vm.noGroupSmsSetting[i].name] === false) {
                    isAllChecked = false;
                    break;
                }
            }
            vm.playerBeingEdited.checkAllNoSmsGroup = isAllChecked;
        };

        vm.toggleAllNoSmsGroup = () => {
            if (vm.playerBeingEdited.checkAllNoSmsGroup === false) {
                vm.noGroupSmsSetting.forEach(
                    noGroup => {
                        vm.playerBeingEdited.smsSetting[noGroup.name] = false;
                    }
                );
            } else {
                vm.noGroupSmsSetting.forEach(
                    noGroup => {
                        vm.playerBeingEdited.smsSetting[noGroup.name] = true;
                    }
                );
            }
        };

        vm.isAllIsSmsGroupChecked = () => {
            let smsSettingInThisGroup = vm.smsGroups.filter(smsGroup => smsGroup.smsParentSmsId === -1);
            let isAllChecked = true;
            for (let i = 0; i < smsSettingInThisGroup.length; i++) {
                let groupSmsId = smsSettingInThisGroup[i].smsId;
                if (vm.playerSmsSetting.smsGroup[groupSmsId] === false) {
                    isAllChecked = false;
                    break;
                }
            }
            vm.playerBeingEdited.checkAllIsSmsGroup = isAllChecked;
        };

        vm.toggleAllIsSmsGroup = () => {
            if (vm.playerBeingEdited.checkAllIsSmsGroup === false) {
                vm.smsGroups.forEach(
                    smsGroup => {
                        if (smsGroup.smsParentSmsId !== -1) {
                            vm.playerBeingEdited.smsSetting[smsGroup.smsName] = false;
                        } else {
                            vm.playerSmsSetting.smsGroup[smsGroup.smsId] = false;
                        }

                    }
                );
            } else {
                vm.smsGroups.forEach(
                    smsGroup => {
                        if (smsGroup.smsParentSmsId !== -1) {
                            vm.playerBeingEdited.smsSetting[smsGroup.smsName] = true;
                        } else {
                            vm.playerSmsSetting.smsGroup[smsGroup.smsId] = true;
                        }
                    }
                );
            }
        };

        vm.smsGroupCheckChange = (smsParentGroup) => {
            let smsSettingInThisGroup = vm.smsGroups.filter(smsGroup => smsGroup.smsParentSmsId === smsParentGroup.smsId);
            let isGroupChecked = vm.playerSmsSetting.smsGroup[smsParentGroup.smsId];
            smsSettingInThisGroup.forEach(
                smsSetting => {
                    vm.playerBeingEdited.smsSetting[smsSetting.smsName] = isGroupChecked;
                }
            );
        };

        vm.isAllSmsInGroupChecked = (smsParentGroup) => {
            let smsSettingInThisGroup = vm.smsGroups.filter(smsGroup => smsGroup.smsParentSmsId === smsParentGroup.smsId);
            let isAllChecked = true;
            for (let i = 0; i < smsSettingInThisGroup.length; i++) {
                if (vm.playerBeingEdited.smsSetting[smsSettingInThisGroup[i].smsName] === false) {
                    isAllChecked = false;
                    break;
                }
            }
            vm.playerSmsSetting.smsGroup[smsParentGroup.smsId] = isAllChecked;
            vm.isAllIsSmsGroupChecked();
        };

        vm.initPlayerDisplayDataModal = function () {
            $('#customerServiceTab').addClass('active');
            $('#advertisementTab').removeClass('active');
            $scope.safeApply();
            vm.playerDisplayDataTab = "customerServicePanel";
            vm.showAdvertisementRecord = true;
            vm.editAdvertisementRecord = false;
            vm.playerAdvertisementWebDevice = true;
        };

        vm.initPartnerDisplayDataModal = function () {
            $('#partnerServiceTab').addClass('active');
            $('#partnerAdvertisementTab').removeClass('active');
            $scope.safeApply();
            vm.partnerDisplayDataTab = "partnerPanel";
            vm.showPartnerAdvertisementRecord = true;
            vm.editPartnerAdvertisementRecord = false;
            vm.partnerAdvertisementWebDevice = true;
        };

        vm.initFrontendModuleSettingModal = function () {
            $('#presetModuleTab').addClass('active');
            $('#specialModuleTab').removeClass('active');
            $scope.safeApply();
            vm.moduleDisplayDataTab = "presetModulePanel";
        };

        vm.updatePlayerFeedbackData = function (modalId, tableId, opt) {
            opt = opt || {'dom': 't'};
            vm.playerFeedbackRecord.searching = true;
            socketService.$socket($scope.AppSocket, 'getPlayerFeedbackReport', {
                query: {
                    startTime: vm.playerFeedbackRecord.startTime.data('datetimepicker').getLocalDate(),
                    endTime: vm.playerFeedbackRecord.endTime.data('datetimepicker').getLocalDate(),
                    playerId: vm.selectedSinglePlayer._id
                }
            }, function (data) {
                console.log('getPlayerFeedback', data);
                vm.playerFeedbackRecord.searching = false;
                vm.playerFeedbackData = data.data;

                vm.playerFeedbackData.data.forEach(item => {
                    item.result$ = item.resultName ? item.resultName : $translate(item.result);
                });

                $scope.safeApply();
                vm.updateDataTableinModal(modalId, tableId, opt)
            });
        };

        vm.updatePartnerFeedbackData = function (modalId, tableId, opt) {
            opt = opt || {'dom': 't'};
            vm.partnerFeedbackRecord.searching = true;
            socketService.$socket($scope.AppSocket, 'getPartnerFeedbackReport', {
                query: {
                    startTime: vm.partnerFeedbackRecord.startTime.data('datetimepicker').getLocalDate(),
                    endTime: vm.partnerFeedbackRecord.endTime.data('datetimepicker').getLocalDate(),
                    partnerId: vm.selectedSinglePartner._id
                }
            }, function (data) {
                console.log('getPartnerFeedback', data);
                vm.partnerFeedbackRecord.searching = false;
                vm.partnerFeedbackData = data.data;

                vm.partnerFeedbackData.data.forEach(item => {
                    item.result$ = item.resultName ? item.resultName : $translate(item.result);
                });

                $scope.safeApply();
                vm.updateDataTableinModal(modalId, tableId, opt)
            });
        };

        vm.getPlayer5Feedback = function (playerId, callback) {
            console.log('play', playerId);
            socketService.$socket($scope.AppSocket, 'getPlayerLastNFeedbackRecord', {
                playerId: playerId,
                limit: 5
            }, function (data) {
                console.log('getPlayerFeedback', data);
                vm.playerFeedbackData = data.data;
                $scope.safeApply();
                if (callback) {
                    callback(vm.playerFeedbackData);
                }
            });
        }
        vm.getPlayerNFeedback = function (playerId, limit, callback) {
            socketService.$socket($scope.AppSocket, 'getPlayerLastNFeedbackRecord', {
                playerId: playerId,
                limit: limit
            }, function (data) {
                $scope.safeApply();
                if (callback) {
                    callback(data.data);
                }
            });
        }
        //get player's game provider credit
        vm.showPlayerCreditinProvider = function (row) {
            vm.getPlatformGameData(row.platform);
            vm.gameProviderCreditPlayerName = row.name;
            vm.queryPlatformCreditTransferPlayerName = row.name;
            // vm.creditModal = $('#modalPlayerGameProviderCredit').modal();
            vm.creditModal = $('#modalPlayerAccountingDetail').modal();
            vm.playerCredit = {};
            vm.playerTotalGameCredit = 0;
            vm.playerTotalCredit = row.validCredit + row.lockedCredit;
            vm.sameLineProvidersByPlatformId = [];
            vm.uniqueSameLineProvidersByPlatformId = [];
            vm.creditTransfer = {};
            vm.fixPlayerRewardAmount = {rewardInfo: row.rewardInfo};
            vm.transferAllCredit = {};
            vm.rewardTotalAmount = 0;
            vm.creditTransfer.needClose = false;
            vm.creditTransfer.transferResult = '';
            vm.getSelectedRowProviderDetails(row);
            if (vm.selectedPlatform.data.useProviderGroup) {
                vm.creditTransfer.showValidCredit = row.validCredit;
                vm.creditTransfer.showRewardAmount = row.lockedCredit;
            } else {
                vm.getRewardTask(row._id, function (data) {
                    // Add up amounts from all available reward tasks
                    let showRewardAmount = 0;
                    if (data && data.length > 0) {
                        for (let i = 0; i < data.length; i++) {
                            showRewardAmount += data[i].currentAmount;
                        }
                    }
                    vm.creditTransfer.showRewardAmount = showRewardAmount;
                    vm.creditTransfer.showValidCredit = row.validCredit;
                });
            }

            for (let i in vm.platformProviderList) {
                if (vm.platformProviderList[i] && vm.platformProviderList[i].sameLineProviders && vm.platformProviderList[i].sameLineProviders[vm.selectedPlatform.data.platformId]) {
                    let targetSameLineProviders = vm.platformProviderList[i].sameLineProviders[vm.selectedPlatform.data.platformId];
                    let sortedSameLineProviders = targetSameLineProviders.sort();
                    vm.sameLineProvidersByPlatformId.push(sortedSameLineProviders);
                }
            }

            let uniques = [];
            let itemsFound = {};
            vm.sameLineProvidersByPlatformId.forEach(arr => {
                let stringified = JSON.stringify(arr);
                if (!itemsFound[stringified]) {
                    uniques.push(arr);
                    itemsFound[stringified] = true;
                }
            });
            vm.uniqueSameLineProvidersByPlatformId = uniques;

            for (let i in vm.platformProviderList) {
                vm.getPlayerCreditInProvider(row.name, vm.platformProviderList[i].providerId, vm.playerCredit)
            }

            vm.showPlayerAccountingDetailTab(null);
        };
        vm.transferCreditFromProviderClicked = function (providerId) {
            console.log('vm.playerCredit', vm.playerCredit);
            vm.creditTransfer.focusProvider = providerId;
            vm.maxTransferCredit = $.isNumeric(vm.playerCredit[providerId].gameCredit) ? vm.playerCredit[providerId].gameCredit : 0;
            vm.playerCreditTransferAmount = {Qty: 0, value: 0};
            vm.creditTransfer.statement = "From provider, transfer";
            vm.creditTransfer.apiStr = 'transferPlayerCreditFromProvider';
        }
        vm.transferCreditToProviderClicked = function (providerId) {
            console.log('vm.selectedSinglePlayer', vm.selectedSinglePlayer);
            vm.creditTransfer.focusProvider = providerId;
            vm.maxTransferCredit = vm.selectedSinglePlayer.validCredit;
            vm.playerCreditTransferAmount = 0;
            vm.creditTransfer.statement = "To provider, transfer";
            vm.creditTransfer.apiStr = 'transferPlayerCreditToProvider';
        }
        vm.updateCreditValue = function () {
            vm.playerCreditTransferAmount.Qty = parseInt(vm.playerCreditTransferAmount.value);
        }
        vm.updateCreditQty = function () {
            vm.playerCreditTransferAmount.value = parseInt(vm.playerCreditTransferAmount.Qty);
        }
        vm.confirmCreditTransfer = function (providerId) {
            console.log('vm.selectedSinglePlayer', vm.selectedSinglePlayer);
            var sendData = {
                platform: vm.selectedPlatform.data.platformId,
                playerId: vm.selectedSinglePlayer.playerId,
                providerId: providerId,
                amount: vm.playerCreditTransferAmount.Qty || -1,
                adminName: authService.adminName
            }
            console.log('will send', sendData, vm.creditTransfer.apiStr);
            vm.creditTransfer.isProcessing = true;
            $scope.safeApply();
            socketService.$socket($scope.AppSocket, vm.creditTransfer.apiStr, sendData, function (data) {
                console.log('transfer credit', data);
                // vm.creditTransfer.needClose = true;
                vm.creditTransfer.transferResult = 'SUCCESS';
                vm.playerCredit[providerId].gameCredit = data.data.providerCredit;
                vm.selectedSinglePlayer.validCredit = data.data.playerCredit;
                vm.creditTransfer.showRewardAmount = data.data.rewardCredit;
                vm.creditTransfer.isProcessing = false;
                // vm.getPlatformPlayersData();
                vm.creditTransfer.showValidCredit = data.data.playerCredit;
                vm.creditTransfer.needRefreshPlatformPlayerData = true;
                $scope.safeApply();
                // vm.creditModal.modal('hide');
            }, function (err) {
                console.log('transfer credit', err);
                vm.creditTransfer.transferResult = 'FAIL';
                vm.creditTransfer.isProcessing = false;
                $scope.safeApply();
            })
        }

        vm.transferAllCreditOutRecursive = function (provider, index, size) {
            console.log('transferAllCreditOutRecursive index: ', index);
            if (index > size || !vm.runTransferAllCreditOut) {
                $('#loadingPlayerTableSpin').hide();
                return;
            }

            var apiQuery = {
                platformId: vm.selectedPlatform.id,
                query: {},
                index: index,
                limit: 500,
                sortCol: {registrationTime: -1}
            };

            $('#loadingPlayerTableSpin').show();
            socketService.$socket($scope.AppSocket, 'getPagePlayerByAdvanceQuery', apiQuery, function (reply) {
                var size = reply.data.size;
                var data = reply.data.data;
                for (var i = 0; i < data.length; i++) {
                    console.log("transferAllCreditOutRecursive playerId: " + data[i].playerId);
                    var sendData = {
                        platform: vm.selectedPlatform.data.platformId,
                        playerId: data[i].playerId,
                        providerId: provider,
                        amount: -1,
                        adminName: authService.adminName
                    }
                    vm.creditTransfer = {};
                    vm.creditTransfer.apiStr = 'transferPlayerCreditFromProvider';
                    socketService.$socket($scope.AppSocket, vm.creditTransfer.apiStr, sendData, function (data) {
                        console.log('transferAllCreditOutRecursive data: ', data);
                    }, function (err) {
                        console.log('transferAllCreditOutRecursive err: ', err);
                    })
                }
                vm.transferAllCreditOutRecursive(provider, apiQuery.index + 500, size);
            });
        }

        vm.transferAllCreditOut = function () {
            if (vm.runTransferAllCreditOut) {
                vm.runTransferAllCreditOut = false;
                return;
            }
            vm.runTransferAllCreditOut = true;
            var provider = 19;
            var apiQuery = {
                platformId: vm.selectedPlatform.id,
                query: {},
                index: vm.startTransferIndex || 0,
                limit: 500,
                sortCol: {registrationTime: -1}
            };
            console.log('transferAllCreditOut index: ', apiQuery.index);
            $('#loadingPlayerTableSpin').show();
            socketService.$socket($scope.AppSocket, 'getPagePlayerByAdvanceQuery', apiQuery, function (reply) {
                var size = reply.data.size;
                var data = reply.data.data;
                for (var i = 0; i < data.length; i++) {
                    console.log("transferAllCreditOut playerId: " + data[i].playerId);

                    var sendData = {
                        platform: vm.selectedPlatform.data.platformId,
                        playerId: data[i].playerId,
                        providerId: provider,
                        amount: -1,
                        adminName: authService.adminName
                    }
                    vm.creditTransfer = {};
                    vm.creditTransfer.apiStr = 'transferPlayerCreditFromProvider';
                    socketService.$socket($scope.AppSocket, vm.creditTransfer.apiStr, sendData, function (data) {
                        console.log('transferAllCreditOut data: ', data);
                    }, function (err) {
                        console.log('transferAllCreditOut err: ', err);
                    })
                }
                vm.transferAllCreditOutRecursive(provider, apiQuery.index + 500, size);
                $('#loadingPlayerTableSpin').hide();
            });
        }

        vm.getPlayerCreditInProvider = function (userName, providerId, targetObj) {
            var sendStr = 'getPlayerCreditInProvider';
            socketService.$socket($scope.AppSocket, sendStr, {
                providerId: providerId,
                userName: userName,
                platformId: vm.selectedPlatform.data.platformId
            });
            $scope.AppSocket.removeAllListeners('_' + sendStr);
            $scope.AppSocket.on('_' + sendStr, function (data) {
                if (data.success) {
                    $scope.$evalAsync(() => {
                        var provId = data.data.providerId;
                        targetObj[provId] = data.data || 0;
                        let isAddedTotalCredit = false;

                        vm.uniqueSameLineProvidersByPlatformId.map(arr => {
                            if (arr.indexOf(provId.toString()) > -1 && !arr.includes('bUsed') && !isAddedTotalCredit) {
                                if (targetObj[provId] && targetObj[provId].gameCredit && targetObj[provId].gameCredit !== "unknown" && !targetObj[provId].reason && !isNaN(targetObj[provId].gameCredit)) {
                                    arr.push('bUsed');
                                    isAddedTotalCredit = true;
                                    vm.playerTotalCredit += parseFloat(targetObj[provId].gameCredit);
                                }
                            }
                            if (arr.indexOf(provId.toString()) > -1 && arr.includes('bUsed')) {
                                isAddedTotalCredit = true;
                            }
                        });

                        if (!isAddedTotalCredit) {
                            if (targetObj[provId] && targetObj[provId].gameCredit && targetObj[provId].gameCredit !== "unknown" && !targetObj[provId].reason && !isNaN(targetObj[provId].gameCredit)) {
                                vm.playerTotalCredit += parseFloat(targetObj[provId].gameCredit);
                            }
                        }
                    })
                }
            });
        };

        vm.transferAllCreditToPlayer = function () {
            vm.transferAllCredit.isProcessing = true;

            let transferProviderId = [];

            for (let provider in vm.playerCredit) {
                if (parseFloat(vm.playerCredit[provider].gameCredit) >= 1) {
                    transferProviderId.push(vm.playerCredit[provider].providerId);
                }
            }

            if (transferProviderId.length > 0) {
                $scope.$socketPromise('checkTransferInSequence', {
                    platformObjId: vm.isOneSelectedPlayer().platform,
                    playerObjId: vm.isOneSelectedPlayer()._id,
                    providerIdArr: transferProviderId
                }).then(
                    res => {
                        if (res && res.data && res.data.length > 0) {
                            res.data.sort((a, b) => new Date(a.operationTime).getTime() - new Date(b.operationTime).getTime());

                            let p = Promise.resolve();

                            for (let i = 0; i < res.data.length; i++) {
                                let sendData = {
                                    platform: vm.selectedPlatform.data.platformId,
                                    playerId: vm.selectedSinglePlayer.playerId,
                                    providerId: res.data[i].providerId,
                                    amount: parseInt(vm.playerCredit[res.data[i].providerId].gameCredit),
                                    adminName: authService.adminName
                                };

                                $scope.$evalAsync(() => vm.transferAllCredit[res.data[i].providerId] = {finished: false});
                                console.log('will send', sendData, 'transferPlayerCreditFromProvider');

                                p = p.then(function () {
                                    return $scope.$socketPromise('transferPlayerCreditFromProvider', sendData).then(transferRes => {
                                        console.log('success', transferRes);
                                        $scope.$evalAsync(() => {
                                            vm.transferAllCredit[res.data[i].providerId].text = "Success";
                                            vm.transferAllCredit[res.data[i].providerId].finished = true;
                                        })
                                    })
                                });
                            }

                            return p;
                        }
                    }
                )
            }
            console.log('vm.creditModal', vm.creditModal);
            vm.creditModal.on("hide.bs.modal", function (a) {
                vm.creditModal.off("hide.bs.modal");
                vm.getPlatformPlayersData();
            });
        };

        vm.closeCreditTransferLog = function (modal) {
            $(modal).modal('hide');
            if (vm.creditTransfer.needRefreshPlatformPlayerData) {
                vm.creditTransfer.needRefreshPlatformPlayerData = false;
                vm.advancedPlayerQuery();
                $scope.safeApply();
            }
        }

        vm.sendFixPlayerRewardAmount = function () {
            vm.fixPlayerRewardAmount.isProcessing = true;
            $scope.safeApply();
            socketService.$socket($scope.AppSocket, 'fixPlayerRewardAmount', {playerId: vm.selectedSinglePlayer.playerId}, function (data) {
                console.log('data', data);
                const textMap = {
                    fixed: 'fixed',
                    unnecessary: 'unnecessary to fix',
                }
                let showText = textMap[data.data.fixedStatus] || data.data.fixedStatus;
                $('#fixedRewardAmountResult').text($translate(showText)).fadeIn(1).fadeOut(3000);
                if (data.data.fixedStatus == 'fixed') {
                    vm.creditTransfer.showValidCredit = data.validCredit;
                    vm.selectedSinglePlayer.validCredit = data.validCredit;
                    vm.selectedSinglePlayer.lockedCredit = data.lockedCredit;
                    vm.creditTransfer.needRefreshPlatformPlayerData = true;
                }
                vm.fixPlayerRewardAmount.isProcessing = false;
                $scope.safeApply();
            }, function (err) {
                console.log('err', err);
                $('#fixedRewardAmountResult').text(err.error.message).fadeIn(1).fadeOut(3000);
                vm.fixPlayerRewardAmount.isProcessing = false;
                $scope.safeApply();
            })
        }
        vm.initPlayerReferral = function () {
            $('#playerReferralPopover').show();
            vm.playerReferral = {};
            $('body').off('click', playerReferralHandler);
            setTimeout(function () {
                $('body').on('click', playerReferralHandler);
            }, 100);

            function playerReferralHandler(event) {
                var pageClick = $(event.target).closest('#playerReferralPopover').length;//.attr('aria-controls') == 'playerReferralTbl';
                var tableClick = $(event.target).attr('aria-controls') == 'playerReferralTbl';
                if (pageClick == 1 || tableClick) {
                    return;
                }
                $('#playerReferralPopover').hide();
                $('body').off('click', playerReferralHandler);
            }

            vm.getPlayerReferrals(true);
            $('#modalplayerReferral').modal();
        }
        vm.closePlayerReferral = function () {
            $('#playerReferralPopover').hide();
        }

        vm.getPlayerReferrals = function (newSearch) {
            var sendObj = {
                platform: vm.isOneSelectedPlayer().platform,
                playerObjId: vm.isOneSelectedPlayer()._id,
                index: vm.playerReferral.index || 0,
                limit: 9999999,//vm.playerReferral.limit || 10,
                // sortObj: vm.playerReferral.sortCol
            };
            socketService.$socket($scope.AppSocket, 'getPlayerReferrals', sendObj, function (data) {
                console.log('referral data', data);
                vm.playerReferral.totalCount = data.data ? data.data.size : 0;
                var tableData = data.data ? data.data.data.map(item => {
                    item.lastAccessTime$ = vm.dateReformat(item.lastAccessTime);
                    item.registrationTime$ = vm.dateReformat(item.registrationTime);
                    return item;
                }) : [];
                var option = $.extend({}, vm.generalDataTableOptions, {
                    data: tableData,
                    order: vm.playerReferral.aaSorting,
                    columnDefs: [
                        {'sortCol': 'lastAccessTime', bSortable: true, 'aTargets': [3]},
                        {'sortCol': 'registrationTime', bSortable: true, 'aTargets': [4]},
                        {targets: '_all', defaultContent: ' ', bSortable: false}
                    ],
                    columns: [
                        {'title': $translate('PLAYER_NAME'), data: 'name'},
                        {'title': $translate('PLAYERID'), data: 'playerId'},
                        {'title': $translate('realName'), data: 'realName', sClass: "wordWrap realNameCell"},
                        // {
                        //     'title': $translate('playerLevel'),
                        //     data: 'playerLevel.name'
                        // },
                        {'title': $translate('lastAccessTime'), data: 'lastAccessTime$'},
                        {'title': $translate('registrationTime'), data: 'registrationTime$'}
                    ],
                    paging: true,
                });
                $('#playerReferralTbl').DataTable(option);
                setTimeout(function () {
                    $('#playerReferralTbl').resize();
                }, 100);
                $scope.safeApply();
            });
        }

        vm.deleteProviderGroup = function (index, grp, isConfirm) {

            if (!isConfirm) {
                vm.modalYesNo = {};
                vm.modalYesNo.modalTitle = $translate("Delete Provider Group");
                vm.modalYesNo.modalText = $translate("Delete provider group " + grp.name + "? This will release all rewards amount binded with this group to player.");
                vm.modalYesNo.actionYes = () => vm.deleteProviderGroup(index, grp, true);
                $('#modalYesNo').modal();
            }
            else {
                vm.prepareToBeDeletedProviderGroupId.push(grp._id);
                vm.gameProviderGroup.splice(index, 1);
                $scope.safeApply();
            }
        };

        vm.prepareShowPlayerCredit = function () {
            vm.creditChange = {
                finalValidAmount: $translate("Unknown"),
                finalLockedAmount: $translate("Unknown"),
                number: 0,
                remark: ''
            };
            vm.creditChange.socketStr = "createUpdatePlayerCreditProposal";
            vm.creditChange.modaltitle = "CREDIT_ADJUSTMENT";
            vm.linkedPlayerTransferId = null;
            vm.playerTransferErrorLog = null;
            socketService.$socket($scope.AppSocket, 'getPlayerTransferErrorLogs', {playerObjId: vm.isOneSelectedPlayer()._id}, function (data) {
                vm.playerTransferErrorLog = data.data.map(item => {
                    item.createTimeText = vm.dateReformat(item.createTime);
                    item.typeText = $translate(item.type);
                    item.providerText = vm.getProviderText(item.providerId);
                    return item;
                }) || [];
                console.log('errData', JSON.stringify(vm.playerTransferErrorLog));
                $scope.safeApply();

                for (var i = 0; i < vm.playerTransferErrorLog.length; i++) {
                    vm.playerTransferErrorLog[i].amount = parseFloat(vm.playerTransferErrorLog[i].amount).toFixed(2);
                    vm.playerTransferErrorLog[i].lockedAmount = parseFloat(vm.playerTransferErrorLog[i].lockedAmount).toFixed(2);
                }

                var newTblOption = $.extend({}, vm.generalDataTableOptions, {
                    data: vm.playerTransferErrorLog,
                    columns: [
                        {title: $translate("CREATETIME"), data: 'createTimeText'},
                        {title: $translate("TRANSFER") + " ID", data: 'transferId'},
                        {title: $translate("CREDIT"), data: 'amount'},
                        {title: $translate("provider"), data: 'providerText'},
                        {title: $translate("amount"), data: 'amount'},
                        {title: $translate("LOCKED_CREDIT"), data: 'lockedAmount'},
                        {title: $translate("TYPE"), data: 'typeText'},
                        {
                            title: $translate("STATUS"),
                            render: function (data, type, row) {
                                return (row.status == 1 ? $translate("SUCCESS") : row.status == 2 ? $translate("FAIL") : $translate("REQUEST"));
                            }
                        }
                    ]
                })
                var table = $('#playerCreditAdjustTbl').DataTable(newTblOption);
                $('#playerCreditAdjustTbl tbody').off('click', "**");
                $('#playerCreditAdjustTbl tbody').on('click', 'tr', function () {
                    if ($(this).hasClass('selected')) {
                        $(this).removeClass('selected');
                        vm.linkedPlayerTransferId = null;
                        $scope.safeApply();
                    } else {
                        table.$('tr.selected').removeClass('selected');
                        $(this).addClass('selected');
                        var record = table.row(this).data();
                        socketService.$socket($scope.AppSocket, 'getPlayerTransferErrorLogs', {playerObjId: record.playerObjId}, function (data) {
                            var playerTransfer;
                            data.data.forEach(function (playerTransLog) {
                                if (playerTransLog._id == record._id) {
                                    playerTransfer = playerTransLog
                                }
                            })

                            vm.linkedPlayerTransfer = playerTransfer;
                            vm.linkedPlayerTransferId = playerTransfer._id;
                            let finalValidAmount = parseFloat(playerTransfer.amount - playerTransfer.lockedAmount + vm.selectedSinglePlayer.validCredit).toFixed(2);
                            let finalLockedAmount = parseFloat(playerTransfer.lockedAmount).toFixed(2);
                            // added negative value handling to address credit transfer out issue
                            vm.creditChange.finalValidAmount = finalValidAmount < 0 ? parseFloat(vm.selectedSinglePlayer.validCredit).toFixed(2) : finalValidAmount;
                            vm.creditChange.finalLockedAmount = finalLockedAmount < 0 ? parseFloat(vm.selectedSinglePlayer.lockedCredit).toFixed(2) : finalLockedAmount;
                            $scope.safeApply();
                        });
                    }

                })
                $('#playerCreditAdjustTbl').resize();
                $('#playerCreditAdjustTbl').resize();
                table.columns.adjust().draw();
            });
        };

        vm.prepareShowPlayerRewardPointsAdjustment = function () {
            vm.rewardPointsChange.finalValidAmount = vm.isOneSelectedPlayer().rewardPointsObjId.points;
            vm.rewardPointsChange.remark = '';
            vm.rewardPointsChange.updateAmount = 0;
            vm.rewardPointsConvert.finalValidAmount = vm.isOneSelectedPlayer().rewardPointsObjId.points;
            vm.rewardPointsConvert.remark = '';
            vm.rewardPointsConvert.updateAmount = 0;
            $scope.safeApply();
        };

        vm.updatePlayerRewardPointsRecord = function () {
            let sendData = {
                playerObjId: vm.isOneSelectedPlayer()._id,
                platformObjId: vm.isOneSelectedPlayer().platform,
                updateAmount: vm.rewardPointsChange.updateAmount,
                remark: vm.rewardPointsChange.remark
            };

            socketService.$socket($scope.AppSocket, 'updatePlayerRewardPointsRecord', sendData, function () {
                vm.advancedPlayerQuery();
                $scope.safeApply();
            });
        };

        vm.getPlayerRewardPointsConversionRate = function () {
            let sendData = {
                platformObjId: vm.isOneSelectedPlayer().platform,
                playerLevel: vm.isOneSelectedPlayer().playerLevel._id
            };

            socketService.$socket($scope.AppSocket, 'getPlayerRewardPointsConversionRate', sendData, function (data) {
                $scope.$evalAsync(() => {
                    vm.playerRewardPointsConversionRate = data.data;
                });
            });
        };

        vm.getPlayerRewardPointsDailyLimit = function () {
            let sendData = {
                platformObjId: vm.isOneSelectedPlayer().platform,
                playerLevel: vm.isOneSelectedPlayer().playerLevel._id
            };

            socketService.$socket($scope.AppSocket, 'getPlayerRewardPointsDailyLimit', sendData, function (data) {
                $scope.$evalAsync(() => {
                    vm.playerRewardPointsDailyLimit = data.data;
                });
            });
        };

        vm.getPlayerRewardPointsDailyConvertedPoints = function () {
            let sendData = {
                rewardPointsObjId: vm.isOneSelectedPlayer().rewardPointsObjId._id
            };

            socketService.$socket($scope.AppSocket, 'getPlayerRewardPointsDailyConvertedPoints', sendData, function (data) {
                $scope.$evalAsync(() => {
                    vm.playerRewardPointsDailyConvertedPoints = data.data;
                });
            });
        };

        vm.prepareShowPlayerCreditAdjustment = function (type) {
            // vm.creditChange = {
            //     finalValidAmount: vm.isOneSelectedPlayer().validCredit,
            //     finalLockedAmount: null,
            //     remark: '',
            //     updateAmount: 0
            // };

            vm.creditChange.validCredit = parseFloat($noRoundTwoDecimalToFix(vm.isOneSelectedPlayer().validCredit));
            vm.creditChange.finalValidAmount = parseFloat($noRoundTwoDecimalToFix(vm.isOneSelectedPlayer().validCredit));
            // vm.creditChange.finalValidAmount = vm.isOneSelectedPlayer().validCredit;
            vm.creditChange.finalLockedAmount = null;
            vm.creditChange.remark = '';
            vm.creditChange.updateAmount = 0;


            vm.linkedPlayerTransferId = null;
            vm.playerTransferErrorLog = null;
            if (type == "adjust") {
                vm.creditChange.socketStr = "createUpdatePlayerCreditProposal";
                vm.creditChange.modaltitle = "CREDIT_ADJUSTMENT";
            } else if (type == "returnFix") {
                vm.creditChange.socketStr = "createReturnFixProposal";
                vm.creditChange.modaltitle = "ConsumptionReturnFix";
            }

            $scope.safeApply();
        };

        vm.prepareModifyPlayerGamePassword = () => {
            vm.playerModifyGamePassword = {};
            vm.playerModifyGamePassword.resMsg = "";
            vm.getPlatformGameData();
        };

        vm.updatePlayerCredit = function () {
            var sendData = {
                platformId: vm.selectedPlatform.id,
                creator: {type: "admin", name: authService.adminName, id: authService.adminId},
                data: {
                    playerObjId: vm.isOneSelectedPlayer()._id,
                    playerName: vm.isOneSelectedPlayer().name,
                    updateAmount: vm.creditChange.updateAmount,
                    curAmount: vm.isOneSelectedPlayer().validCredit,
                    realName: vm.isOneSelectedPlayer().realName,
                    remark: vm.creditChange.remark,
                    adminName: authService.adminName
                }
            }

            socketService.$socket($scope.AppSocket, vm.creditChange.socketStr, sendData, function (data) {
                var newData = data.data;
                console.log('credit proposal', newData);
                if (data.data && data.data.stepInfo) {
                    socketService.showProposalStepInfo(data.data.stepInfo, $translate);
                }
                vm.getPlatformPlayersData();
                $scope.safeApply();
            });
        };
        vm.applyPlayerReward = function (isForceApply = false) {
            vm.applyXM = true;
            let idArr = [];
            if (vm.playerApplyRewardShow.topUpRecordIds) {
                $.each(vm.playerApplyRewardShow.topUpRecordIds, function (i, v) {
                    if (v) {
                        idArr.push(i);
                    }
                })
            }
            let sendQuery = {
                code: vm.playerApplyRewardPara.code,
                playerId: vm.isOneSelectedPlayer().playerId,
                data: {
                    topUpRecordId: vm.playerApplyRewardPara.topUpRecordId,
                    topUpRecordIds: idArr,
                    amount: vm.playerApplyRewardPara.amount,
                    referralName: vm.playerApplyRewardPara.referralName
                },
                platform: vm.selectedPlatform.id
            };

            if (vm.appliedRewardList && vm.appliedRewardList.length){
                sendQuery.data.appliedRewardList = vm.appliedRewardList;
            }

            if (vm.playerApplyRewardPara && vm.playerApplyRewardPara.festivalItemId) {
                sendQuery.data.festivalItemId = vm.playerApplyRewardPara.festivalItemId;
            }

            if (isForceApply) {
                if (vm.playerApplyEventResult && vm.playerApplyEventResult.error && vm.playerApplyEventResult.error.status === 466) {
                    sendQuery.data.isClearConcurrent = isForceApply;
                } else {
                    sendQuery.data.isForceApply = isForceApply;
                }
            }

            if (vm.playerApplyRewardShow && vm.playerApplyRewardShow.returnData && vm.playerApplyRewardShow.returnData.endTime){
                sendQuery.data.previewDate = new Date(vm.playerApplyRewardShow.returnData.endTime);
            }

            socketService.$socket($scope.AppSocket, 'applyRewardEvent', sendQuery, function (data) {
                console.log('sent', data);
                vm.applyXM = false;
                vm.playerApplyEventResult = data;
                vm.getPlatformPlayersData();
                $scope.safeApply();
            }, function (err) {
                vm.applyXM = false;
                vm.playerApplyEventResult = err;
                console.log(err);
                $scope.safeApply();
            });
        };
        vm.repairTransaction = function () {
            socketService.$socket($scope.AppSocket, 'getPlayerTransferErrorLogs', {playerObjId: vm.isOneSelectedPlayer()._id}
                , function (pData) {
                    let playerTransfer = {};
                    pData.data.forEach(function (playerTransLog) {
                        if (playerTransLog._id == vm.linkedPlayerTransferId) {
                            playerTransfer = playerTransLog
                        }
                    });

                    let updateAmount = playerTransfer.amount - playerTransfer.lockedAmount;

                    let sendData = {
                        platformId: vm.selectedSinglePlayer.platform,
                        creator: {type: "admin", name: authService.adminName, id: authService.adminId},
                        data: {
                            playerObjId: playerTransfer.playerObjId,
                            playerName: playerTransfer.playerName,
                            updateAmount: updateAmount < 0 ? 0 : updateAmount,
                            curAmount: vm.isOneSelectedPlayer().validCredit,
                            realName: vm.isOneSelectedPlayer().realName,
                            remark: vm.creditChange.remark,
                            adminName: authService.adminName
                        }
                    }
                    if (vm.linkedPlayerTransferId) {
                        sendData.data.transferId = playerTransfer.transferId;
                        //if reward task is still there fix locked amount otherwise fix valid amount
                        if (vm.isOneSelectedPlayer().rewardInfo && vm.isOneSelectedPlayer().rewardInfo.length > 0) {
                            sendData.data.updateLockedAmount = playerTransfer.lockedAmount < 0 ? 0 : playerTransfer.lockedAmount;
                            sendData.data.curLockedAmount = vm.isOneSelectedPlayer().lockedCredit;
                        }
                        else {
                            sendData.data.updateAmount += playerTransfer.lockedAmount < 0 ? 0 : playerTransfer.lockedAmount;
                        }

                        vm.creditChange.socketStr = "createFixPlayerCreditTransferProposal";
                    }

                    console.log('repairTransaction', sendData);
                    socketService.$socket($scope.AppSocket, vm.creditChange.socketStr, sendData, function (data) {
                        var newData = data.data;
                        console.log('credit proposal', newData);
                        if (data.data && data.data.stepInfo) {
                            socketService.showProposalStepInfo(data.data.stepInfo, $translate);
                        }
                        vm.getPlatformPlayersData();
                        $scope.safeApply();
                    });
                });
        };

        //
        vm.modifyGamePassword = () => {
            let sendObj = {
                playerId: vm.isOneSelectedPlayer().playerId,
                providerId: vm.playerModifyGamePassword.provider,
                newPassword: vm.playerModifyGamePassword.newPassword,
                creator: {type: "admin", name: authService.adminName, id: authService.adminId},
            };

            socketService.$socket($scope.AppSocket, 'modifyGamePassword', sendObj, data => {
                vm.playerModifyGamePassword.resMsg = $translate('SUCCESS');
            });
        };

        // vm.showPlayerTopupModal = function (row) {
        //     return vm.prepareShowPlayerTopup(row._id);
        // }

        vm.prepareShowPagePlayerTopup = function (startTime) {
            vm.playerTopUpLog = {};
            vm.playerTopupRecordForModal = {
                validAmount: 0,
                amount: 0,
                bonusAmount: 0,
            };
            vm.drawPlayerTopupRecordsTable([], 0, true, {});
            $('#modalPlayerTopUpReport').modal().show();
            utilService.actionAfterLoaded("#modalPlayerTopUpReport.in #playerTopUp .endTime", function () {
                vm.playerTopUpLog.startTime = utilService.createDatePicker('#playerTopUp .startTime');
                vm.playerTopUpLog.endTime = utilService.createDatePicker('#playerTopUp .endTime');
                if (startTime) {
                    vm.playerTopUpLog.startTime.data('datetimepicker').setDate(new Date(startTime));
                } else {
                    vm.playerTopUpLog.startTime.data('datetimepicker').setDate(utilService.setLocalDayStartTime(utilService.setNDaysAgo(new Date(), 1)));
                }
                vm.playerTopUpLog.endTime.data('datetimepicker').setDate(utilService.setLocalDayEndTime(new Date()));
                vm.getPagePlayerTopup(true);
            });
            utilService.actionAfterLoaded("#playerTopupRecordTablePage", function () {
                vm.playerTopUpLog.pageObj = utilService.createPageForPagingTable("#playerTopupRecordTablePage", {}, $translate, function (curP, pageSize) {
                    vm.commonPageChangeHandler(curP, pageSize, "playerTopUpLog", vm.getPagePlayerTopup)
                });
            })
        }
        vm.getPagePlayerTopup = function (newSearch) {
            var sendObj = {
                playerId: vm.isOneSelectedPlayer()._id,
                startTime: vm.playerTopUpLog.startTime.data('datetimepicker').getLocalDate(),
                endTime: vm.playerTopUpLog.endTime.data('datetimepicker').getLocalDate(),
                index: newSearch ? 0 : vm.playerTopUpLog.index,
                limit: newSearch ? 10 : vm.playerTopUpLog.limit,
                sortCol: vm.playerTopUpLog.sortCol || undefined
            }

            socketService.$socket($scope.AppSocket, 'getPagePlayerTopUpRecords', sendObj, function (data) {
                console.log('getPage', data);
                vm.playerAllTopupRecords = data.data ? data.data.data : [];
                vm.playerTopUpLog.totalCount = data.data ? data.data.total : 0;
                console.log('topups:length:', vm.playerAllTopupRecords.length);
                var summary = data.data.summary || {};
                vm.drawPlayerTopupRecordsTable(vm.playerAllTopupRecords, vm.playerTopUpLog.totalCount, newSearch, summary);
            });
        }
        vm.drawPlayerTopupRecordsTable = function (data, count, newSearch, summary) {
            var tableData = data.map(item => {
                item.date$ = vm.dateReformat(item.createTime);
                item.settleTime$ = vm.dateReformat(item.settlementTime);
                item.amount$ = item.amount ? item.amount.toFixed(2) : 0;
                item.type$ = item.topUpType ? $translate(vm.topUpTypeList[item.topUpType]) : $translate("Unknown")
                return item;
            })
            var tableOption = $.extend(true, {}, vm.generalDataTableOptions, {
                data: tableData,
                "order": vm.playerTopUpLog.aaSorting,
                aoColumnDefs: [
                    {'sortCol': 'createTime', bSortable: true, 'aTargets': [0]},
                    {'sortCol': 'topUpType', bSortable: true, 'aTargets': [1]},
                    {'sortCol': 'proposalId', bSortable: true, 'aTargets': [2]},
                    {'sortCol': 'createTime', bSortable: true, 'aTargets': [3]},
                    {'sortCol': 'amount', bSortable: true, 'aTargets': [4]},

                    {targets: '_all', defaultContent: ' ', bSortable: false}
                ], columns: [
                    {title: $translate("CREATION_TIME"), data: "date$"},
                    {title: $translate("TOP_UP_TYPE"), data: "type$"},
                    {title: $translate("PROPOSAL_ID"), data: "proposalId"},
                    {title: $translate("SETTLEMENT") + $translate("TIME"), data: "settleTime$", sClass: 'sumText'},
                    {title: $translate("CREDIT"), data: "amount$", sClass: 'alignRight sumFloat'}
                ],
                paging: false
            });

            vm.playerTopupRecordForModal.amount = summary.amountSum;
            vm.playerTopupRecordForModal.validAmount = summary.validAmount;
            vm.playerTopupRecordForModal.bonusAmount = summary.bonusAmount;

            var aTable = utilService.createDatatableWithFooter("#playerTopupRecordTable", tableOption, {
                4: summary.amountSum
            });
            vm.playerTopUpLog.pageObj ? vm.playerTopUpLog.pageObj.init({maxCount: count}, newSearch) : '';
            $("#playerTopupRecordTable").off('order.dt');
            $("#playerTopupRecordTable").on('order.dt', function (event, a, b) {
                vm.commonSortChangeHandler(a, 'playerTopUpLog', vm.getPagePlayerTopup);
            });
            // aTable.columns.adjust().draw();
            $("#playerTopupRecordTable").resize();
            $scope.safeApply();
        }
        // vm.prepareShowPlayerTopup = function (playerId, startTime) {
        //
        //     var queryObj = {playerId: playerId || vm.isOneSelectedPlayer()._id}
        //     vm.initQueryTimeFilter('playerTopUp', function () {
        //         vm.queryPara.playerTopUp.limit = '50';
        //         if (startTime) {
        //             vm.queryPara.playerTopUp.startTime.data('datetimepicker').setLocalDate(new Date(startTime));
        //             queryObj.startTime = new Date(startTime);
        //             queryObj.endTime = new Date();
        //         }
        //         vm.prepareShowPlayerTopupRecords(queryObj);
        //         $scope.safeApply();
        //     });
        // }

        // vm.prepareShowPlayerTopupRecords = function (query, isQuery) {
        //
        //     vm.playerAllTopupRecords = null;
        //     console.log("playerTopUp:query", query);
        //     socketService.$socket($scope.AppSocket, 'getPlayerTopUpRecords', query, function (data) {
        //
        //         vm.playerAllTopupRecords = data.data;
        //         console.log('topups:length:', vm.playerAllTopupRecords.length);
        //         vm.playerTopUpLog = {totalCount: vm.playerAllTopupRecords.length};
        //         vm.playerTopupRecordForModal = {
        //             validAmount: 0,
        //             amount: 0,
        //             bonusAmount: 0,
        //         };
        //
        //         vm.playerAllTopupRecords.forEach(
        //             record => {
        //                 vm.playerTopupRecordForModal.validAmount += Number(record.validAmount);
        //                 vm.playerTopupRecordForModal.amount += Number(record.amount);
        //                 vm.playerTopupRecordForModal.bonusAmount += Number(record.bonusAmount);
        //             }
        //         );
        //         $scope.safeApply();
        //         // if (vm.playerAllTopupRecords.length > 0) {
        //         //     vm.processDataTableinModal('#modalPlayerTopUp', '#playerTopupRecordTable');
        //         // }
        //         ////
        //         vm.drawPlayerTopupRecordsTable(vm.playerAllTopupRecords, count, true, summary);
        //         vm.drawPlayerTopupRecordsTable(vm.playerAllTopupRecords, vm.playerTopUpLog.totalCount, newSearch, summary);
        //         //////
        //         if (isQuery) {
        //             vm.updateDataTableinModal('#modalPlayerTopUp', '#playerTopupRecordTable');
        //         }
        //         else {
        //             vm.processDataTableinModal('#modalPlayerTopUp', '#playerTopupRecordTable');
        //         }
        //     });
        // };
        vm.initPlayerApplyReward = function () {
            vm.playerApplyRewardPara = {};
            vm.playerApplyRewardShow = {};
            vm.playerApplyEventResult = null;
            // $('#modalPlayerApplyReward').modal();
            // $('#modalPlayerApplyReward').on('shown.bs.modal', function () {
            //     $('#modalPlayerApplyReward').off('shown.bs.modal');
            if (vm.allRewardEvent && vm.allRewardEvent.length && vm.rewardEventGroup && vm.rewardEventGroup.length) { //to group reward by name
                for (let i = 0; i < vm.allRewardEvent.length; i++) {
                    let reward = vm.allRewardEvent[i];
                    if (reward && reward._id) {
                        for (let j = vm.rewardEventGroup.length - 1; j >= 0; j--) { // first reward event group is hard coded
                            if ((vm.rewardEventGroup[j].name && vm.rewardEventGroup[j].rewardEvents && vm.rewardEventGroup[j].rewardEvents.includes(String(reward._id))
                            && reward.validEndTime && new Date(reward.validEndTime).getTime() >= new Date().getTime())
                            || (j == 0 && vm.rewardEventGroup[j].name) ) {
                                vm.allRewardEvent[i].rewardGroup = vm.rewardEventGroup[j].name;
                                vm.rewardEventGroup[j].hasCount = true;
                                break;
                            }
                        }
                    }
                }
            }

            $scope.rewardObj = vm.allRewardEvent[0];
            vm.playerApplyRewardCodeChange(vm.playerApplyRewardPara);
            // });
        }

        vm.filterEndedRewardEvent = function (rewardEvent) {
            if (rewardEvent && (rewardEvent.validEndTime && new Date(rewardEvent.validEndTime).getTime() >= new Date().getTime()) || !rewardEvent.validEndTime) {
                return true;
            };
            return false;
        };

        vm.getPlayerTopupRecord = function (playerId, rewardObj, type) {
            socketService.$socket($scope.AppSocket, 'getValidTopUpRecordList', {
                playerId: playerId || vm.isOneSelectedPlayer().playerId,
                playerObjId: vm.isOneSelectedPlayer()._id,
                filterDirty: true,
                reward: rewardObj
            }, function (data) {
                vm.playerAllTopupRecords = data.data;

                if (type && type == "PlayerRetentionRewardGroup" && rewardObj.condition && rewardObj.condition.allowOnlyLatestTopUp && vm.playerAllTopupRecords && vm.playerAllTopupRecords.length){
                    for(let i=0; i < vm.playerAllTopupRecords.length; i ++){
                        if (i != 0){
                            vm.playerAllTopupRecords[i].isDisabled = true;
                        }
                    }
                }

                console.log('topups', data.data);
                $scope.safeApply();
            });
        }

        vm.getFestivalSelection = function ( playerLevel, DOB, rewardObj ) {
            let playerLevelId = playerLevel._id || '';
            let festivalType =  ( rewardObj.condition && rewardObj.condition.festivalType ) ? rewardObj.condition.festivalType : '';
            if (rewardObj.param && rewardObj.param.rewardParam && rewardObj.param.rewardParam.length > 0) {
                let rewardByPlayerLevel = rewardObj.param.rewardParam.filter( item => {
                    return item.levelId == playerLevelId;
                })
                vm.festivalByPlayerLevel = ( rewardByPlayerLevel && rewardByPlayerLevel[0] && rewardByPlayerLevel[0].value ) ? rewardByPlayerLevel[0].value : [];
            }

            if (vm.festivalByPlayerLevel && vm.festivalByPlayerLevel && vm.festivalByPlayerLevel.length > 0) {
                vm.festivalByPlayerLevel = vm.festivalByPlayerLevel.filter( item => {
                    item.festivalName = vm.getFestivalName(item.festivalId, item.rewardType, rewardObj.param.others, DOB);
                    if ( item.festivalName && item.rewardType ) {
                        return item;
                    }
                })
            }
            vm.festivalByPlayerLevel = vm.festivalByPlayerLevel.filter( festival => {

                switch (festivalType)
                {
                    case "1":
                        // only return the birthday reward - type = 4
                        if (festival.rewardType == 6) {
                            // special case - type 3 dont have apply times
                            return festival.festivalName && festival.rewardType && festival.rewardType == 6;
                        } else {
                            return festival.festivalName && festival.applyTimes && festival.rewardType && (festival.rewardType == 4 || festival.rewardType == 5 || festival.rewardType == 6);
                        }
                        break;
                    case "2":
                        if (festival.rewardType == 3) {
                            // special case - type 3 dont have apply times
                            return festival.festivalName && festival.rewardType && festival.rewardType == 3;
                        } else {
                            return festival.festivalName && festival.applyTimes && festival.rewardType && (festival.rewardType != 4 && festival.rewardType != 5 && festival.rewardType != 6 );
                        }
                        break;
                    default:
                        return festival.festivalName && festival.applyTimes && festival.rewardType;
                }
            })

        }

        vm.getFestivalName = function(id, rewardType,  festivals, DOB) {
            let result = '';
            let month, day;
            if (festivals && festivals.length > 0) {
                let festival = festivals.filter( item => {
                    return item.id == id
                })
                festival = ( festival && festival[0] ) ? festival[0] : null;
                if (festival) {
                    month = festival.month;
                    day = festival.day;
                    result = festival.name + '(' + month + $translate('month') + day + $translate('day') + ')';
                }
            }
            if ( rewardType == 4 || rewardType == 5 || rewardType == 6) {
                month = new Date(DOB).getMonth() + 1;
                day =  new Date(DOB).getDate();
                // result = '会员生日' + '(' + month + $translate('month') + day + $translate('day') + ')';
            }
            if (rewardType == 4) {
                result = '会员生日 ' + '(' + month + $translate('month') + day + $translate('day') + ')';
            }
            if (rewardType == 5) {
                result = '会员生日 - 需最小充值额' + '(' + month + $translate('month') + day + $translate('day') + ')';
            }
            if (rewardType == 6) {
                result = '会员生日 - 需累积总投注额' + '(' + month + $translate('month') + day + $translate('day') + ')';
            }


            return result
        }

        vm.prepareShowConsumptionSlipReward = function () {

            vm.consumptionSlipReward = {totalCount: 0};
            vm.consumptionSlipReward.index = 0;
            vm.consumptionSlipReward.limit = vm.consumptionSlipReward && vm.consumptionSlipReward.limit ? vm.consumptionSlipReward.limit : 100;

            utilService.actionAfterLoaded('#playerConsumptionSlipRewardTablePage', function () {
                vm.consumptionSlipReward.pageObj = utilService.createPageForPagingTable("#playerConsumptionSlipRewardTablePage", {pageSize: 100}, $translate, function (curP, pageSize) {
                    vm.commonPageChangeHandler(curP, pageSize, "consumptionSlipReward", vm.getConsumptionSlipReward)
                });
                vm.getConsumptionSlipReward(true);
            })
        };

        vm.getConsumptionSlipReward = function (newSearch) {

            let searchQuery = {
                code: vm.playerApplyRewardPara.code,
                playerId: vm.isOneSelectedPlayer().playerId,
            };

            searchQuery.data = {};
            searchQuery.data.index = newSearch ? 0 : (vm.consumptionSlipReward.index || 0),
            searchQuery.data.limit = newSearch ? vm.consumptionSlipReward.limit : (vm.consumptionSlipReward.limit || 100),
            searchQuery.data.sortCol = vm.consumptionSlipReward.sortCol || null;
            searchQuery.data.isPreview = true;

            vm.consumptionSlipReward.loading = true;
            vm.showConsumptionSlipReward(searchQuery, newSearch);
        }

        vm.showConsumptionSlipReward = function (queryData, newSearch) {
            vm.playerAllExpenseRecords = [];
            socketService.$socket($scope.AppSocket, 'applyRewardEvent', queryData, function (data) {

                let record = [];
                $scope.$evalAsync( () => {
                    if (data && data.data && data.data.list && data.data.list.length) {

                        vm.consumptionSlipReward.loading = false;
                        data.data.list.forEach(
                            inData => {
                                let detail = {};
                                detail.betTime = inData.consumptionCreateTime ? utilService.$getTimeFromStdTimeFormat(inData.consumptionCreateTime) : null;
                                detail.orderNo = inData.consumptionSlipNo || null;
                                detail.endingDigit = inData.requiredOrderNoEndingDigit || null;
                                detail.bonusAmount = inData.bonusAmount || null;
                                detail.consumptionAmount = inData.consumptionAmount || null;
                                detail.rewardAmount = inData.rewardAmount || null;
                                detail.spendingAmount = inData.spendingAmount || null;
                                detail.remark = inData.remark || null;
                                detail.platformObjId = inData.platformObjId;
                                detail.eventObjId = inData.eventObjId;
                                detail._id = inData._id;
                                detail.gameProvider$ = inData.gameProvider && inData.gameProvider.name ? inData.gameProvider.name : null;
                                record.push(detail);
                            }
                        )

                    }
                    else {
                        vm.consumptionSlipReward.loading = false;
                    }

                    vm.playerApplyRewardShow.returnData.appliedTime = data.data.appliedCount || 0;
                    vm.playerApplyRewardShow.returnData.quota = data.data.availableQuantity || 1;
                    vm.playerApplyRewardShow.returnData.topUpAmountInterval = data.data.topUpAmountInterval || 0;
                    vm.playerApplyRewardShow.returnData.list = record;
                    vm.consumptionSlipReward.totalCount = data.data.size;

                    console.log('vm.playerApplyRewardShow.returnData', vm.playerApplyRewardShow.returnData);

                    var option = $.extend({}, vm.generalDataTableOptions, {
                        data: vm.playerApplyRewardShow.returnData.list,
                        // "aaSorting": vm.consumptionSlipReward.aaSorting || [[2, 'desc']],
                        aoColumnDefs: [
                            // {'sortCol': 'orderNo', bSortable: false, 'aTargets': [1]},
                            // {'sortCol': 'gameProvider', bSortable: false, 'aTargets': [2]},
                            {'sortCol': 'consumptionCreateTime', bSortable: true, 'aTargets': [2]},
                            {'sortCol': 'bonusAmount', bSortable: true, 'aTargets': [4]},
                            {'sortCol': 'consumptionAmount', bSortable: true, 'aTargets': [5]},
                            // {'sortCol': 'rewardAmount', bSortable: true, 'aTargets': [6]},
                            // {'sortCol': 'spendingTimes', bSortable: false, 'aTargets': [7]},
                            {targets: '_all', defaultContent: ' ', bSortable: false}
                        ],

                        columns: [
                            {
                                "title": $translate('Tick'),
                                bSortable: false,
                                sClass: "rewardSelected",
                                render: function (data, type, row) {

                                    var link = $('<input>', {
                                        type: 'checkbox',
                                        "data-_id": row._id,
                                        class: "transform150",
                                    })
                                    return link.prop('outerHTML');
                                },
                            },
                            {
                                title: $translate('orderSlip'),
                                data: "orderNo",
                                render: function (data, type, row) {
                                    let text = row.orderNo;

                                    if (row.endingDigit && text.endsWith(row.endingDigit.toString())){
                                        text = text.slice(0,text.length-row.endingDigit.length) + "<span style='color: red; font-weight: bold;'>" + row.endingDigit + "</span>";
                                    }

                                    let $link = $('<span>').html(text);
                                    return $link.prop('outerHTML');
                                },
                            },
                            {title: $translate('BET_TIME'), data: "betTime"},
                            {title: $translate('PROVIDER_NAME') + "ID", data: "gameProvider$"},
                            {title: $translate('RECEIVED_BONUS_AMOUNT'), data: "bonusAmount"},
                            {title: $translate('CONSUMPTION_AMOUNT_ROUND'), data: "consumptionAmount"},
                            {title: $translate('PROPOSAL_REWARD_AMOUNT'), data: "rewardAmount"},
                            {title: $translate('SPENDING_AMOUNT (Reward Amount x Multiplier)'), data: "spendingAmount"},
                            {title: $translate('REMARK'), data: "remark"},

                        ],
                        destroy: true,
                        paging: false,
                        autoWidth: true
                    });

                    var a = utilService.createDatatableWithFooter('#playerConsumptionSlipRewardTable', option, {});

                    vm.consumptionSlipReward.pageObj.init({maxCount: vm.consumptionSlipReward.totalCount}, newSearch);

                    function tableRowClicked(event) {
                        console.log("event", event)
                        if (event.target.tagName == "INPUT" && event.target.type == 'checkbox') {
                            vm.updateMultiSelectRewardList(event.currentTarget);
                        }

                    }
                    $('#playerConsumptionSlipRewardTable input[type=checkbox]').off('change');
                    $('#playerConsumptionSlipRewardTable input[type=checkbox]').on('change', tableRowClicked);

                    $("#playerConsumptionSlipRewardTable").off('order.dt');
                    $("#playerConsumptionSlipRewardTable").on('order.dt', function (event, a, b) {
                        vm.commonSortChangeHandler(a, 'consumptionSlipReward', vm.getConsumptionSlipReward);
                    });
                    $('#playerConsumptionSlipRewardTable').resize();

                })
            }, err => {
                $scope.$evalAsync( () => {
                    vm.consumptionSlipReward.loading = false;
                })
            });
        };

        vm.updateMultiSelectRewardList = function (elem) {

            let allClicked = $("#playerConsumptionSlipRewardTable tr input:checked[type='checkbox']");

                if (allClicked.length && allClicked.length > (vm.playerApplyRewardShow.returnData.quota - vm.playerApplyRewardShow.returnData.appliedTime)){
                    $scope.$evalAsync( () => {
                        elem.checked = false;

                        let clicked = $("#playerConsumptionSlipRewardTable tr input:checked[type='checkbox']");

                        if (clicked.length) {
                            vm.appliedRewardList = [];
                            clicked.each(function () {
                                let consumptionSlipObjId = $(this)[0] && $(this)[0].dataset._id ? $(this)[0].dataset._id : null;

                                if (consumptionSlipObjId) {
                                    vm.appliedRewardList.push({_id: consumptionSlipObjId});
                                }
                            })
                        }

                        socketService.showErrorMessage($translate("The available application quantity is") + " " + (vm.playerApplyRewardShow.returnData.quota - vm.playerApplyRewardShow.returnData.appliedTime));
                    })
                }
                else{
                    if (allClicked.length){
                        vm.appliedRewardList = [];
                        allClicked.each(function () {
                            let consumptionSlipObjId = $(this)[0] && $(this)[0].dataset._id ? $(this)[0].dataset._id : null;

                            if (consumptionSlipObjId) {
                                vm.appliedRewardList.push({_id: consumptionSlipObjId});
                            }
                        })
                    }
                }

            console.log("vm.appliedRewardList", vm.appliedRewardList);

        };

        vm.playerApplyRewardCodeChange = function (obj) {
            vm.playerApplyEventResult = null;
            if (!obj) return;
            let rewardObj = angular.fromJson(obj);
            if (!rewardObj) return;
            vm.playerApplyRewardPara.code = rewardObj.code;
            vm.playerApplyRewardShow.TopupRecordSelect = false;
            vm.playerApplyRewardShow.festivalSelect = false;
            let type = rewardObj.type ? rewardObj.type.name : null;
            vm.playerApplyRewardShow.returnData = {};


            if (type == 'PlayerConsumptionSlipRewardGroup' && rewardObj._id) {

                vm.playerApplyRewardShow.consumptionSlipReward = type;
                vm.prepareShowConsumptionSlipReward();
            }

            if (type == 'PlayerLoseReturnRewardGroup' && rewardObj.type && rewardObj.type._id){
                vm.playerApplyRewardShow.showLoseReturn = type;


                let idArr = [];
                if (vm.playerApplyRewardShow.topUpRecordIds) {
                    $.each(vm.playerApplyRewardShow.topUpRecordIds, function (i, v) {
                        if (v) {
                            idArr.push(i);
                        }
                    })
                }
                let sendQuery = {
                    code: vm.playerApplyRewardPara.code,
                    playerId: vm.isOneSelectedPlayer().playerId,
                    data: {
                        topUpRecordId: vm.playerApplyRewardPara.topUpRecordId,
                        topUpRecordIds: idArr,
                        amount: vm.playerApplyRewardPara.amount,
                        referralName: vm.playerApplyRewardPara.referralName,
                        previewDate: new Date(),
                        isPreview: true
                    },

                };

                if (rewardObj.condition && rewardObj.condition.interval == "6") {
                    sendQuery.data.previewDate = new Date(utilService.getThisMonthStartTime());
                }

                socketService.$socket($scope.AppSocket, 'applyRewardEvent', sendQuery, function (data) {

                    if (data && data.data) {
                        $scope.$evalAsync( () => {

                            vm.playerApplyRewardShow.returnData.defineLoseValue = data.data.defineLoseValue;
                            vm.playerApplyRewardShow.returnData.defineLoseValue$ = $translate($scope.loseValueType[data.data.defineLoseValue]);
                            vm.playerApplyRewardShow.returnData.startTime = utilService.$getTimeFromStdTimeFormat(data.data.startTime);
                            vm.playerApplyRewardShow.returnData.endTime = utilService.$getTimeFromStdTimeFormat(data.data.endTime);
                            vm.playerApplyRewardShow.returnData.rewardPercent = data.data.rewardPercent || 0;
                            vm.playerApplyRewardShow.returnData.rewardAmount = data.data.rewardAmount || 0;
                            vm.playerApplyRewardShow.returnData.maxReward = data.data.maxReward || 0;
                            vm.playerApplyRewardShow.returnData.spendingAmount = data.data.spendingAmount || 0;
                            vm.playerApplyRewardShow.returnData.interval = $translate(vm.rewardInterval[data.data.interval]);
                            if (data.data.hasOwnProperty('intervalTopupSum')){
                                vm.playerApplyRewardShow.returnData.intervalTopupSum = data.data.intervalTopupSum;
                            }
                            if (data.data.hasOwnProperty('intervalBonusSum')){
                                vm.playerApplyRewardShow.returnData.intervalBonusSum = data.data.intervalBonusSum;
                            }
                            if (data.data.hasOwnProperty('playerCreditLogSum')){
                                vm.playerApplyRewardShow.returnData.playerCreditLogSum = data.data.playerCreditLogSum;
                            }
                            if (data.data.hasOwnProperty('intervalRewardSum')){
                                vm.playerApplyRewardShow.returnData.intervalRewardSum = data.data.intervalRewardSum;
                            }
                            if (data.data.hasOwnProperty('intervalConsumptionSum')){
                                vm.playerApplyRewardShow.returnData.intervalConsumptionSum = data.data.intervalConsumptionSum;
                            }
                        })

                    }
                }, function (err) {
                    console.log(err);
                    vm.playerApplyRewardShow.showRewardAmount = 'Error';
                    $scope.safeApply();
                });

            }

            if (type == 'FirstTopUp') {
                vm.playerApplyRewardShow.selectTopupRecordsMulti = true;
                vm.playerApplyRewardShow.topUpRecordIds = {};
            } else {
                vm.playerApplyRewardShow.selectTopupRecordsMulti = false;
                vm.playerApplyRewardShow.topUpRecordIds = {};
            }

            if (type == "FirstTopUp" || type == "PlayerTopUpReturn" || type == "PartnerTopUpReturn" || type == "PlayerDoubleTopUpReward" || type == "PlayerTopUpReturnGroup" || type == "PlayerRetentionRewardGroup") {
                vm.playerApplyRewardShow.TopupRecordSelect = true;
                vm.playerAllTopupRecords = null;
                vm.getPlayerTopupRecord(null, rewardObj, type);
            }

            if (type == "PlayerFestivalRewardGroup") {
                vm.playerApplyRewardShow.festivalSelect = true;
                vm.getFestivalSelection(vm.isOneSelectedPlayer().playerLevel, vm.isOneSelectedPlayer().DOB, rewardObj);
            }

            vm.playerApplyRewardShow.AmountInput = type == "GameProviderReward";
            vm.playerApplyRewardShow.showReferral = type == "PlayerReferralReward"

            // PlayerConsumptionReturn
            vm.playerApplyRewardShow.showConsumptionReturn = type == "PlayerConsumptionReturn";
            vm.playerApplyRewardShow.consumptionReturnData = {};
            vm.totalConsumptionReturnData = {
                totalNonXIMA: 0,
                totalConsumption: 0,
                totalReturnAmt: 0
            };
            if (type == "PlayerConsumptionReturn") {
                socketService.$socket($scope.AppSocket, 'getConsumeRebateAmount', {
                    playerId: vm.isOneSelectedPlayer().playerId,
                    eventCode: vm.playerApplyRewardPara.code
                }, function (data) {
                    console.log('getConsumeRebateAmount', data);
                    vm.playerApplyRewardShow.showRewardAmount = parseFloat(data.data.totalAmount).toFixed(2);
                    vm.playerApplyRewardShow.consumptionReturnData = data.data;
                    delete vm.playerApplyRewardShow.consumptionReturnData.totalAmount;
                    delete vm.playerApplyRewardShow.consumptionReturnData.totalConsumptionAmount;
                    //$translate(vm.allGameTypes[record.gameType] || 'Unknown');
                    for (var key in vm.playerApplyRewardShow.consumptionReturnData) {
                        vm.playerApplyRewardShow.consumptionReturnData[key].consumptionAmount = parseFloat(vm.playerApplyRewardShow.consumptionReturnData[key].consumptionAmount).toFixed(2);
                        vm.playerApplyRewardShow.consumptionReturnData[key].returnAmount = parseFloat(vm.playerApplyRewardShow.consumptionReturnData[key].returnAmount).toFixed(2);
                        vm.playerApplyRewardShow.consumptionReturnData[key].ratio = parseFloat(vm.playerApplyRewardShow.consumptionReturnData[key].ratio).toFixed(4);
                        vm.playerApplyRewardShow.consumptionReturnData[key].nonXIMAAmt = parseFloat(vm.playerApplyRewardShow.consumptionReturnData[key].nonXIMAAmt).toFixed(2);
                        vm.playerApplyRewardShow.consumptionReturnData[$translate(vm.allGameTypes[key] || 'Unknown')] = vm.playerApplyRewardShow.consumptionReturnData[key];
                        vm.totalConsumptionReturnData.totalNonXIMA += parseFloat(vm.playerApplyRewardShow.consumptionReturnData[key].nonXIMAAmt)? parseFloat(vm.playerApplyRewardShow.consumptionReturnData[key].nonXIMAAmt): 0;
                        vm.totalConsumptionReturnData.totalConsumption += parseFloat(vm.playerApplyRewardShow.consumptionReturnData[key].consumptionAmount)? parseFloat(vm.playerApplyRewardShow.consumptionReturnData[key].consumptionAmount): 0;
                        vm.totalConsumptionReturnData.totalReturnAmt += parseFloat(vm.playerApplyRewardShow.consumptionReturnData[key].returnAmount)? parseFloat(vm.playerApplyRewardShow.consumptionReturnData[key].returnAmount): 0;
                        // hide consumption type that is not in current selecting platform
                        if (vm.playerApplyRewardShow.consumptionReturnData[$translate(vm.allGameTypes[key] || 'Unknown')].ratio == 0)
                            delete vm.playerApplyRewardShow.consumptionReturnData[$translate(vm.allGameTypes[key] || 'Unknown')]
                        delete vm.playerApplyRewardShow.consumptionReturnData[key];
                    }
                    vm.totalConsumptionReturnData.totalNonXIMA = vm.totalConsumptionReturnData.totalNonXIMA.toFixed(2);
                    vm.totalConsumptionReturnData.totalConsumption = vm.totalConsumptionReturnData.totalConsumption.toFixed(2);
                    vm.totalConsumptionReturnData.totalReturnAmt = vm.totalConsumptionReturnData.totalReturnAmt.toFixed(2);
                    $scope.safeApply();
                }, function (err) {
                    console.log(err);
                    vm.playerApplyRewardShow.showRewardAmount = 'Error';
                    $scope.safeApply();
                });
            }

            // PlayerConsecutiveLoginReward
            vm.playerApplyRewardShow.manualSignConsecutiveLogin = type == "PlayerConsecutiveLoginReward";
        };
        vm.applyPreviousConsecutiveLoginReward = function () {
            let sendQuery = {
                code: vm.playerApplyRewardPara.code,
                playerId: vm.isOneSelectedPlayer().playerId
            };
            socketService.$socket($scope.AppSocket, 'applyPreviousConsecutiveLoginReward', sendQuery, function (data) {
                console.log('sent', data);
                vm.playerApplyEventResult = data;
                vm.getPlatformPlayersData();
                $scope.safeApply();
            }, function (err) {
                vm.playerApplyEventResult = err;
                console.log(err);
                $scope.safeApply();
            });
        };

        vm.initPlayerAddRewardTask = function () {
            vm.playerAddRewardTask = {
                showSubmit: true,
                providerGroup: ''
            };
            vm.showRewardSettingsTab(null);
            // vm.selectedRewards = [];
            // $('#modalPlayerAddRewardTask').modal();
        };

        vm.submitAddPlayerRewardTask = function () {
            vm.playerAddRewardTask.showSubmit = false;
            let providerArr = [];
            for (let key in vm.playerAddRewardTask.provider) {
                if (vm.playerAddRewardTask.provider[key]) {
                    providerArr.push(key);
                }
            }
            let sendObj = {
                //targetProviders: providerArr,
                type: vm.playerAddRewardTask.type,
                rewardType: vm.playerAddRewardTask.type,
                platformId: vm.selectedSinglePlayer.platform,
                playerId: vm.selectedSinglePlayer._id,
                playerObjId: vm.selectedSinglePlayer._id,
                playerName: vm.selectedSinglePlayer.name,
                requiredUnlockAmount: vm.playerAddRewardTask.requiredUnlockAmount,
                currentAmount: vm.playerAddRewardTask.currentAmount,
                rewardAmount: vm.playerAddRewardTask.currentAmount,
                initAmount: vm.playerAddRewardTask.currentAmount,
                useConsumption: Boolean(vm.playerAddRewardTask.useConsumption),
                remark: vm.playerAddRewardTask.remark,
                eventCode: "manualReward"
            };

            if (vm.selectedPlatform && vm.selectedPlatform.data && vm.selectedPlatform.data.manualRewardSkipAuditAmount) {
                if (vm.playerAddRewardTask && vm.playerAddRewardTask.currentAmount) {
                    if (vm.playerAddRewardTask.currentAmount <= vm.selectedPlatform.data.manualRewardSkipAuditAmount) {
                        sendObj.isIgnoreAudit = true;
                    }
                }
            }

            if (!vm.selectedPlatform.data.useProviderGroup) {
                sendObj.targetProviders = providerArr;
            } else {
                sendObj.type = vm.constProposalType.ADD_PLAYER_REWARD_TASK,
                    sendObj.rewardType = vm.constProposalType.ADD_PLAYER_REWARD_TASK,
                    sendObj.providerGroup = vm.playerAddRewardTask.providerGroup;
                sendObj.isGroupReward = true;
            }

            console.log('sendObj', sendObj);
            socketService.$socket($scope.AppSocket, 'createPlayerRewardTask', sendObj, function (data) {
                vm.playerAddRewardTask.resMsg = $translate('SUCCESS');
                if (data.data && data.data.stepInfo) {
                    socketService.showProposalStepInfo(data.data.stepInfo, $translate);
                }
                $scope.safeApply();
            }, function (err) {
                vm.playerAddRewardTask.resMsg = err.error.message || $translate('FAIL');
                $scope.safeApply();
            })
        };

        vm.initManualUnlockRewardTask = function () {
            vm.manualUnlockRewardTask = {};
            vm.manualUnlockRewardTaskIndexList = [0];
            // vm.getRewardTaskDetail(vm.selectedSinglePlayer._id).then(function (data) {
            //     if (data) {
            //         vm.manualUnlockRewardTask.resMsg = "";
            //     }
            // });
            vm.selectedRewards = [];
        };

        vm.updateManualUnlockRewardTaskIndexList = function (index, checked) {
            if (checked) {
                vm.manualUnlockRewardTaskIndexList.push(index);
            } else {
                vm.manualUnlockRewardTaskIndexList.splice(vm.manualUnlockRewardTaskIndexList.indexOf(index), 1);
            }
        };

        vm.submitManualUnlockRewardTask = function (rewards) {

            if (!rewards) {
                vm.manualUnlockRewardTask.resMsg = "No reward tasks are selected to unlock.";
                $scope.safeApply();
                return;
            }

            let updateStatus = function updateStatus() {
                vm.manualUnlockRewardTask.resMsg =
                    taskCount == rewards.length ?
                        numberOfRewardUnlocked == rewards.length ?
                            $translate('Submitted proposal for approval') :
                            $translate('FAIL')
                        : "";

                $scope.safeApply();
            };
            let numberOfRewardUnlocked = 0, taskCount = 0;
            rewards.forEach(function (index) {
                taskCount++;
                index = Number(index);
                delete vm.selectedSinglePlayer.$displayDomain;
                delete vm.selectedSinglePlayer.$displaySourceUrl;
                socketService.$socket($scope.AppSocket, 'manualUnlockRewardTask', [vm.curRewardTask.data[index], vm.selectedSinglePlayer], function (data) {
                    console.log("Proposal to unlock reward " + vm.curRewardTask.data[index]._id + " is submitted for approval.");
                    numberOfRewardUnlocked++;
                    updateStatus();
                    vm.getRewardTaskLogData(true);

                }, function (err) {
                    if (err.error.message) {
                        console.log("Proposal to unlock reward " + vm.curRewardTask.data[index]._id + " failed to submit, error: " + err.error.message);
                    } else {
                        console.log("Proposal to unlock reward " + vm.curRewardTask.data[index]._id + " failed to submit.");
                    }
                    updateStatus();
                });
            });
        };
        //region prepareShowProposal
        vm.prepareShowProposal = function () {
            vm.playerProposal = {totalCount: 0};
            vm.proposalFilterstatus = 'all';
            vm.playerProposal.index = 0;
            vm.playerProposal.limit = vm.playerProposal && vm.playerProposal.limit ? vm.playerProposal.limit : 50;
            utilService.actionAfterLoaded(('#playerProposalData .endTime'), function () {
                vm.playerProposal.startTime = utilService.createDatePicker('#playerProposalData .startTime');
                vm.playerProposal.endTime = utilService.createDatePicker('#playerProposalData .endTime');
                vm.playerProposal.startTime.data('datetimepicker').setDate(utilService.setLocalDayStartTime(utilService.setNDaysAgo(new Date(), 1)));
                vm.playerProposal.endTime.data('datetimepicker').setDate(utilService.setLocalDayEndTime(new Date()));
                vm.playerProposal.pageObj = utilService.createPageForPagingTable("#playerProposalTablePage", {pageSize: 50}, $translate, function (curP, pageSize) {
                    vm.commonPageChangeHandler(curP, pageSize, "playerProposal", vm.getPlayerProposalByFilter)
                });
                //set time out to solve $rootScope:inprog error
                setTimeout(function () {
                    $('select#selectProposalType').multipleSelect({
                        allSelected: $translate("All Selected"),
                        selectAllText: $translate("Select All"),
                        displayValues: true,
                        countSelected: $translate('# of % selected'),
                    });
                    var $multi = ($('select#selectProposalType').next().find('.ms-choice'))[0];
                    $('select#selectProposalType').next().on('click', 'li input[type=checkbox]', function () {
                        var upText = $($multi).text().split(',').map(item => {
                            return $translate(item);
                        }).join(',');
                        $($multi).find('span').text(upText)
                    });
                    $("select#selectProposalType").multipleSelect("checkAll");

                    $('select#selectRewardType').multipleSelect({
                        allSelected: $translate("All Selected"),
                        selectAllText: $translate("Select All"),
                        displayValues: true,
                        countSelected: $translate('# of % selected'),
                    });
                    var $multi = ($('select#selectRewardType').next().find('.ms-choice'))[0];
                    $('select#selectRewardType').next().on('click', 'li input[type=checkbox]', function () {
                        var upText = $($multi).text().split(',').map(item => {
                            return $translate(item);
                        }).join(',');
                        $($multi).find('span').text(upText)
                    });
                    $("select#selectRewardType").multipleSelect("checkAll");

                    $('select#selectPromoType').multipleSelect({
                        allSelected: $translate("All Selected"),
                        selectAllText: $translate("Select All"),
                        displayValues: true,
                        countSelected: $translate('# of % selected'),
                    });
                    var $multi = ($('select#selectPromoType').next().find('.ms-choice'))[0];
                    $('select#selectPromoType').next().on('click', 'li input[type=checkbox]', function () {
                        var upText = $($multi).text().split(',').map(item => {
                            return $translate(item);
                        }).join(',');
                        $($multi).find('span').text(upText)
                    });
                    $("select#selectPromoType").multipleSelect("checkAll");

                    vm.getPlayerProposalByFilter(true);
                });
            });
        }

        vm.getPlayerProposalByFilter = function (newSearch) {
            var newproposalQuery = {};
            var proposalNames = $('select#selectProposalType').multipleSelect("getSelects");
            newproposalQuery.proposalTypeName = [];
            if (vm.allProposalType.length != proposalNames.length) {
                vm.allProposalType.filter(item => {
                    if (proposalNames.indexOf(item.name) > -1) {
                        newproposalQuery.proposalTypeName.push(item.name);
                    }
                });
            }

            var rewardTypes = $('select#selectRewardType').multipleSelect("getSelects");
            newproposalQuery.eventName = [];
            if (vm.rewardList.length != rewardTypes.length) {
                vm.rewardList.filter(item => {
                    if (rewardTypes.indexOf(item.name) > -1) {
                        newproposalQuery.eventName.push(item.name);
                    }
                });
            }

            vm.promoTypeListUniqueName = [...new Set(vm.promoTypeList.map(x => x.name))];

            var promoType = $('select#selectPromoType').multipleSelect("getSelects");
            console.log('promoType===', promoType);
            newproposalQuery.promoTypeName = [];
            if (vm.promoTypeListUniqueName.length != promoType.length) {
                vm.promoTypeListUniqueName.filter(item => {
                    if (promoType.indexOf(item) > -1) {
                        newproposalQuery.promoTypeName.push(item);
                    }
                });
            }

            newproposalQuery.status = [];
            if (vm.proposalFilterstatus == "all") {
                newproposalQuery.status = vm.allProposalStatus;
            } else {
                if (vm.proposalFilterstatus == vm.proposalStatusList.SUCCESS || vm.proposalFilterstatus == vm.proposalStatusList.APPROVED) {
                    newproposalQuery.status.push("Approved");
                } else if (vm.proposalFilterstatus == vm.proposalStatusList.FAIL) {
                    newproposalQuery.status.push("Rejected");
                }
                newproposalQuery.status.push(vm.proposalFilterstatus)
            }

            vm.playerProposal.loading = true;
            let sendData = {
                startDate: vm.playerProposal.startTime.data('datetimepicker').getLocalDate(),
                endDate: vm.playerProposal.endTime.data('datetimepicker').getLocalDate(),
                adminId: authService.adminId,
                platformId: vm.selectedSinglePlayer.platform,
                type: newproposalQuery.proposalTypeName,
                size: vm.playerProposal.limit || 50,
                index: newSearch ? 0 : (vm.playerProposal.index || 0),
                sortCol: vm.playerProposal.sortCol,
                status: newproposalQuery.status,
                playerId: vm.selectedSinglePlayer._id,
                eventName: newproposalQuery.eventName,
                promoTypeName: newproposalQuery.promoTypeName
            };

            socketService.$socket($scope.AppSocket, 'getQueryProposalsForAdminId', sendData, function (data) {
                console.log('playerproposal', data);
                vm.playerProposal.loading = false;

                var drawData = data.data.data.map(item => {
                    item.involveAmount$ = 0;
                    if (item.data.updateAmount) {
                        item.involveAmount$ = item.data.updateAmount;
                    } else if (item.data.amount) {
                        item.involveAmount$ = item.data.amount;
                    } else if (item.data.rewardAmount) {
                        item.involveAmount$ = item.data.rewardAmount;
                    } else if (item.data.commissionAmount) {
                        item.involveAmount$ = item.data.commissionAmount;
                    } else if (item.data.negativeProfitAmount) {
                        item.involveAmount$ = item.data.negativeProfitAmount;
                    }
                    item.involveAmount$ = $noRoundTwoDecimalPlaces(item.involveAmount$);
                    item.typeName = $translate(item.type.name || "Unknown");
                    item.mainType$ = $translate(item.mainType || "Unknown");
                    item.createTime$ = utilService.$getTimeFromStdTimeFormat(item.createTime);
                    item.status$ = $translate(item.status ? item.type.name == "PlayerBonus" || item.type.name == "PartnerBonus" ? item.status == "Approved" ? "approved" : item.status : item.status : item.process.status);

                    if (item.data && item.data.remark) {
                        item.remark$ = item.data.remark;
                    }

                    if (item.data && item.data.autoAuditRemarkChinese) {
                        if (item.remark$) {
                            item.remark$ += item.data.autoAuditRemarkChinese;
                        } else {
                            item.remark$ = item.data.autoAuditRemarkChinese;
                        }
                    }

                    if (item.data && item.data.rejectRemark) {
                        if (item.remark$) {
                            item.remark$ += item.data.rejectRemark;
                        } else {
                            item.remark$ = item.data.rejectRemark;
                        }
                    }

                    return item;
                })
                vm.playerProposal.totalCount = data.data.size;
                vm.drawPlayerProposal(drawData, newSearch, data.data.summary);
            }, null, true);
        };

        vm.safeApply = function () {
            $scope.safeApply();
        }

        vm.drawPlayerProposal = function (tblData, newSearch, summary) {
            var option = $.extend({}, vm.generalDataTableOptions, {
                data: tblData,
                "aaSorting": vm.playerProposal.aaSorting,
                aoColumnDefs: [
                    {'sortCol': 'proposalId', bSortable: true, 'aTargets': [0]},
                    {'sortCol': 'createTime', bSortable: true, 'aTargets': [8]},
                    {targets: '_all', defaultContent: ' ', bSortable: false}
                ],

                columns: [
                    {
                        title: $translate('PROPOSAL_NO'),
                        data: "proposalId",
                        render: function (data, type, row) {
                            var link = $('<a>', {

                                'ng-click': 'vm.showProposalModal("' + data + '",1)'

                            }).text(data);
                            return link.prop('outerHTML');
                        },
                        sClass: "proposalLinks"
                    },
                    {
                        title: $translate('CREATOR'),
                        data: null,
                        render: function (data, type, row) {
                            if (data.hasOwnProperty('creator')) {
                                return data.creator.name;
                            } else {

                                //here's to check creator is not null
                                var creator;
                                if(data && data.creator){

                                    if(data.creator.type === "admin"){
                                        creator = data.creator.name;

                                    }else if(data.creator.type === "player"){
                                        creator = $translate('System');
                                        creator += "(" + data.creator.name + ")";
                                    }

                                }else{
                                    //found out not all proposal has creator, this original checking for non-creator proposal
                                    creator = $translate('System');
                                    if (data && data.data && data.data.playerName) {
                                        creator += "(" + data.data.playerName + ")";
                                    }
                                }
                                return creator;

                                //This is the original, revert it if the new checking doesn't work
                                // var creator = $translate('System');
                                // if (data && data.data && data.data.playerName) {
                                //     creator += "(" + data.data.playerName + ")";
                                // }
                                // return creator;
                            }
                        }
                    },
                    {
                        title: $translate('INPUT_DEVICE'),
                        data: "inputDevice",
                        render: function (data, type, row) {
                            for (let i = 0; i < Object.keys(vm.inputDevice).length; i++) {
                                if (vm.inputDevice[Object.keys(vm.inputDevice)[i]] == data) {
                                    return $translate(Object.keys(vm.inputDevice)[i]);
                                }
                            }
                        }
                    },
                    {
                        title: $translate('PROPOSAL TYPE'), data: ("mainType$"),
                        orderable: false,
                        // render: function (data) {
                        //     return $translate(data);
                        // }
                    },
                    {
                        title: $translate('PROPOSAL_SUB_TYPE'), data: null,
                        orderable: false,
                        render: function (data, type, row) {
                            if (data && data.data && data.data.PROMO_CODE_TYPE) {
                                return data.data.PROMO_CODE_TYPE;
                            } else if (data && data.data && data.data.eventName) {
                                return data.data.eventName;
                            } else {
                                return data.typeName;
                            }
                        }
                    },
                    {
                        title: "<div>" + $translate('Proposal Status'), data: "status$",
                        orderable: false,
                        // render: function (data, type, row) {
                        //     return $translate(vm.getStatusStrfromRow(row))
                        // }
                    },
                    {
                        title: "<div>" + $translate('INVOLVED_ACC'),
                        "data": null,
                        render: function (data, type, row) {
                            if (data.hasOwnProperty('creator') && data.creator.type == 'player') {
                                return data.creator.name;
                            }
                            if (data && data.data && data.data.playerName) {
                                return data.data.playerName;
                            }
                            else if (data && data.data && data.data.partnerName) {
                                return data.data.partnerName;
                            }
                            else {
                                return "";
                            }
                        },
                        orderable: false,
                        sClass: "sumText"
                    },
                    {
                        title: $translate('Amount Involved'), data: "involveAmount$", defaultContent: 0,
                        orderable: false,
                        sClass: "sumFloat alignRight",
                    },
                    {
                        title: "<div>" + $translate('START_TIME'), data: "createTime$",
                        // render: function (data, type, row) {
                        //     return utilService.$getTimeFromStdTimeFormat(data);
                        // },
                        defaultContent: 0
                    },
                    {
                        title: "<div>" + $translate('Player Level'), data: "data.proposalPlayerLevel",
                        orderable: false,
                    },
                    {
                        title: "<div>" + $translate('REMARKS'), data: "remark$",
                        orderable: false,
                    }

                ],
                // destroy: true,
                paging: false,
                fnRowCallback: function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                    $(nRow).off('click');
                    $(nRow).find('a').on('click', function () {
                        vm.showProposalModal(aData.proposalId, 1);
                    });
                }
                // autoWidth: true
            });

            // $('#playerProposalTable').DataTable(option);
            var a = utilService.createDatatableWithFooter('#playerProposalTable', option, {7: summary.amount});

            vm.playerProposal.pageObj.init({maxCount: vm.playerProposal.totalCount}, newSearch);
            $("#playerProposalTable").off('order.dt');
            $("#playerProposalTable").on('order.dt', function (event, a, b) {
                vm.commonSortChangeHandler(a, 'playerProposal', vm.getPlayerProposalByFilter);
            });
            // setTimeout(function () {
            $('#playerProposalTable').resize();
            // }, 300);
            $scope.safeApply();
        }
        //endregion

        vm.prepareShowPlayerExpense = function () {
            vm.playerExpenseLog = {totalCount: 0};
            vm.playerExpenseLog.index = 0;
            vm.playerExpenseLog.limit = vm.playerExpenseLog && vm.playerExpenseLog.limit ? vm.playerExpenseLog.limit : 50;
            vm.initQueryTimeFilter('playerExpense', function () {
                $('#modalPlayerExpenses').modal();
                vm.playerExpenseLog.pageObj = utilService.createPageForPagingTable("#playerExpenseTablePage", {pageSize: 50}, $translate, function (curP, pageSize) {
                    vm.commonPageChangeHandler(curP, pageSize, "playerExpenseLog", vm.getPlayerExpenseByFilter)
                });
                vm.getPlayerExpenseByFilter(true);
            });
        };
        vm.getPlayerExpenseByFilter = function (newSearch) {
            let sendData = {
                startTime: vm.queryPara.playerExpense.startTime.data('datetimepicker').getLocalDate(),
                endTime: vm.queryPara.playerExpense.endTime.data('datetimepicker').getLocalDate(),
                playerId: vm.isOneSelectedPlayer()._id,
                index: newSearch ? 0 : (vm.playerExpenseLog.index || 0),
                limit: newSearch ? vm.playerExpenseLog.limit : (vm.playerExpenseLog.limit || 50),
                sortCol: vm.playerExpenseLog.sortCol || null
            };
            // if (vm.queryPara.playerExpense.dirty == 'Y') {
            //     sendData.dirty = true;
            // } else if (vm.queryPara.playerExpense.dirty == 'N') {
            //     sendData.dirty = false;
            // }
            if (vm.queryPara.playerExpense.providerId) {
                sendData.providerId = vm.queryPara.playerExpense.providerId
            }
            if (vm.queryPara.playerExpense.gameName) {
                sendData.gameName = vm.queryPara.playerExpense.gameName;
            }
            if (vm.queryPara.playerExpense.roundNoOrPlayNo) {
                sendData.roundNoOrPlayNo = vm.queryPara.playerExpense.roundNoOrPlayNo;
            }
            if (vm.queryPara.playerExpense.cpGameType) {
                sendData.cpGameType = vm.queryPara.playerExpense.cpGameType;
            }
            vm.playerExpenseLog.loading = true;
            console.log("Query", sendData);
            vm.prepareShowPlayerExpenseRecords(sendData, newSearch);
            $("#playerExpenseTable").off('order.dt');
            $("#playerExpenseTable").on('order.dt', function (event, a, b) {
                vm.commonSortChangeHandler(a, 'playerExpenseLog', vm.getPlayerExpenseByFilter);
            });
        }

        vm.prepareShowPlayerExpenseRecords = function (queryData, newSearch) {
            vm.playerAllExpenseRecords = [];
            socketService.$socket($scope.AppSocket, 'getPlayerConsumptionRecords', queryData, function (data) {
                vm.playerAllExpenseRecords = data.data.data;
                vm.playerExpenseLog.totalCount = data.data.size;
                var summary = data.data.summary || {};
                vm.playerExpenseLog.loading = false;
                console.log('consumption record', data);
                var validAmount = 0;
                var amount = 0;
                var bonusAmount = 0;
                var tableData = vm.playerAllExpenseRecords.map(
                    record => {
                        validAmount += Number(record.validAmount);
                        amount += Number(record.amount);
                        bonusAmount += Number(record.bonusAmount);
                        record.createTime$ = vm.dateReformat(record.createTime);
                        record.insertTime$ = vm.dateReformat(record.insertTime);
                        record.updateTime$ = vm.dateReformat(record.updateTime);
                        // record.gameType$ = $translate(vm.allGameTypes[record.gameType] || 'Unknown');
                        record.validAmount$ = parseFloat(record.validAmount).toFixed(2);
                        record.amount$ = parseFloat(record.amount).toFixed(2);
                        record.bonusAmount$ = parseFloat(record.bonusAmount).toFixed(2);
                        record.commissionAmount$ = parseFloat(record.commissionAmount).toFixed(2);
                        // record.bDirty$ = record.bDirty ? $translate('Yes') : $translate('No');
                        record.bDirty$ = record.bDirty ? $translate('UNABLE') : $translate('ABLE');
                        record.roundResult$ = record.result || "";
                        record.roundId$ = record.roundNo || "";
                        record.matchId$ = record.playNo || "";
                        record.gameType$ = record.cpGameType || record.gameId.name || "";
                        record.betType$ = record.betType || "";
                        record.remark$ = record.playDetail || "";
                        return record
                    }
                );
                vm.totalConsumptionAmount = parseFloat(amount).toFixed(2);
                vm.totalConsumptionValidAmount = parseFloat(validAmount).toFixed(2);
                vm.totalConsumptionBonusAmount = parseFloat(bonusAmount).toFixed(2);
                var option = $.extend({}, vm.generalDataTableOptions, {
                    data: tableData,
                    "aaSorting": vm.playerExpenseLog.aaSorting || [[7, 'desc']],
                    aoColumnDefs: [
                        {'sortCol': 'orderNo', bSortable: true, 'aTargets': [0]},
                        {'sortCol': 'createTime', bSortable: true, 'aTargets': [7]},
                        {'sortCol': 'providerId', bSortable: true, 'aTargets': [1]},
                        {'sortCol': 'gameId', bSortable: true, 'aTargets': [5]},
                        // {'sortCol': 'gameType', bSortable: true, 'aTargets': [4]},
                        // {'sortCol': 'roundNo', bSortable: true, 'aTargets': [4]},
                        {'sortCol': 'validAmount', bSortable: true, 'aTargets': [8]},
                        {'sortCol': 'amount', bSortable: true, 'aTargets': [10]},
                        {'sortCol': 'bonusAmount', bSortable: true, 'aTargets': [9]},
                        // {'sortCol': 'commissionAmount', bSortable: true, 'aTargets': [8]},
                        // {'sortCol': 'rewardAmount', bSortable: true, 'aTargets': [7]},
                        {targets: '_all', defaultContent: ' ', bSortable: false}
                    ],

                    columns: [
                        {title: $translate('orderId'), data: "orderNo"},
                        {title: $translate('PROVIDER'), data: "providerId.name"},
                        {title: $translate('ROUND_RESULT'), data: "roundResult$"},
                        {title: $translate('ROUND_ID'), data: "roundId$"},
                        {title: $translate('MATCH_ID'), data: "matchId$"},
                        {title: $translate('GAME_TYPE'), data: "gameType$"},
                        {title: $translate('BET_TYPE'), data: "betType$", sClass: 'sumText'},
                        {
                            title: $translate('BET_TIME'),
                            data: "createTime$",
                            render: function (data, type, row) {
                                let insertTime$ = row && row.insertTime$ || "";
                                let updateTime$ = row && row.updateTime$ || "";
                                return "<span title='" + $translate("INSERT_TIME") + ": " + insertTime$ + "&#013;" +  $translate("UPDATE_TIME") + ": " + updateTime$ + "'>" + data + "</span>";
                            }
                        },
                        {title: $translate('VALID_AMOUNT'), data: "validAmount$", sClass: 'alignRight sumFloat'},
                        {
                            title: $translate('bonusAmount1'),
                            data: "bonusAmount$", sClass: 'alignRight sumFloat'
                        },
                        {
                            title: $translate('Total Amount'),
                            data: "amount$",
                            bSortable: true,
                            sClass: 'alignRight sumFloat'
                        },
                        {title: $translate('REMARK'), data: "remark$"},
                        {title: $translate('COUNT'), data: "count"},
                        //{title: $translate('CONSUMPTION_RETURN_ABILITY'), data: "bDirty$"},
                        // {
                        //     title: $translate('commissionAmount'),
                        //     data: "commissionAmount$",
                        //     sClass: "alignRight sumFloat"
                        // },
                    ],
                    destroy: true,
                    paging: false,
                    autoWidth: true
                });
                // $('#playerExpenseTable').DataTable(option);
                var a = utilService.createDatatableWithFooter('#playerExpenseTable', option, {
                    8: summary.validAmountSum,
                    9: summary.bonusAmountSum,
                    10: summary.amountSum,
                    // 8: summary.commissionAmountSum
                });
                vm.playerExpenseLog.pageObj.init({maxCount: vm.playerExpenseLog.totalCount}, newSearch);
                setTimeout(function () {
                    $('#playerExpenseTable').resize();
                }, 300);
                $scope.safeApply();
            });
        };


        // daily player expense
        vm.prepareShowPlayerDailyExpense = function () {
            vm.playerDailyExpenseLog = {totalCount: 0};
            vm.initQueryTimeFilter('playerDailyExpense', function () {
                $('#modalPlayerDailyExpenses').modal();
                vm.playerDailyExpenseLog.pageObj = utilService.createPageForPagingTable("#playerDailyExpenseTablePage", {}, $translate, function (curP, pageSize) {
                    vm.commonPageChangeHandler(curP, pageSize, "playerDailyExpenseLog", vm.getPlayerDailyExpenseByFilter)
                });
                vm.getPlayerDailyExpenseByFilter(true);
            });
        }
        vm.getPlayerDailyExpenseByFilter = function (newSearch) {
            var sendData = {
                startTime: vm.queryPara.playerDailyExpense.startTime.data('datetimepicker').getLocalDate(),
                endTime: vm.queryPara.playerDailyExpense.endTime.data('datetimepicker').getLocalDate(),
                playerId: vm.isOneSelectedPlayer()._id,
                index: newSearch ? 0 : (vm.playerDailyExpenseLog.index || 0),
                limit: newSearch ? 10 : (vm.playerDailyExpenseLog.limit || 10),
                sortCol: vm.playerDailyExpenseLog.sortCol || null
            };
            if (vm.queryPara.playerDailyExpense.dirty == 'Y') {
                sendData.dirty = true;
            } else if (vm.queryPara.playerDailyExpense.dirty == 'N') {
                sendData.dirty = false;
            }
            if (vm.queryPara.playerDailyExpense.providerId) {
                sendData.providerId = vm.queryPara.playerDailyExpense.providerId
            }
            vm.playerDailyExpenseLog.loading = true;
            console.log("Query", sendData);
            vm.prepareShowPlayerDailyExpenseRecords(sendData, newSearch);
            $("#playerDailyExpenseTable").off('order.dt');
            $("#playerDailyExpenseTable").on('order.dt', function (event, a, b) {
                vm.commonSortChangeHandler(a, 'playerDailyExpenseLog', vm.getPlayerDailyExpenseByFilter);
            });
        }


        vm.prepareShowRepairPayment = function (modalID) {

            vm.repairProposalId = null;
            vm.submitRepairePayementStep = 0;
            vm.processDataTableinModal(modalID, '#playerRepairPaymentTbl', null, function () {
                var queryData = {
                    playerId: vm.isOneSelectedPlayer()._id,
                    platformId: vm.selectedPlatform.data._id
                }
                socketService.$socket($scope.AppSocket, 'getPlayerPendingPaymentProposal', queryData, function (data) {
                    vm.allPendingRequest = data.data ? data.data.map(item => {
                        item.createTime$ = vm.dateReformat(item.createTime);
                        item.merchantUseType$ = item.data.merchantUseType ? $scope.merchantUseTypeJson[item.data.merchantUseType] : "NULL";
                        item.topupType$ = item.data.topupType ? $scope.merchantTopupTypeJson[item.data.topupType] : "NULL";
                        return item;
                    }) : [];
                    $scope.safeApply();
                    vm.updateDataTableinModal(modalID, '#playerRepairPaymentTbl', null, function (tbl) {
                        $('#playerRepairPaymentTbl tbody').on('click', 'tr', function () {
                            if ($(this).hasClass('selected')) {
                                $(this).removeClass('selected');
                                vm.repairProposalId = null;
                            } else {
                                tbl.$('tr.selected').removeClass('selected');
                                $(this).addClass('selected');
                                vm.repairProposalId = tbl.row(this).data()[1];
                            }
                            $scope.safeApply();
                        });
                    });
                });
            });
        }
        vm.prepareShowPlayerDailyExpenseRecords = function (queryData, newSearch) {
            vm.playerDailyExpenseRecords = [];
            socketService.$socket($scope.AppSocket, 'getGameProviderPlayerDaySummary', queryData, function (data) {
                vm.playerDailyExpenseRecords = data.data.data;
                vm.playerDailyExpenseLog.totalCount = data.data.size;
                var summary = data.data.summary || {};
                vm.playerDailyExpenseLog.loading = false;
                console.log('consumption record', data);
                var validAmount = 0;
                var amount = 0;
                var bonusAmount = 0;
                var tableData = vm.playerDailyExpenseRecords.map(
                    record => {
                        validAmount += Number(record.validAmount);
                        amount += Number(record.amount);
                        bonusAmount += Number(record.bonusAmount);
                        record.date = vm.dateReformat(record.date);
                        // record.gameType$ = $translate(vm.allGameTypes[record.gameType] || 'Unknown');
                        record.validAmount$ = parseFloat(record.validAmount).toFixed(2);
                        record.amount$ = parseFloat(record.amount).toFixed(2);
                        record.bonusAmount$ = parseFloat(record.bonusAmount).toFixed(2);
                        record.commissionAmount$ = parseFloat(record.commissionAmount).toFixed(2);
                        record.bDirty$ = record.bDirty ? $translate('Yes') : $translate('No');
                        return record
                    }
                );
                vm.totalConsumptionAmount = parseFloat(amount).toFixed(2);
                vm.totalConsumptionValidAmount = parseFloat(validAmount).toFixed(2);
                vm.totalConsumptionBonusAmount = parseFloat(bonusAmount).toFixed(2);
                var option = $.extend({}, vm.generalDataTableOptions, {
                    data: tableData,
                    "aaSorting": vm.playerDailyExpenseLog.aaSorting || [[1, 'desc']],
                    aoColumnDefs: [
                        {'sortCol': 'createTime', bSortable: true, 'aTargets': [0]},
                        {'sortCol': 'providerId', bSortable: true, 'aTargets': [1]},
                        {'sortCol': 'gameId', bSortable: true, 'aTargets': [2]},
                        // {'sortCol': 'gameType', bSortable: true, 'aTargets': [4]},
                        // {'sortCol': 'roundNo', bSortable: true, 'aTargets': [4]},
                        {'sortCol': 'validAmount', bSortable: true, 'aTargets': [3]},
                        {'sortCol': 'amount', bSortable: true, 'aTargets': [4]},
                        {'sortCol': 'bonusAmount', bSortable: true, 'aTargets': [5]},
                        // {'sortCol': 'commissionAmount', bSortable: true, 'aTargets': [8]},
                        // {'sortCol': 'rewardAmount', bSortable: true, 'aTargets': [7]},
                        {targets: '_all', defaultContent: ' ', bSortable: false}
                    ],

                    columns: [
                        {title: $translate('CREATION_TIME'), data: "date"},
                        {title: $translate('PROVIDER'), data: "providerId.name"},
                        {title: $translate('GAME_TITLE'), data: "gameId.name", sClass: 'sumText'},
                        // {title: $translate('GAME_TYPE'), data: "gameType$", sClass: 'sumText'},
                        // {title: $translate('Game Round'), data: "roundNo", sClass: 'sumText'},
                        {title: $translate('VALID_AMOUNT'), data: "validAmount$", sClass: 'alignRight sumFloat'},
                        {
                            title: $translate('CREDIT'),
                            data: "amount$",
                            bSortable: true,
                            sClass: 'alignRight sumFloat'
                        },
                        {
                            title: $translate('bonusAmount1'),
                            data: "bonusAmount$", sClass: 'alignRight sumFloat'
                        },
                        {title: $translate('Occupy'), data: "bDirty$"},
                        // {
                        //     title: $translate('commissionAmount'),
                        //     data: "commissionAmount$",
                        //     sClass: "alignRight sumFloat"
                        // },
                    ],
                    destroy: true,
                    paging: false,
                    autoWidth: true,
                    initComplete: function () {
                        $scope.safeApply();
                    }
                });
                // $('#playerExpenseTable').DataTable(option);
                var a = utilService.createDatatableWithFooter('#playerDailyExpenseTable', option, {
                    3: summary.validAmountSum,
                    4: summary.amountSum,
                    5: summary.bonusAmountSum,
                    // 8: summary.commissionAmountSum
                });
                vm.playerDailyExpenseLog.pageObj.init({maxCount: vm.playerDailyExpenseLog.totalCount}, newSearch);
                setTimeout(function () {
                    $('#playerDailyExpenseTable').resize();
                }, 500);
            });
        };

        vm.submitRepairPayment = function () {
            vm.submitRepairePayementStep = 1;
            $scope.safeApply();
            socketService.$socket($scope.AppSocket, 'submitRepairPaymentProposal', {proposalId: vm.repairProposalId, platform: vm.selectedPlatform.id}, function (data) {
                vm.submitRepairePayementStep = 2;
                vm.getPlatformPlayersData();
                $scope.safeApply();
            }, function (error) {
                vm.submitRepairePayementStep = 3;
                vm.getPlatformPlayersData();
                $scope.safeApply();
            })
        }

        vm.processDataTableinModal = function (modalID, tableID, option, callback) {
            //modalID=#modalPlayerExpenses
            //tableID=#playerExpenseTable
            //when creating datatable in a modal, need manually show the modal instead of using data-target
            function clearExistDatatable(callback) {
                $(modalID + ' ' + tableID + '_wrapper').each(function (i, v) {
                    $(v).remove();
                })
                thisTable = '';
                if (callback) {
                    callback();
                }
            }

            var thisTable = '';
            $(modalID).on('shown.bs.modal', function () {
                $(modalID).off('shown.bs.modal');
                $scope.safeApply();
                var $table = $(tableID);
                if ($table) {
                    $table.show();
                    var temp = $table.clone().insertAfter($table);
                    clearExistDatatable(function () {
                        var newTblOption = $.extend({}, vm.generalDataTableOptions, option)
                        thisTable = temp.DataTable(newTblOption);
                        $table.hide();
                        if (thisTable) {
                            thisTable.columns.adjust().draw();
                        }
                        if (callback) {
                            callback();
                        }
                    })
                }
            });
            $(modalID).on('hidden.bs.modal', function () {
                $(modalID).off('hidden.bs.modal');
                clearExistDatatable();
            });
            $(modalID).modal().show();
        }

        vm.updateDataTableinModal = function (modalID, tableID, opt, callback) {
            var thisTable = '';
            var tblOptions = $.extend(true, {}, vm.generalDataTableOptions, opt);
            $scope.safeApply();
            var $table = $(tableID);
            $(modalID + ' ' + tableID + '_wrapper').each(function (i, v) {
                $(v).remove();
            })
            if ($table) {
                var temp = $table.clone().insertAfter($table).show();
                thisTable = temp.DataTable(tblOptions);
                if (thisTable) {
                    thisTable.columns.adjust().draw();
                }
                if (callback) {
                    callback(thisTable);
                }
            }
        };
        // vm.preparePlayerFeedback = function () {
        //     socketService.$socket($scope.AppSocket, 'getPlayerFeedbackResults', {}, function (data) {
        //         vm.allPlayerFeedbackString = data.data;
        //         console.log('allfeedback', data);
        //         $scope.safeApply();
        //     });
        // };

        // todo :: comment these out since not use anymore
        vm.prepareShowPlayerForbidTopUpType = function () {
            let sendData = {_id: vm.isOneSelectedPlayer()._id};

            socketService.$socket($scope.AppSocket, 'getOnePlayerInfo', sendData, (playerData) => {
                vm.showForbidTopupTypes = playerData.data.forbidTopUpType || [];
                $scope.safeApply();
            });
        }
        vm.playerTopupTypes = function (type, index) {
            if (type == 'add') {
                vm.showForbidTopupTypes.push(index.toString());
                vm.showForbidTopupTypes.sort(function (a, b) {
                    return a - b
                })
            } else if (type == 'del') {
                vm.showForbidTopupTypes.splice(vm.showForbidTopupTypes.indexOf(index), 1);
            }
            $scope.safeApply();
        }
        vm.confirmUpdatePlayerTopupTypes = function (sendData) {
            sendData = sendData || {
                query: {_id: vm.isOneSelectedPlayer()._id},
                updateData: {forbidTopUpType: vm.showForbidTopupTypes || []}
            };

            console.log('sendData', sendData)
            socketService.$socket($scope.AppSocket, 'updatePlayerForbidPaymentType', sendData, function (data) {
                vm.getPlatformPlayersData();
                let forbidTopUpNames = [];
                for (let i = 0; i < data.data.forbidTopUpType.length; i++) {
                    forbidTopUpNames[i] = vm.merchantTopupTypeJson[data.data.forbidTopUpType[i]];
                }
                vm.updateForbidTopUpLog(data.data._id, forbidTopUpNames);
                $scope.safeApply();
            });
        }

        vm.confirmBatchUpdatePlayerTopupTypes = function (sendData) {

            console.log('sendData', sendData)
            socketService.$socket($scope.AppSocket, 'updateBatchPlayerForbidPaymentType', sendData, function (data) {
                vm.getPlatformPlayersData();
                vm.updateBatchForbidTopUpLog(data);
                $scope.safeApply();
            });
        }

        vm.selectedDepositMethod = function (depositMethod) {
            if (depositMethod == "1" || depositMethod == "3" || depositMethod == "4") {
                vm.playerManualTopUp.realName = vm.selectedSinglePlayer.realName;
            }
            if (depositMethod == "3") {
                vm.playerManualTopUp.remark = vm.selectedSinglePlayer.playerId;
                vm.playerManualTopUp.provinceId = "";
            } else {
                vm.playerManualTopUp.remark = "";
                vm.playerManualTopUp.provinceId = vm.provinceList[0].id;
            }

            // vm.listBankByDepositMethod = vm.depositMethodType[depositMethod];
            // vm.listBankByDepositMethod.forEach(bank => {
            //     let bankStatus = $translate(bank.status == 'DISABLED' ? 'DISABLE' : bank.status);
            //     bank.displayText = bank.name
            //         + ' ('+bank.bankTypeId+') - ' + $translate('SINGLE_LIMIT') + ':' +bank.maxDepositAmount;
            //     return bank;
            // });
        };
        vm.applyPlayerManualTopUp = function () {
            var sendData = {
                playerId: vm.isOneSelectedPlayer().playerId,
                depositMethod: vm.playerManualTopUp.depositMethod,
                amount: vm.playerManualTopUp.amount,
                lastBankcardNo: vm.playerManualTopUp.lastBankcardNo,
                bankTypeId: vm.playerManualTopUp.bankTypeId,
                provinceId: vm.playerManualTopUp.provinceId,
                cityId: vm.playerManualTopUp.cityId,
                districtId: vm.playerManualTopUp.districtId,
                fromFPMS: true,
                createTime: vm.playerManualTopUp.createTime.data('datetimepicker').getLocalDate(),
                remark: vm.playerManualTopUp.remark,
                groupBankcardList: vm.playerManualTopUp.groupBankcardList,
                bonusCode: vm.playerManualTopUp.bonusCode,
                realName: vm.playerManualTopUp.realName,
                topUpReturnCode: vm.playerManualTopUp.topUpReturnCode,
                orderNo: vm.playerManualTopUp.orderNo,
                platform: vm.selectedPlatform.id
            };
            vm.playerManualTopUp.submitted = true;
            $scope.safeApply();
            socketService.$socket($scope.AppSocket, 'applyManualTopUpRequest', sendData,
                function (data) {
                    console.log('manualTopup success', data);
                    vm.playerManualTopUp.responseData = data.data;
                    vm.getPlatformPlayersData();
                    $scope.safeApply();
                }, function (error) {
                    vm.playerManualTopUp.responseMsg = $translate(error.error.errorMessage);
                    // socketService.showErrorMessage(error.error.errorMessage);
                    vm.getPlatformPlayersData();
                    $scope.safeApply();
                });
        }

        vm.applyPlayerBonus = function () {

            // retrieve the related rewardTasks
            if (vm.playerBonus.bForce == true) {
                let sendQuery = {
                    playerObjId: vm.isOneSelectedPlayer()._id,
                    platformId: vm.selectedPlatform.id,
                };
                socketService.$socket($scope.AppSocket, 'getRewardTaskGroupProposalById', sendQuery, function (data) {

                    if (!data && data.data[0] && data.data[1]) {
                        return Q.reject("Record is not found");
                    }

                    vm.rewardTaskGroupProposalList = [];
                    let providerGroupId;
                    vm.isUnlockTaskGroup = true;
                    vm.rtgBonusAmt = {};

                    data.data[1].forEach(inData => {
                        inData.currentAmount$ = inData.currentAmt - inData.initAmt;
                        inData.bonusAmount$ = -inData.initAmt;

                        if (inData.providerGroup) {
                            providerGroupId = inData.providerGroup._id;
                        }
                        vm.rtgBonusAmt[providerGroupId] = inData.currentAmount$;
                    });

                    data.data[1].forEach((inData, indexInData) => {
                        vm.dynRewardTaskGroupId = [];
                        vm.dynRewardTaskGroupId.push(inData);
                        // // vm.rewardTaskProposalData = data.data[0][indexInData];

                        let result = commonService.checkProgressOfRewardTasksWithinRTG(data.data[0][indexInData], vm.dynRewardTaskGroupId, vm.rtgBonusAmt, true);
                        if (result && result.length){
                            result.forEach(item => {
                                item['createTime$'] = vm.dateReformat(item.data.createTime$);
                                item['provider$'] = $translate(item.data.provider$);
                            })
                        }

                        /* YeeHui - will remove this after the testing are OK */
                        // let result = data.data[0][indexInData];
                        // let excludedTopUpProposal = [];
                        //
                        // // check the proposal and exclude the proposal to be shown in the progress bar if the proposal is dynamicReward, type c promocode or limitedOffer
                        // result.forEach(
                        //     item => {
                        //         if (item && item.data && (item.data.topUpProposalId || item.data.topUpProposal) && (item.data.isDynamicRewardAmount || (item.data.promoCodeTypeValue && item.data.promoCodeTypeValue == 3) || item.data.limitedOfferObjId)) {
                        //             excludedTopUpProposal.push(item.data.topUpProposalId || item.data.topUpProposal)
                        //         }
                        //     }
                        // );
                        //
                        // console.log("checking *** usedTopUp", excludedTopUpProposal)
                        //
                        // if (excludedTopUpProposal.length > 0) {
                        //     result = result.filter(item => {
                        //         for (let i = 0; i < usedTopUp.length; i++) {
                        //             if (usedTopUp.indexOf(item.proposalId) < 0) {
                        //                 return item;
                        //             }
                        //         }
                        //     });
                        // }
                        //
                        // vm.rewardTaskProposalData = result;
                        //
                        // console.log("checking *** after filter", result)
                        //
                        // result.forEach((item, index) => {
                        //     item.proposalId = item.proposalId || item.data.proposalId;
                        //     item['createTime$'] = vm.dateReformat(item.data.createTime$);
                        //     item.useConsumption = item.data.useConsumption;
                        //     item.topUpProposal = item.data.topUpProposalId ? item.data.topUpProposalId : item.data.topUpProposal;
                        //     item.topUpAmount = item.data.topUpAmount;
                        //     item.bonusAmount = item.data.rewardAmount;
                        //     item.applyAmount = item.data.applyAmount || item.data.amount;
                        //     item.requiredUnlockAmount = item.data.spendingAmount;
                        //     item.requiredBonusAmount = item.data.requiredBonusAmount;
                        //     item['provider$'] = $translate(item.data.provider$);
                        //     item.rewardType = item.data.rewardType;
                        //
                        //     item.requiredUnlockAmount$ = item.requiredUnlockAmount;
                        //     if (vm.isUnlockTaskGroup) {
                        //         let spendingAmt = vm.calSpendingAmt(index);
                        //
                        //         item.curConsumption$ = Number.isFinite(spendingAmt.currentAmt) ? spendingAmt.currentAmt : 0;
                        //         item.maxConsumption$ = spendingAmt.currentMax;
                        //     } else {
                        //         item.curConsumption$ = Number.isFinite(item.requiredBonusAmount) ? item.requiredBonusAmount : 0;
                        //         item.maxConsumption$ = item.requiredUnlockAmount;
                        //     }
                        //     item.bonusAmount$ = item.data.bonusAmount;
                        //     item.requiredBonusAmount$ = item.requiredBonusAmount;
                        //     item.currentAmount$ = item.data.currentAmount;
                        //
                        //     item.availableAmt$ = item.bonusAmount ? item.bonusAmount : (item.applyAmount || 0);
                        //     item.archivedAmt$ = 0;
                        //
                        //     if (item.data.isDynamicRewardAmount || (item.data.promoCodeTypeValue && item.data.promoCodeTypeValue == 3) || item.data.limitedOfferObjId) {
                        //         item.availableAmt$ = (item.applyAmount || 0) + (item.bonusAmount || 0);
                        //     }
                        //
                        //
                        //     if (vm.rtgBonusAmt[item.data.providerGroup] <= -(item.availableAmt$)) {
                        //         vm.rtgBonusAmt[item.data.providerGroup] -= -(item.availableAmt$);
                        //         item.archivedAmt$ = item.availableAmt$
                        //     } else if (vm.rtgBonusAmt[item.data.providerGroup] != 0) {
                        //         if (item.data.providerGroup === '') {
                        //             let archivedAmtEmpty = vm.rtgBonusAmt["undefined"] ? vm.rtgBonusAmt["undefined"] : 0;
                        //             item.archivedAmt$ = -archivedAmtEmpty;
                        //             vm.rtgBonusAmt["undefined"] = 0;
                        //
                        //         } else {
                        //             item.archivedAmt$ = -vm.rtgBonusAmt[item.data.providerGroup];
                        //             vm.rtgBonusAmt[item.data.providerGroup] = 0;
                        //             item.archivedAmt$ = item.archivedAmt$ ? item.archivedAmt$ : 0;
                        //         }
                        //     }
                        //     item.isArchived =
                        //         item.archivedAmt$ == item.availableAmt$ || item.curConsumption$ == item.requiredUnlockAmount$;
                        //
                        // });

                        vm.rewardTaskGroupProposalList.push(result);

                    })

                })

            }

            var sendData = {
                playerId: vm.isOneSelectedPlayer().playerId,
                amount: vm.playerBonus.amount,
                bonusId: vm.playerBonus.bonusId,
                honoreeDetail: vm.playerBonus.honoreeDetail,
                bForce: vm.playerBonus.bForce,
                platform: vm.selectedPlatform.id,
                withdrawalBank: vm.playerBonus.withdrawalBank,
            };
            console.log('applyBonusRequest', sendData);
            vm.playerBonus.resMsg = '';
            vm.playerBonus.showSubmit = true;
            socketService.$socket($scope.AppSocket, 'applyBonusRequest', sendData, function (data) {
                $scope.$evalAsync(() => {
                    console.log('applyBonusRequest success', data);
                    vm.playerBonus.resMsg = $translate('Approved');
                    vm.playerBonus.showSubmit = false;
                    vm.getPlatformPlayersData();
                    // save the rewardTask that is manually unlocked
                    console.log("vm.rewardTaskGroupProposalList", vm.rewardTaskGroupProposalList)
                    if (vm.playerBonus.bForce && vm.rewardTaskGroupProposalList && vm.rewardTaskGroupProposalList.length > 0) {
                        vm.rewardTaskGroupProposalList.forEach(listData => {
                            listData.forEach(rewardTask => {
                                let sendData = {
                                    platformId: vm.selectedPlatform.id,
                                    playerId: vm.isOneSelectedPlayer()._id,
                                    unlockTime: new Date().toISOString(),
                                    creator: {
                                        type: "admin",
                                        name: authService.adminName,
                                        id: authService.adminId
                                    },
                                    rewardTask: {
                                        type: rewardTask.type.name,
                                        id: rewardTask.type._id,
                                    },
                                    currentConsumption: rewardTask.curConsumption$,
                                    maxConsumption: rewardTask.maxConsumption$,
                                    currentAmount: -rewardTask.archivedAmt$,
                                    targetAmount: rewardTask.availableAmt$,
                                    topupAmount: rewardTask.topUpAmount,
                                    proposalId: rewardTask._id,
                                    proposalNumber: rewardTask.proposalId,
                                    topupProposalNumber: rewardTask.topUpProposal,
                                    bonusAmount: rewardTask.bonusAmount,
                                    targetProviderGroup: rewardTask.data.provider$,
                                    status: "ManualUnlock",
                                    useConsumption: rewardTask.useConsumption,
                                    inProvider: rewardTask.inProvider,

                                };

                                socketService.$socket($scope.AppSocket, 'createRewardTaskGroupUnlockedRecord', sendData, function (data) {
                                    console.log('createRewardTaskGroupUnlockedRecord', sendData);
                                    $scope.safeApply();
                                })
                            })
                        })
                    }
                })
            }, function (data) {
                console.log('applyBonusRequest Fail', data);
                vm.playerBonus.showSubmit = false;
                let errorMsg = data.error.errorMessage || data.error.message;
                if (errorMsg) {
                    if (errorMsg === "Player or partner already has a pending proposal for this type") {
                        errorMsg = $translate("Player has already submitted the bonus proposal and is yet to audit.");
                    } else {
                        errorMsg = $translate(errorMsg);
                    }
                    vm.playerBonus.resMsg = errorMsg;
                    socketService.showErrorMessage(errorMsg);
                }
                $scope.safeApply();
            });
        };

        vm.updatePlayerFeedback = function () {
            let resultName = vm.allPlayerFeedbackResults.filter(item => {
                return item.key == vm.playerFeedback.result;
            });
            resultName = resultName.length > 0 ? resultName[0].value : "";
            let sendData = {
                playerId: vm.isOneSelectedPlayer()._id,
                platform: vm.isOneSelectedPlayer().platform,
                createTime: Date.now(),
                adminId: authService.adminId,
                content: vm.playerFeedback.content,
                result: vm.playerFeedback.result,
                resultName: resultName,
                topic: vm.playerFeedback.topic
            };
            console.log('add feedback', sendData);
            socketService.$socket($scope.AppSocket, 'createPlayerFeedback', sendData, function (data) {
                console.log('feedbackadded', data);
                vm.playerFeedback = {};
                // vm.getPlatformPlayersData();

                let rowData = vm.playerTableClickedRow.data();
                rowData.feedbackTimes++;
                vm.playerTableClickedRow.data(rowData).draw();

                if (vm.platformPageName == 'Feedback') {
                    vm.submitPlayerFeedbackQuery();
                }
                $scope.safeApply();
            });
        };

        vm.updatePartnerFeedback = function () {
            let resultName = vm.allPartnerFeedbackResults.filter(item => {
                return item.key === vm.partnerFeedback.result;
            });
            resultName = resultName.length > 0 ? resultName[0].value : "";
            let sendData = {
                partnerId: vm.isOneSelectedPartner()._id,
                platform: vm.selectedPlatform.id,
                createTime: Date.now(),
                adminId: authService.adminId,
                content: vm.partnerFeedback.content,
                result: vm.partnerFeedback.result,
                resultName: resultName,
                topic: vm.partnerFeedback.topic
            };
            console.log('add feedback', sendData);
            socketService.$socket($scope.AppSocket, 'createPartnerFeedback', sendData, function (data) {
                console.log('feedbackadded', data);
                vm.partnerFeedback = {};

                let rowData = vm.partnerTableClickedRow.data();
                rowData.feedbackTimes++;
                vm.partnerTableClickedRow.data(rowData).draw();

                $scope.safeApply();
            });
        };

        vm.playerPaymentKeys = [
            "bankName", "bankAccount", "encodedBankAccount", "bankAccountName", "bankAccountType", "bankAccountProvince", "bankAccountCity", "bankAccountDistrict", "bankAddress", "bankBranch"
        ];
        vm.playerPaymentKeys2 = [
            "bankName2", "bankAccount2", "encodedBankAccount2", "bankAccountName2", "bankAccountType2", "bankAccountProvince2", "bankAccountCity2", "bankAccountDistrict2", "bankAddress2", "bankBranch2"
        ];
        vm.playerPaymentKeys3 = [
            "bankName3", "bankAccount3", "encodedBankAccount3", "bankAccountName3", "bankAccountType3", "bankAccountProvince3", "bankAccountCity3", "bankAccountDistrict3", "bankAddress3", "bankBranch3"
        ];
        vm.prepareEditPlayerPayment = function () {
            return new Promise(function (resolve) {
                console.log('playerID', vm.isOneSelectedPlayer()._id);
                if (!vm.currentCity) {
                    vm.currentCity = {};
                }
                if (!vm.currentProvince) {
                    vm.currentProvince = {};
                }
                if (!vm.currentDistrict) {
                    vm.currentDistrict = {};
                }
                socketService.$socket($scope.AppSocket, 'getProvinceList', {}, function (data) {
                    if (data) {
                        // vm.provinceList = data.data.provinces.map(item => {
                        //     item.id = item.id.toString();
                        //     return item;
                        // });
                        vm.provinceList.length = 0;

                        for (let i = 0, len = data.data.data.length; i < len; i++) {
                            let province = data.data.data[i];
                            province.id = province.id.toString();
                            vm.provinceList.push(province);
                        }
                        // vm.provinceList.push(...data.data.provinces);

                        vm.changeProvince(false);
                        vm.changeCity(false);
                        $scope.safeApply();
                        resolve(vm.provinceList);
                    }
                }, null, true);
                vm.correctVerifyBankAccount = undefined;
                vm.isEditingPlayerPayment = false;
                vm.isEditingPlayerPaymentShowVerify = false;
                vm.playerPayment = utilService.assignObjKeys(vm.isOneSelectedPlayer(), vm.playerPaymentKeys);
                vm.playerPayment.bankAccountName = (vm.playerPayment.bankAccountName) ? vm.playerPayment.bankAccountName : vm.isOneSelectedPlayer().realName;
                vm.playerPayment.newBankAccount = vm.playerPayment.encodedBankAccount;
                vm.playerPayment.showNewAccountNo = false;
                vm.filteredBankTypeList = $.extend({}, vm.allActiveBankTypeList);
                vm.filterBankName = '';
                $scope.$evalAsync(() => {
                    vm.currentProvince.province = vm.playerPayment.bankAccountProvince;
                    vm.currentCity.city = vm.playerPayment.bankAccountCity;
                    vm.currentDistrict.district = vm.playerPayment.bankAccountDistrict;
                })
                $scope.safeApply();
            })
        }
        vm.prepareEditPlayerPayment2 = function () {
            return new Promise(function (resolve) {
                console.log('playerID', vm.isOneSelectedPlayer()._id);
                if (!vm.currentCity2) {
                    vm.currentCity2 = {};
                }
                if (!vm.currentProvince2) {
                    vm.currentProvince2 = {};
                }
                if (!vm.currentDistrict2) {
                    vm.currentDistrict2 = {};
                }
                if (!vm.isOneSelectedPlayer().multipleBankDetailInfo) {
                    vm.isOneSelectedPlayer().multipleBankDetailInfo = {};
                }
                vm.correctVerifyBankAccount = undefined;
                vm.isEditingPlayerPayment2 = false;
                vm.isEditingPlayerPaymentShowVerify = false;
                if (vm.isOneSelectedPlayer() && vm.isOneSelectedPlayer().multipleBankDetailInfo) {
                    vm.playerPayment2 = utilService.assignObjKeys(vm.isOneSelectedPlayer().multipleBankDetailInfo, vm.playerPaymentKeys2);
                    vm.playerPayment2.bankAccountName2 = (vm.playerPayment2.bankAccountName2) ? vm.playerPayment2.bankAccountName2 : vm.isOneSelectedPlayer().realName;
                    vm.playerPayment2.newBankAccount2 = vm.playerPayment2.encodedBankAccount2;
                    vm.playerPayment2.showNewAccountNo2 = false;
                    vm.currentProvince2.province = vm.playerPayment2.bankAccountProvince2;
                    vm.currentCity2.city = vm.playerPayment2.bankAccountCity2;
                    vm.currentDistrict2.district = vm.playerPayment2.bankAccountDistrict2;
                }
                vm.filteredBankTypeList = $.extend({}, vm.allActiveBankTypeList);
                vm.filterBankName = '';
                vm.currentProvince.province = vm.playerPayment2.bankAccountProvince;
                vm.currentCity.city = vm.playerPayment2.bankAccountCity;
                vm.currentDistrict.district = vm.playerPayment2.bankAccountDistrict;
                socketService.$socket($scope.AppSocket, 'getProvinceList', {}, function (data) {
                    if (data) {
                        // vm.provinceList = data.data.provinces.map(item => {
                        //     item.id = item.id.toString();
                        //     return item;
                        // });
                        vm.provinceList2.length = 0;

                        for (let i = 0, len = data.data.data.length; i < len; i++) {
                            let province = data.data.data[i];
                            province.id = province.id.toString();
                            vm.provinceList2.push(province);
                        }
                        // vm.provinceList.push(...data.data.provinces);

                        vm.changeProvince2(false);
                        vm.changeCity2(false);
                        $scope.safeApply();
                        resolve(vm.provinceList2);
                    }
                }, null, true);
                $scope.safeApply();
            })
        }
        vm.prepareEditPlayerPayment3 = function () {
            return new Promise(function (resolve) {
                console.log('playerID', vm.isOneSelectedPlayer()._id);
                if (!vm.currentCity3) {
                    vm.currentCity3 = {};
                }
                if (!vm.currentProvince3) {
                    vm.currentProvince3 = {};
                }
                if (!vm.currentDistrict3) {
                    vm.currentDistrict3 = {};
                }
                if (!vm.isOneSelectedPlayer().multipleBankDetailInfo) {
                    vm.isOneSelectedPlayer().multipleBankDetailInfo = {};
                }
                vm.correctVerifyBankAccount = undefined;
                vm.isEditingPlayerPayment3 = false;
                vm.isEditingPlayerPaymentShowVerify = false;
                if (vm.isOneSelectedPlayer() && vm.isOneSelectedPlayer().multipleBankDetailInfo) {
                    vm.playerPayment3 = utilService.assignObjKeys(vm.isOneSelectedPlayer().multipleBankDetailInfo, vm.playerPaymentKeys3);
                    vm.playerPayment3.bankAccountName3 = (vm.playerPayment3.bankAccountName3) ? vm.playerPayment3.bankAccountName3 : vm.isOneSelectedPlayer().realName;
                    vm.playerPayment3.newBankAccount3 = vm.playerPayment3.encodedBankAccount3;
                    vm.playerPayment3.showNewAccountNo3 = false;
                    vm.currentProvince3.province = vm.playerPayment3.bankAccountProvince3;
                    vm.currentCity3.city = vm.playerPayment3.bankAccountCity3;
                    vm.currentDistrict3.district = vm.playerPayment3.bankAccountDistrict3;
                }
                vm.filteredBankTypeList = $.extend({}, vm.allActiveBankTypeList);
                vm.filterBankName = '';
                vm.currentProvince.province = vm.playerPayment3.bankAccountProvince;
                vm.currentCity.city = vm.playerPayment3.bankAccountCity;
                vm.currentDistrict.district = vm.playerPayment3.bankAccountDistrict;
                socketService.$socket($scope.AppSocket, 'getProvinceList', {}, function (data) {
                    if (data) {
                        // vm.provinceList = data.data.provinces.map(item => {
                        //     item.id = item.id.toString();
                        //     return item;
                        // });
                        vm.provinceList3.length = 0;

                        for (let i = 0, len = data.data.data.length; i < len; i++) {
                            let province = data.data.data[i];
                            province.id = province.id.toString();
                            vm.provinceList3.push(province);
                        }
                        // vm.provinceList.push(...data.data.provinces);

                        vm.changeProvince3(false);
                        vm.changeCity3(false);
                        $scope.safeApply();
                        resolve(vm.provinceList3);
                    }
                }, null, true);
                $scope.safeApply();
            })
        }

        vm.changeProvince = function (reset) {
            socketService.$socket($scope.AppSocket, 'getCityList', {provinceId: vm.currentProvince.province}, function (data) {
                if (data) {
                    // vm.cityList = data.data.cities;
                    if (data.data.data) {
                        vm.cityList.length = 0;
                        for (let i = 0, len = data.data.data.length; i < len; i++) {
                            let city = data.data.data[i];
                            city.id = city.id.toString();
                            vm.cityList.push(city);
                        }
                    }
                    if (reset) {
                        vm.currentCity.city = vm.cityList[0].id;
                        vm.changeCity(reset);
                        $scope.safeApply();
                    }
                }
            }, null, true);
        }
        vm.changeProvince2 = function (reset) {
            socketService.$socket($scope.AppSocket, 'getCityList', {provinceId: vm.currentProvince2.province}, function (data) {
                if (data) {
                    // vm.cityList = data.data.cities;
                    if (data.data.data) {
                        vm.cityList2.length = 0;
                        for (let i = 0, len = data.data.data.length; i < len; i++) {
                            let city = data.data.data[i];
                            city.id = city.id.toString();
                            vm.cityList2.push(city);
                        }
                    }
                    if (reset) {
                        vm.currentCity2.city = vm.cityList2[0].id;
                        vm.changeCity2(reset);
                        $scope.safeApply();
                    }
                }
            }, null, true);
        }
        vm.changeProvince3 = function (reset) {
            socketService.$socket($scope.AppSocket, 'getCityList', {provinceId: vm.currentProvince3.province}, function (data) {
                if (data) {
                    // vm.cityList = data.data.cities;
                    if (data.data.data) {
                        vm.cityList3.length = 0;
                        for (let i = 0, len = data.data.data.length; i < len; i++) {
                            let city = data.data.data[i];
                            city.id = city.id.toString();
                            vm.cityList3.push(city);
                        }
                    }
                    if (reset) {
                        vm.currentCity3.city = vm.cityList3[0].id;
                        vm.changeCity3(reset);
                        $scope.safeApply();
                    }
                }
            }, null, true);
        }
        vm.changeCity = function (reset) {
            socketService.$socket($scope.AppSocket, 'getDistrictList', {
                provinceId: vm.currentProvince.province,
                cityId: vm.currentCity.city
            }, function (data) {
                if (data) {
                    // vm.districtList = data.data.districts;
                    if (data.data.data) {
                        vm.districtList.length = 0;
                        for (let i = 0, len = data.data.data.length; i < len; i++) {
                            let district = data.data.data[i];
                            district.id = district.id.toString();
                            vm.districtList.push(district);
                        }
                    }
                    if (reset && vm.districtList && vm.districtList[0]) {
                        // vm.currentDistrict.district = vm.districtList[0].id
                        vm.currentDistrict.district = ""
                    }
                    $scope.safeApply();
                }
            }, null, true);
        }
        vm.changeCity2 = function (reset) {
            socketService.$socket($scope.AppSocket, 'getDistrictList', {
                provinceId: vm.currentProvince2.province,
                cityId: vm.currentCity2.city
            }, function (data) {
                if (data) {
                    // vm.districtList = data.data.districts;
                    if (data.data.data) {
                        vm.districtList2.length = 0;
                        for (let i = 0, len = data.data.data.length; i < len; i++) {
                            let district = data.data.data[i];
                            district.id = district.id.toString();
                            vm.districtList2.push(district);
                        }
                    }
                    if (reset && vm.districtList2 && vm.districtList2[0]) {
                        // vm.currentDistrict.district = vm.districtList[0].id
                        vm.currentDistrict2.district = ""
                    }
                    $scope.safeApply();
                }
            }, null, true);
        }
        vm.changeCity3 = function (reset) {
            socketService.$socket($scope.AppSocket, 'getDistrictList', {
                provinceId: vm.currentProvince3.province,
                cityId: vm.currentCity3.city
            }, function (data) {
                if (data) {
                    // vm.districtList = data.data.districts;
                    if (data.data.data) {
                        vm.districtList3.length = 0;
                        for (let i = 0, len = data.data.data.length; i < len; i++) {
                            let district = data.data.data[i];
                            district.id = district.id.toString();
                            vm.districtList3.push(district);
                        }
                    }
                    if (reset && vm.districtList3 && vm.districtList3[0]) {
                        // vm.currentDistrict.district = vm.districtList[0].id
                        vm.currentDistrict3.district = ""
                    }
                    $scope.safeApply();
                }
            }, null, true);
        }

        vm.filterBankname = function (which) {
            var key = '';
            if (event && event.target) {
                key = event.target.value || '';
            }
            vm.filteredBankTypeList = {};
            vm[which].bankName = '';
            vm[which].bankName2 = '';
            vm[which].bankName3 = '';
            $.each(vm.allBankTypeList, function (i, v) {
                if (v.indexOf(key) > -1) {
                    vm.filteredBankTypeList[i] = v;
                    vm[which].bankName = i;
                    vm[which].bankName2 = i;
                    vm[which].bankName3 = i;
                }
            })
            $scope.safeApply();
        }

        vm.getPlayerContactHistory = function () {
            vm.playerContactHistoryCount = 0;
            let sendData = {
                adminId: authService.adminId,
                platformId: vm.selectedSinglePlayer.platform,
                type: ["UpdatePlayerEmail", "UpdatePlayerPhone", "UpdatePlayerQQ", "UpdatePlayerWeChat"],
                size: 2000,
                // size: vm.queryProposal.limit || 10,
                // index: newSearch ? 0 : (vm.queryProposal.index || 0),
                // sortCol: vm.queryProposal.sortCol
                status: vm.allProposalStatus,
                playerId: vm.selectedSinglePlayer._id
            };

            socketService.$socket($scope.AppSocket, 'getQueryProposalsForAdminId', sendData, function (data) {
                console.log('playercontact', data);

                var drawData = data.data.data.map(item => {
                    item.createTime$ = vm.dateReformat(item.createTime);
                    // item.fieldEdited = Object.keys(item.data.updateData)[0];
                    if (item.data.curData) {
                        item.contentBeforeEdited = item.data.curData[Object.keys(item.data.curData)[0]];
                    } else {
                        item.contentBeforeEdited = '';
                    }
                    if (item.data.updateData) {
                        item.fieldEdited = Object.keys(item.data.updateData)[0];
                        item.contentEdited = item.data.updateData[Object.keys(item.data.updateData)[0]];
                    }
                    return item;
                })
                vm.playerContactHistoryCount = data.data.data.length;
                vm.drawPlayerContactHistory(drawData);
            }, null, true);
            $('#modalPlayerContactHistory').modal();
        }
        vm.drawPlayerContactHistory = function (tblData) {

            var tableOptions = $.extend({}, vm.generalDataTableOptions, {
                data: tblData,
                aoColumnDefs: [
                    {targets: '_all', defaultContent: ' ', bSortable: false}
                ],
                columns: [
                    {title: $translate('PROPOSAL_NO'), data: "proposalId"},
                    {title: $translate('CREATION TIME'), data: "createTime$"},
                    {
                        title: $translate('CREATOR'),
                        data: null,
                        render: function (data, type, row) {
                            if (data.hasOwnProperty('creator')) {
                                return data.creator.name;
                            } else {
                                var creator = $translate('System');
                                if (data && data.data && data.data.playerName) {
                                    creator += "(" + data.data.playerName + ")";
                                }
                                return creator;
                            }
                        }
                    },
                    {title: $translate('CONTENT_CHANGED'), data: "fieldEdited"},
                    {title: $translate('curData'), data: "contentBeforeEdited"},
                    {title: $translate('updateData'), data: "contentEdited"},
                    {
                        "title": $translate('STATUS'),
                        "data": 'process',
                        render: function (data, type, row) {
                            let text = $translate(row.status ? row.status : (data.status ? data.status : 'UNKNOWN'));
                            text = text === "approved" ? "Approved" : text;

                            let textClass = '';
                            let fontStyle = {};
                            if (row.status === 'Pending') {
                                textClass = "text-danger";
                                fontStyle = {'font-weight': 'bold'};
                            }

                            let $link = $('<span>').text(text).addClass(textClass).css(fontStyle);
                            return $link.prop('outerHTML');
                        },
                    }
                ],
                "paging": true,
            });
            var aTable = $("#playerContactHistoryTbl").DataTable(tableOptions);
            aTable.columns.adjust().draw();
            $('#playerContactHistoryTbl').resize();
            $scope.safeApply();
        }

        vm.getPlayerInfoHistory = function () {
            vm.playerInfoHistoryCount = 0;
            $scope.$socketPromise('getProposalTypeByType', {
                platformId: vm.selectedSinglePlayer.platform,
                type: "UPDATE_PLAYER_INFO"
            })
                .then(data => {

                    let sendData = {
                        type: data.data._id,
                        playerObjId: vm.selectedSinglePlayer._id,
                    };
                    socketService.$socket($scope.AppSocket, 'getProposalByPlayerIdAndType', sendData, function (data) {
                        console.log('playerInfo', data);
                        var drawData = data.data.map(item => {
                            item.createTime$ = vm.dateReformat(item.createTime);
                            item.playerLevel$ = item.data.newLevelName ? item.data.newLevelName : $translate('UNCHANGED');
                            item.realName$ = item.data.realName ? item.data.realName : $translate('UNCHANGED');
                            item.referralName$ = item.data.referralName ? item.data.referralName : $translate('UNCHANGED');
                            item.partnerName$ = item.data.partnerName ? item.data.partnerName : $translate('UNCHANGED');
                            item.DOB$ = item.data.DOB ? utilService.getFormatDate(item.data.DOB) : $translate('UNCHANGED');
                            item.gender$ = item.data.gender === undefined ? $translate('UNCHANGED') : item.data.gender ? $translate('Male') : $translate('Female');
                            item.updatePassword$ = item.data.updatePassword ? $translate('CHANGED') : $translate('UNCHANGED');
                            item.updateGamePassword$ = item.data.updateGamePassword ? $translate('CHANGED') : $translate('UNCHANGED');
                            return item;
                        })
                        vm.playerInfoHistoryCount = data.data.length;
                        vm.drawPlayerInfoHistory(drawData);
                    }, null, true);
                    $('#modalPlayerInfoHistory').modal();
                })
        }

        vm.drawPlayerInfoHistory = function (tblData) {
            var tableOptions = $.extend({}, vm.generalDataTableOptions, {
                data: tblData,
                order: [[1, 'desc']],
                aoColumnDefs: [
                    {targets: '_all', defaultContent: ' ', bSortable: false}
                ],
                columns: [
                    {title: $translate('PROPOSAL_NO'), data: "proposalId"},
                    {title: $translate('CREATION TIME'), data: "createTime$"},
                    {
                        title: $translate('CREATOR'),
                        data: null,
                        render: function (data, type, row) {
                            if (data.hasOwnProperty('creator')) {
                                return data.creator.name;
                            } else {
                                var creator = $translate('System');
                                if (data && data.data && data.data.playerName) {
                                    creator += "(" + data.data.playerName + ")";
                                }
                                return creator;
                            }
                        }
                    },
                    // {title: $translate('REAL_NAME'), data: "data.realName"},
                    {title: $translate('REAL_NAME'), data: "realName$"},
                    {title: $translate('PLAYER_LEVEL'), data: "playerLevel$"},
                    {title: $translate('PARTNER'), data: "partnerName$"},
                    {title: $translate('REFERRAL'), data: "referralName$"},
                    {title: $translate('DOB'), data: "DOB$"},
                    {title: $translate('GENDER'), data: "gender$"},
                    {title: $translate('WEBSITE_PASS'), data: "updatePassword$"},
                    {title: $translate('GAME_PASS'), data: "updateGamePassword$"},
                    {
                        "title": $translate('STATUS'),
                        "data": 'process',
                        render: function (data, type, row) {
                            let text = $translate(row.status ? row.status : (data.status ? data.status : 'UNKNOWN'));
                            text = text === "approved" ? "Approved" : text;

                            let textClass = '';
                            let fontStyle = {};
                            if (row.status === 'Pending') {
                                textClass = "text-danger";
                                fontStyle = {'font-weight': 'bold'};
                            }

                            let $link = $('<span>').text(text).addClass(textClass).css(fontStyle);
                            return $link.prop('outerHTML');
                        },
                    }
                ],
                "paging": true,
            });
            var aTable = $("#playerInfoHistoryTbl").DataTable(tableOptions);
            aTable.columns.adjust().draw();
            $('#playerInfoHistoryTbl').resize();
            $scope.safeApply();
        }

        vm.updatePlayerPayment = function (choice) {
            let sendData = {};
            switch (choice) {
                case 'bank1':
                    sendData = $.extend({}, vm.playerPayment);
                    sendData.bankAddress = vm.playerPayment.bankAddress.replace(/[`~【】……·!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/\uFF00-\uFFEF]/gi, ""); // remove chinese special characters
                    sendData.bankAccountProvince = vm.currentProvince.province;
                    sendData.bankAccountCity = vm.currentCity.city;
                    sendData.bankAccountDistrict = vm.currentDistrict.district;
                    sendData.bankChoice = "1";
                    console.log('send===', sendData);
                    if (sendData.newBankAccount != sendData.encodedBankAccount) {
                        sendData.bankAccount = sendData.newBankAccount;
                    }
                    delete sendData.newBankAccount;
                    delete sendData.encodedBankAccount;
                    break;
                case 'bank2':
                    sendData = $.extend({}, vm.playerPayment2);
                    sendData.bankAddress2 = vm.playerPayment2.bankAddress2.replace(/[`~【】……·!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/\uFF00-\uFFEF]/gi, ""); // remove chinese special characters
                    sendData.bankAccountProvince2 = vm.currentProvince2.province;
                    sendData.bankAccountCity2 = vm.currentCity2.city;
                    sendData.bankAccountDistrict2 = vm.currentDistrict2.district;
                    sendData.bankName2 = vm.playerPayment2.bankName2;
                    sendData.bankChoice = "2";
                    console.log('send===', sendData);
                    if (sendData.newBankAccount2 != sendData.encodedBankAccount2) {
                        sendData.bankAccount2 = sendData.newBankAccount2;
                    }
                    delete sendData.bankName;
                    delete sendData.newBankAccount2;
                    delete sendData.encodedBankAccount2;
                    break;
                case 'bank3':
                    sendData = $.extend({}, vm.playerPayment3);
                    sendData.bankAddress3 = vm.playerPayment3.bankAddress3.replace(/[`~【】……·!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/\uFF00-\uFFEF]/gi, ""); // remove chinese special characters
                    sendData.bankAccountProvince3 = vm.currentProvince3.province;
                    sendData.bankAccountCity3 = vm.currentCity3.city;
                    sendData.bankAccountDistrict3 = vm.currentDistrict3.district;
                    sendData.bankName3 = vm.playerPayment3.bankName3;
                    sendData.bankChoice = "3";
                    console.log('send===', sendData);
                    if (sendData.newBankAccount3 != sendData.encodedBankAccount3) {
                        sendData.bankAccount3 = sendData.newBankAccount3;
                    }
                    delete sendData.bankName;
                    delete sendData.newBankAccount3;
                    delete sendData.encodedBankAccount3;
                    break;
            }
            sendData._id = vm.isOneSelectedPlayer()._id;
            sendData.playerName = vm.isOneSelectedPlayer().name;
            sendData.playerId = vm.isOneSelectedPlayer().playerId;
            console.log('send', sendData);

            socketService.$socket($scope.AppSocket, 'createUpdatePlayerBankInfoProposal', {
                creator: {type: "admin", name: authService.adminName, id: authService.adminId},
                data: sendData,
                platformId: vm.isOneSelectedPlayer().platform
            }, function (data) {
                if (data.data && data.data.stepInfo) {
                    socketService.showProposalStepInfo(data.data.stepInfo, $translate);
                }
                if (data.data && data.data.data && data.data.data.duplicateBankAccountName) {
                    socketService.showConfirmMessage($translate("Multiple binding detected."), 10000);
                }
                vm.getPlatformPlayersData();
                console.log('playerpayment', data);
            }, null, true);
        }

        vm.deletePlayerPayment = function (choice, isConfirm) {
            if (!isConfirm) {
                vm.modalYesNo = {};
                vm.modalYesNo.modalTitle = $translate("Delete player payment info");
                vm.modalYesNo.modalText = $translate("Are you sure");
                vm.modalYesNo.actionYes = () => vm.deletePlayerPayment(choice, true);
                $('#modalYesNo').modal();
            }
            else {
                let sendData = {};

                // only can delete 2nd and 3rd bank info, 1st bank info can only edit
                switch (choice) {
                    case 'bank2':
                        sendData = $.extend({}, vm.playerPayment2);
                        sendData.bankName2 = '';
                        sendData.bankAccount2 = '';
                        sendData.bankAccountName2 = '';
                        sendData.bankAddress2 = '';
                        sendData.bankAccountProvince2 = '';
                        sendData.bankAccountCity2 = '';
                        sendData.bankAccountDistrict2 = '';
                        sendData.remark = '删除银行资料2';
                        sendData.isDeleteBank2 = true;
                        delete sendData.bankName;
                        delete sendData.newBankAccount2;
                        delete sendData.encodedBankAccount2;
                        delete sendData.showNewAccountNo2;
                        break;
                    case 'bank3':
                        sendData = $.extend({}, vm.playerPayment3);
                        sendData.bankName3 = '';
                        sendData.bankAccount3 = '';
                        sendData.bankAccountName3 = '';
                        sendData.bankAddress3 = '';
                        sendData.bankAccountProvince3 = '';
                        sendData.bankAccountCity3 = '';
                        sendData.bankAccountDistrict3 = '';
                        sendData.remark = '删除银行资料3';
                        sendData.isDeleteBank3 = true;
                        delete sendData.bankName;
                        delete sendData.newBankAccount3;
                        delete sendData.encodedBankAccount3;
                        delete sendData.showNewAccountNo3;
                        break;
                }
                sendData._id = vm.isOneSelectedPlayer()._id;
                sendData.playerName = vm.isOneSelectedPlayer().name;
                sendData.playerId = vm.isOneSelectedPlayer().playerId;
                console.log('send', sendData);

                socketService.$socket($scope.AppSocket, 'createUpdatePlayerBankInfoProposal', {
                    creator: {type: "admin", name: authService.adminName, id: authService.adminId},
                    data: sendData,
                    platformId: vm.isOneSelectedPlayer().platform
                }, function (data) {
                    if (data.data && data.data.stepInfo) {
                        socketService.showProposalStepInfo(data.data.stepInfo, $translate);
                    }
                    vm.getPlatformPlayersData();
                    console.log('playerpayment', data);
                }, null, true);
            }
        }
        vm.getPaymentInfoHistory = function () {
            vm.paymetHistoryCount = 0;
            socketService.$socket($scope.AppSocket, 'getPaymentHistory', {
                objectId: vm.isOneSelectedPlayer()._id,
                type: "PLAYERS"
            }, function (data) {
                var drawData = data.data.filter(item => {
                    return item.bankName || item.bankAccount || item.bankAccountName;
                }).map(item => {
                    item.province = item.provinceData || item.bankAccountProvince;
                    item.city = item.cityData || item.bankAccountCity;
                    item.district = item.districtData || item.bankAccountDistrict;
                    item.creatorName = item.creatorInfo.adminName || item.creatorInfo.name;
                    item.bankStr = vm.allBankTypeList[item.bankName] || item.bankName || $translate('Unknown');
                    item.createTime$ = vm.dateReformat(item.changeTime);
                    return item;
                });
                vm.paymetHistoryCount = drawData.length;
                vm.drawPaymentHistory(drawData);
                let drawData2 = [];
                let drawData3 = [];
                if (authService.checkViewPermission('Player', 'Player', 'BindMultiplePaymentInformation')) {
                    drawData2 = data.data.filter(item => {
                        return item.bankName2 || item.bankAccount2 || item.bankAccountName2;
                    }).map(item => {
                        item.bankName = item.bankName2 || $translate('Unknown');
                        item.bankAccount = item.bankAccount2 || $translate('Unknown');
                        item.bankAccountName = item.bankAccountName2 || $translate('Unknown');
                        item.bankAddress = item.bankAddress2 || $translate('Unknown');
                        item.province = item.provinceData || item.bankAccountProvince2;
                        item.city = item.cityData || item.bankAccountCity2;
                        item.district = item.districtData || item.bankAccountDistrict2;
                        item.creatorName = item.creatorInfo.adminName || item.creatorInfo.name;
                        item.bankStr = vm.allBankTypeList[item.bankName2] || item.bankName2 || $translate('Unknown');
                        item.createTime$ = vm.dateReformat(item.changeTime);
                        return item;
                    });
                    drawData3 = data.data.filter(item => {
                        return item.bankName3 || item.bankAccount3 || item.bankAccountName3;
                    }).map(item => {
                        item.bankName = item.bankName3 || $translate('Unknown');
                        item.bankAccount = item.bankAccount3 || $translate('Unknown');
                        item.bankAccountName = item.bankAccountName3 || $translate('Unknown');
                        item.bankAddress = item.bankAddress3 || $translate('Unknown');
                        item.province = item.provinceData || item.bankAccountProvince3;
                        item.city = item.cityData || item.bankAccountCity3;
                        item.district = item.districtData || item.bankAccountDistrict3;
                        item.creatorName = item.creatorInfo.adminName || item.creatorInfo.name;
                        item.bankStr = vm.allBankTypeList[item.bankName3] || item.bankName3 || $translate('Unknown');
                        item.createTime$ = vm.dateReformat(item.changeTime);
                        return item;
                    });
                    vm.paymetHistoryCount2 = drawData2.length;
                    vm.paymetHistoryCount3 = drawData3.length;
                    vm.drawPaymentHistory2(drawData2);
                    vm.drawPaymentHistory3(drawData3);
                }

            }, null, true);
            $('#modalPlayerPaymentHistory').modal();
        }

        vm.drawPaymentHistory = function (tblData) {
            var tableOptions = $.extend({}, vm.generalDataTableOptions, {
                data: tblData,
                aoColumnDefs: [
                    {targets: '_all', defaultContent: ' ', bSortable: false}
                ],
                columns: [
                    {title: $translate('CREATETIME'), data: "createTime$"},
                    {title: $translate('bankAccountName'), data: "bankAccountName", sClass: "wordWrap"},
                    {title: $translate('bankName'), data: "bankStr"},
                    {title: $translate('BANK_BRANCH'), data: "bankBranch", sClass: "wordWrap"},
                    {title: $translate('bankAddress'), data: "bankAddress", sClass: "wordWrap"},
                    {title: $translate('PROVINCE'), data: "province"},
                    {title: $translate('CITY'), data: "city"},
                    {title: $translate('DISTRICT'), data: "district"},
                    {title: $translate('creator'), data: "creatorName"},
                    {title: $translate('source'), data: "sourceStr"},
                ],
                "paging": true,
            });

            var aTable = $('#playerPaymentHistoryTbl').DataTable(tableOptions);
            aTable.columns.adjust().draw();
            $('#playerPaymentHistoryTbl').resize();
            $scope.safeApply();
        };
        vm.drawPaymentHistory2 = function (tblData) {
            var tableOptions = $.extend({}, vm.generalDataTableOptions, {
                data: tblData,
                aoColumnDefs: [
                    {targets: '_all', defaultContent: ' ', bSortable: false}
                ],
                columns: [
                    {title: $translate('CREATETIME'), data: "createTime$"},
                    {title: $translate('bankAccountName'), data: "bankAccountName", sClass: "wordWrap"},
                    {title: $translate('bankName'), data: "bankStr"},
                    {title: $translate('BANK_BRANCH'), data: "bankBranch", sClass: "wordWrap"},
                    {title: $translate('bankAddress'), data: "bankAddress", sClass: "wordWrap"},
                    {title: $translate('PROVINCE'), data: "province"},
                    {title: $translate('CITY'), data: "city"},
                    {title: $translate('DISTRICT'), data: "district"},
                    {title: $translate('creator'), data: "creatorName"},
                    {title: $translate('source'), data: "sourceStr"},
                ],
                "paging": true,
            });

            var aTable = $('#playerPaymentHistoryTbl2').DataTable(tableOptions);
            aTable.columns.adjust().draw();
            $('#playerPaymentHistoryTbl2').resize();
            $scope.safeApply();
        };
        vm.drawPaymentHistory3 = function (tblData) {
            var tableOptions = $.extend({}, vm.generalDataTableOptions, {
                data: tblData,
                aoColumnDefs: [
                    {targets: '_all', defaultContent: ' ', bSortable: false}
                ],
                columns: [
                    {title: $translate('CREATETIME'), data: "createTime$"},
                    {title: $translate('bankAccountName'), data: "bankAccountName", sClass: "wordWrap"},
                    {title: $translate('bankName'), data: "bankStr"},
                    {title: $translate('BANK_BRANCH'), data: "bankBranch", sClass: "wordWrap"},
                    {title: $translate('bankAddress'), data: "bankAddress", sClass: "wordWrap"},
                    {title: $translate('PROVINCE'), data: "province"},
                    {title: $translate('CITY'), data: "city"},
                    {title: $translate('DISTRICT'), data: "district"},
                    {title: $translate('creator'), data: "creatorName"},
                    {title: $translate('source'), data: "sourceStr"},
                ],
                "paging": true,
            });

            var aTable = $('#playerPaymentHistoryTbl3').DataTable(tableOptions);
            aTable.columns.adjust().draw();
            $('#playerPaymentHistoryTbl3').resize();
            $scope.safeApply();
        };

        vm.initMailLog = function () {
            vm.mailLog = vm.mailLog || {};
            vm.mailLog.query = {};
            vm.mailLog.receivedMails = [{}];
            vm.mailLog.isAdmin = true;
            vm.mailLog.isSystem = true;
            utilService.actionAfterLoaded('#messagePlayerModal.in #messageLogPanel #mailLogQuery .endTime', function () {
                vm.mailLog.startTime = utilService.createDatePicker('#messageLogPanel #mailLogQuery .startTime');
                vm.mailLog.endTime = utilService.createDatePicker('#messageLogPanel #mailLogQuery .endTime');
                vm.mailLog.startTime.data('datetimepicker').setDate(utilService.setLocalDayStartTime(utilService.setNDaysAgo(new Date(), 1)));
                vm.mailLog.endTime.data('datetimepicker').setDate(utilService.setLocalDayEndTime(new Date()));
                vm.searchMailLog();
            });
        };

        vm.searchMailLog = function () {
            let requestData = {
                recipientId: vm.selectedSinglePlayer._id,
                startTime: vm.mailLog.startTime.data('datetimepicker').getLocalDate() || new Date(0),
                endTime: vm.mailLog.endTime.data('datetimepicker').getLocalDate() || new Date()
            };
            if (!vm.mailLog.isAdmin && vm.mailLog.isSystem) {
                requestData.senderType = 'System';
            } else if (vm.mailLog.isAdmin && !vm.mailLog.isSystem) {
                requestData.senderType = 'admin';
            }
            $scope.$socketPromise('searchMailLog', requestData).then(result => {
                console.log("result:", result);
                vm.mailLog.receivedMails = result.data;
                for (let i = 0; i < vm.mailLog.receivedMails.length; i++) {
                    vm.mailLog.receivedMails[i].mailStatus$ = "UNREAD";
                    if (vm.mailLog.receivedMails[i].hasBeenRead) {
                        vm.mailLog.receivedMails[i].mailStatus$ = "MARK_AS_READ";
                    }
                    if (vm.mailLog.receivedMails[i].bDelete) {
                        vm.mailLog.receivedMails[i].mailStatus$ = "DELETE";
                    }
                }
                $scope.safeApply();
            }).catch(console.error);
        };

        vm.initSMSLog = function (type) {
            vm.smsLog = vm.smsLog || {index: 0, limit: 10};
            vm.smsLog.type = type;
            vm.smsLog.query = {};
            vm.smsLog.searchResults = [{}];
            vm.smsLog.query.status = "all";
            vm.smsLog.query.isAdmin = true;
            vm.smsLog.query.isSystem = false;
            let endTimeElementPath = '.modal.in #smsLogPanel #smsLogQuery .endTime';
            let tablePageId = "smsLogTablePage";
            if (type == "multi") {
                endTimeElementPath = '#groupSmsLogQuery .endTime';
                tablePageId = "groupSmsLogTablePage";
            }
            utilService.actionAfterLoaded(endTimeElementPath, function () {
                vm.smsLog.query.startTime = utilService.createDatePicker('#smsLogPanel #smsLogQuery .startTime');
                vm.smsLog.query.endTime = utilService.createDatePicker('#smsLogPanel #smsLogQuery .endTime');
                if (type == "multi") {
                    vm.smsLog.query.startTime = utilService.createDatePicker('#groupSmsLogQuery .startTime');
                    vm.smsLog.query.endTime = utilService.createDatePicker('#groupSmsLogQuery .endTime');
                }
                vm.smsLog.query.startTime.data('datetimepicker').setDate(utilService.setLocalDayStartTime(utilService.setNDaysAgo(new Date(), 1)));
                vm.smsLog.query.endTime.data('datetimepicker').setDate(utilService.setLocalDayEndTime(new Date()));
                vm.smsLog.pageObj = utilService.createPageForPagingTable(tablePageId, {}, $translate, function (curP, pageSize) {
                    vm.commonPageChangeHandler(curP, pageSize, "smsLog", vm.searchSMSLog)
                });
                // Be user friendly: Fetch some results immediately!
                vm.searchSMSLog(true);
            });
        };

        vm.searchSMSLog = function (newSearch) {
            var requestData = {
                // playerId: vm.selectedSinglePlayer.playerId,
                isAdmin: vm.smsLog.query.isAdmin,
                isSystem: vm.smsLog.query.isSystem,
                status: vm.smsLog.query.status,
                startTime: vm.smsLog.query.startTime.data('datetimepicker').getLocalDate(),//$('#smsLogQuery .startTime input').val() || undefined,
                endTime: vm.smsLog.query.endTime.data('datetimepicker').getLocalDate(),//$('#smsLogQuery .endTime   input').val() || undefined,
                index: newSearch ? 0 : vm.smsLog.index,
                limit: newSearch ? 10 : vm.smsLog.limit,
            };
            if (vm.smsLog.type == "single") {
                requestData.playerId = vm.selectedSinglePlayer.playerId;
            }

            console.log("searchSMSLog requestData:", requestData);
            $scope.$socketPromise('searchSMSLog', requestData).then(result => {
                $scope.$evalAsync(() => {
                    console.log("searchSMSLog result", result);
                    vm.smsLog.searchResults = result.data.data.map(item => {
                        item.createTime$ = vm.dateReformat(item.createTime);
                        if (item.status == "failure" && item.error && item.error.status == 430) {
                            item.error = $translate('RESPONSE_TIMEOUT');
                            item.status$ = $translate('unknown');
                        } else {
                            item.status$ = $translate(item.status);
                        }
                        return item;
                    });
                    vm.smsLog.totalCount = result.data.size;
                    vm.smsLog.pageObj.init({maxCount: vm.smsLog.totalCount}, newSearch);
                })
            }).catch(console.error);
        };

        vm.initGameCreditLog = function () {
            vm.gameCreditLog = vm.gameCreditLog || {index: 0, limit: 20, pageSize: 20};
            // vm.gameCreditLog.type = type;
            vm.gameCreditLog.query = {};
            vm.gameCreditLog.searchResults = [{}];
            vm.gameCreditLog.query.status = "41";
            vm.gameCreditLog.query.type = "0001";
            utilService.actionAfterLoaded('#modalGameCreditLog.modal.in #gameCreditLogTablePage', function () {
                vm.gameCreditLog.query.startTime = utilService.createDatePicker('#gameCreditLogQuery .startTime');
                vm.gameCreditLog.query.endTime = utilService.createDatePicker('#gameCreditLogQuery .endTime');
                vm.gameCreditLog.query.startTime.data('datetimepicker').setDate(utilService.setLocalDayStartTime(utilService.setNDaysAgo(new Date(), 1)));
                vm.gameCreditLog.query.endTime.data('datetimepicker').setDate(utilService.setLocalDayEndTime(new Date()));
                vm.gameCreditLog.pageObj = utilService.createPageForPagingTable("#gameCreditLogTablePage", vm.gameCreditLog, $translate, function (curP, pageSize) {
                    vm.commonPageChangeHandler(curP, pageSize, "gameCreditLog", vm.getGameCreditLog)
                });
                // Be user friendly: Fetch some results immediately!
                vm.getGameCreditLog(true);
            });
        }
        vm.getGameCreditLog = function (newSearch) {
            var requestData = {
                "playerName": vm.selectedSinglePlayer.name,
                "providerId": vm.gameCreditLog.query.status || "41",
                "startDate": vm.gameCreditLog.query.startTime.data('datetimepicker').getLocalDate(),
                "endDate": vm.gameCreditLog.query.endTime.data('datetimepicker').getLocalDate(),
                "page": newSearch ? "1" : vm.gameCreditLog.pageObj.curPage,
                "platformId": vm.selectedPlatform.data.platformId,
                "pageSize": vm.gameCreditLog.pageObj.pageSize
            };
            requestData.startDate = $filter('date')(requestData.startDate, 'yyyy-MM-dd HH:mm:ss');
            requestData.endDate = $filter('date')(requestData.endDate, 'yyyy-MM-dd HH:mm:ss');
            console.log("requestData.startDate: " + requestData.startDate);
            console.log("requestData.endDate: " + requestData.endDate);
            vm.gameCreditLog.query.type ? requestData.type = vm.gameCreditLog.query.type : '';
            $scope.$socketPromise('getGameCreditLog', requestData).then(result => {
                console.log(JSON.stringify(result))
                // {
                //     "id": "1009924",
                //     "date": "2017-04-03 15:45:11",
                //     "type": "0001",
                //     "previousCredit": 0.82,
                //     "remit": 100,
                //     "newCredit": 100.82,
                //     "username": "l47uaeson2test"
                // }
                //vm.gameCreditLog.searchResults = result.data.data;
                vm.gameCreditLog.searchResults = result.data.data.map(item => {
                    // item.createTime$ = vm.dateReformat(item.createTime);
                    // item.status$ = $translate(item.status);
                    // transfer in  = 0001
                    // transfer out = 0002
                    // bet = 0004
                    // payout = 0005
                    if (item.type && item.type === "0001") {
                        item.typeText = "TRANSFER_IN";
                    }
                    else if (item.type && item.type === "0002") {
                        item.typeText = "TRANSFER_OUT";
                    }
                    else if (item.type && item.type === "0004") {
                        item.typeText = "BET";
                    }
                    else if (item.type && item.type === "0005") {
                        item.typeText = "PAYOUT";
                    }
                    item.typeText = $translate(item.typeText);
                    return item;
                });
                vm.gameCreditLog.totalCount = (vm.gameCreditLog.pageObj.pageSize || 20) * result.data.totalPages;
                vm.gameCreditLog.pageObj.init({maxCount: vm.gameCreditLog.totalCount}, newSearch);
                $scope.safeApply();
            }).catch(console.error);
        }

        ////////////////// reward task log
        vm.initRewardTaskLog = function () {
            vm.rewardTaskLog = vm.rewardTaskLog || {totalCount: 0, limit: 10, index: 0, query: {}};
            vm.isUnlockTaskGroup = false;
            vm.chosenProviderGroupId = null;
            vm.rtgBonusAmt = {};
            // utilService.actionAfterLoaded('#modalRewardTaskLog.in #rewardTaskLogQuery .endTime', function () {
            utilService.actionAfterLoaded('#rewardTaskLogQuery .endTime', function () {
                vm.rewardTaskLog.query.startTime = utilService.createDatePicker('#rewardTaskLogQuery .startTime');
                vm.rewardTaskLog.query.endTime = utilService.createDatePicker('#rewardTaskLogQuery .endTime');
                vm.rewardTaskLog.query.startTime.data('datetimepicker').setDate(utilService.setLocalDayStartTime(utilService.setNDaysAgo(new Date(), 30)));
                vm.rewardTaskLog.query.endTime.data('datetimepicker').setDate(utilService.setLocalDayEndTime(new Date()));
                vm.rewardTaskLog.pageObj = utilService.createPageForPagingTable("#rewardTaskLogTblPage", {}, $translate, function (curP, pageSize) {
                    vm.commonPageChangeHandler(curP, pageSize, "rewardTaskLog", vm.getRewardTaskLogData)
                });
                $scope.$evalAsync(vm.getRewardTaskLogData(true));
            });

            $scope.$evalAsync(vm.displayProviderGroupCredit());
        }
        vm.displayProviderGroupCredit = function () {
            socketService.$socket($scope.AppSocket, 'getCreditDetail', {playerObjId: vm.selectedSinglePlayer._id}, function (data) {
                console.log('getCreditDetail', data);
                vm.playerCreditDetails = data.data.lockedCreditList;
                vm.currentFreeAmount = data.data ? data.data.credit : '';
                vm.currentFreeAmount = $noRoundTwoDecimalPlaces(vm.currentFreeAmount);
                vm.playerCreditDetails.map(d => {
                    if (d.validCredit == 'unknown') {
                        d.validCredit = '';
                    }
                })
                vm.getPlatformProviderGroup().then(
                    allProviderGroup => {
                        let allGameProviderGroup = [];
                        for (let i = 0; i < vm.gameProviderGroup.length; i++) {
                            allGameProviderGroup.push({
                                nickName: vm.gameProviderGroup[i].name ? vm.gameProviderGroup[i].name : "",
                                validCredit: 0
                            })
                        }
                        if (vm.playerCreditDetails.length > 0) {
                            allGameProviderGroup = allGameProviderGroup.filter(a => {
                                let isFound = false;
                                for (let j = 0; j < vm.playerCreditDetails.length; j++) {
                                    if (vm.playerCreditDetails[j].nickName == a.nickName) {
                                        isFound = true;
                                    }
                                    ;
                                }
                                ;
                                if (!isFound) {
                                    return a;
                                }
                            });
                        }
                        vm.playerCreditDetails = vm.playerCreditDetails.concat(allGameProviderGroup);

                        function compare(a, b) {
                            if (a.nickName < b.nickName)
                                return -1;
                            if (a.nickName > b.nickName)
                                return 1;
                            return 0;
                        }

                        vm.playerCreditDetails.sort(compare);
                    }
                )
            })
        }
        vm.setDisplayTaskGroup = function (status) {
            vm.displayTaskGroup = status;

            $timeout(function () {
                $('#rewardTaskLogTbl').resize();
                $('#rewardTaskGroupLogTbl').resize();
                $('#rewardTaskGroupProposalTbl').resize();
            }, 0);
            $scope.safeApply();
        }

        vm.getRewardTaskFreeAmount = function () {
            vm.chosenProviderGroupId = 'localCredit';
            vm.getRewardTaskLogData(true, true);
        }

        vm.unlockSearch = function () {
            if (vm.selectedProviderGroupID != 'all') {
                let providerGroupId = vm.selectedProviderGroupID;
                if (providerGroupId == 'free') {
                    vm.getRewardTaskGroupProposal();
                } else {
                    vm.getRewardTaskGroupProposal(providerGroupId);
                }
            }
            else if (vm.chosenProviderGroupId) {
                if (vm.chosenProviderGroupId == 'localCredit') {
                    vm.getRewardTaskLogData(true, true);
                } else {
                    vm.getRewardTaskGroupProposal(vm.chosenProviderGroupId);
                }
            } else {
                vm.getRewardTaskLogData(true);
            }
        }
        vm.getRewardTaskLogData = function (newSearch, isFreeAmt) {
            vm.isUnlockTaskGroup = false;
            let sendQuery = {
                playerId: vm.selectedSinglePlayer._id,
                platformId: vm.selectedSinglePlayer.platform,
                from: vm.rewardTaskLog.query.startTime.data('datetimepicker').getLocalDate(),
                to: vm.rewardTaskLog.query.endTime.data('datetimepicker').getLocalDate(),
                unlockStatus: vm.unlockStatus,
                rewardProposalId: vm.rewardProposalId,
                topUpProposalId: vm.topUpProposalId,
                selectedProviderGroupID: vm.selectedProviderGroupID,
                showProposal: false,
                index: newSearch ? 0 : vm.rewardTaskLog.index,
                limit: newSearch ? 10 : vm.rewardTaskLog.limit,
                sortCol: vm.rewardTaskLog.sortCol || null,
                useProviderGroup: vm.selectedPlatform.data.useProviderGroup
            };

            if (isFreeAmt) {
                sendQuery.selectedProviderGroupID = 'free';
                sendQuery.showProposal = true;
            }
            socketService.$socket($scope.AppSocket, 'getPlayerRewardTask', sendQuery, function (data) {
                vm.curRewardTask = data.data;
                console.log('Player reward task log:', vm.curRewardTask);
                let tblData = data && data.data ? data.data.data.map(item => {
                    item.createTime$ = vm.dateReformat(item.createTime);
                    item.topUpAmount = (item.topUpAmount);
                    item.bonusAmount$ = -item.data.currentAmt;
                    item.requiredBonusAmount$ = (item.requiredBonusAmount);
                    item.currentAmount$ = 0;
                    item.providerStr$ = '(' + ((item.targetProviders && item.targetProviders.length > 0) ? item.targetProviders.map(pro => {
                        return pro.name + ' ';
                    }) : $translate('all')) + ')';

                    if (!item.targetEnable && item.targetProviders && item.targetProviders.length > 0) {
                        item.provider$ = $translate('Excluded') + ' ' + item.providerStr$
                    } else {
                        item.provider$ = item.providerStr$;
                    }

                    if (item.rewardType) {
                        item.rewardType = $translate(item.rewardType);
                    }
                    // if search from topupProposalId
                    if (data.data.topUpProposal && data.data.topUpProposal != '') {
                        item.topUpProposal = data.data.topUpProposal;
                        item.topUpAmount = data.data.topUpAmountSum;
                    }
                    // if search from topupProposalId
                    if (data.data.topUpAmountSum) {
                        item.topUpAmount$ = data.data.topUpAmountSum;
                    }
                    if (data.data.creator) {
                        item.creator = data.data.creator
                    }
                    if (item.data) {
                        item.currentAmount = item.data.currentAmount;
                        item.bonusAmount = item.data.currentAmt;
                        item.requiredBonusAmount = item.data.requiredBonusAmount;
                        item.bonusAmount$ = item.data.bonusAmount;
                        item.requiredBonusAmount$ = item.data.requiredBonusAmount;
                        item.requiredUnlockAmount = item.data.requiredUnlockAmount;
                        item.rewardType = item.data.rewardType;
                    }

                    return item;
                }) : [];
                let size = data.data ? data.data.size : 0;
                let summary = data.data ? data.data.summary : [];
                let topUpAmountSum = data.data ? data.data.topUpAmountSum : 0;
                vm.rewardTaskLog.totalCount = size;

                $scope.$evalAsync(vm.drawRewardTaskGroupTable(newSearch, data, size, summary, topUpAmountSum));
                // $scope.$evalAsync(vm.drawRewardTaskTable(newSearch, tblData, size, summary, topUpAmountSum));
            });
        }
        vm.drawRewardTaskGroupTable = function (newSearch, tdata, size, summary, topUpAmountSum) {
            let tblData = null;

            if (vm.selectedPlatform.data.useProviderGroup) {
                tblData = tdata && tdata.data ? tdata.data.displayRewardTaskGroup.map(item => {
                    item.createTime$ = vm.dateReformat(item.createTime);
                    item.currentAmount$ = item.currentAmt - item.initAmt;
                    item.bonusAmount$ = -item.initAmt;
                    return item;
                }) : [];
                tblData = tblData.filter(item => {
                    return item.status == 'Started'
                });
                vm.rewardTaskGroupDetails = tblData;
            }

            let tableOptions = $.extend({}, vm.generalDataTableOptions, {
                data: tblData,
                aoColumnDefs: [

                    {targets: '_all', defaultContent: ' ', bSortable: false}
                ],
                columns: [
                    {
                        title: $translate('Reward Task Group(Progress)'),
                        data: "providerGroup.name",
                        advSearch: true,
                        sClass: "",
                        render: function (data, type, row) {
                            data = data || '';
                            let providerGroupId = row.providerGroup ? row.providerGroup._id : null;
                            let link = $('<div>', {});

                            if (data) {
                                link.append($('<a>', {
                                    'ng-click': 'vm.getRewardTaskGroupProposal("' + providerGroupId + '");',
                                }).text(data ? data : 0));
                            }
                            else {

                                link.append($('<a>', {
                                    'ng-click': 'vm.getRewardTaskGroupProposal();'
                                }).text(data ? data : $translate('ANY_LOBBY')));
                                // link.append($('<div>', {}).text(data ? data : $translate('Valid Progress')));
                            }
                            return link.prop('outerHTML')
                        }
                    },
                    {
                        title: $translate('Unlock Progress(Consumption)'),
                        advSearch: true,
                        sClass: "",
                        render: function (data, type, row) {
                            let providerGroupId = row.providerGroup ? row.providerGroup._id : '';
                            let forbidXIMAAmt = Number(row.forbidXIMAAmt ? row.forbidXIMAAmt : 0);
                            let targetConsumption = Number(row.targetConsumption);
                            var text = $noRoundTwoDecimalToFix(row.curConsumption) + '/' + $noRoundTwoDecimalToFix(targetConsumption + forbidXIMAAmt);
                            var result = '<div id="' + "pgConsumpt" + providerGroupId + '">' + text + '</div>';
                            return result;
                        }
                    },
                    {
                        title: $translate('Unlock Progress(WinLose)'),
                        advSearch: true,
                        sClass: "",
                        render: function (data, type, row) {
                            let providerGroupId;

                            if (row.providerGroup) {
                                providerGroupId = row.providerGroup._id;
                            }

                            let text = $noRoundTwoDecimalToFix(row.currentAmount$) + '/' + $noRoundTwoDecimalToFix(row.bonusAmount$);
                            vm.rtgBonusAmt[providerGroupId] = row.currentAmount$;
                            vm.rewardTaskGroupCurrentAmt = row.currentAmount$;
                            var result = '<div id="' + "pgReward" + providerGroupId + '">' + text + '</div>';
                            return result;
                        }
                    },
                ],
                "paging": false,
                "scrollX": true,
                "autoWidth": true,
                "sScrollY": 350,
                "scrollCollapse": true,
                "destroy": true,
                fnInitComplete: function(settings){
                    $compile(angular.element('#' + settings.sTableId).contents())($scope);
                }
            });

            let aTable = $("#rewardTaskGroupLogTbl").DataTable(tableOptions);
            aTable.columns.adjust().draw();
            vm.rewardTaskLog.pageObj.init({maxCount: size}, newSearch);
            $('#rewardTaskGroupLogTbl').off('order.dt');
            $('#rewardTaskGroupLogTbl').on('order.dt', function (event, a, b) {
                vm.commonSortChangeHandler(a, 'rewardTaskLog', vm.getRewardTaskLogData);
            });
            $("#rewardTaskGroupLogTbl").resize();
        };

        vm.setUnlockTaskGroup = function (index) {
            vm.dynRewardTaskGroupIndex = [];
            $('.unlockTaskGroupProposal:checked').each(function () {
                let result = $(this).val().split(',');
                vm.dynRewardTaskGroupIndex.push(result);
            })
        }


        vm.unlockTaskGroup = () => {
            let incRewardAmt = 0;
            let incConsumptAmt = 0;
            let rewardTaskGroup = vm.dynRewardTaskGroupId[0] ? vm.dynRewardTaskGroupId[0] : {};
            let index = [];
            vm.dynRewardTaskGroupIndex.forEach(item => {
                incRewardAmt += Number(item[0]);
                incConsumptAmt += Number(item[1]);
                index.push(Number(item[2]));
            });

            let sendQuery = {
                'rewardTaskGroupId': rewardTaskGroup._id,
                'incRewardAmount': incRewardAmt,
                'incConsumptionAmount': incConsumptAmt,
                'platform': vm.selectedPlatform.id,
                'playerId': vm.isOneSelectedPlayer().playerId
            };

            socketService.$socket($scope.AppSocket, 'unlockRewardTaskInRewardTaskGroup', sendQuery, function (data) {
                vm.getRewardTaskLogData(true);
                $('#rewardTaskGroupProposalTbl').DataTable().clear().draw();
                $('#rewardTaskLogTbl').DataTable().clear().draw();
                //  save the rewardTask Progress that is  manual unlocked
                index.forEach(indexNO => {
                    let sendData = {
                        platformId: vm.selectedPlatform.id,
                        playerId: vm.isOneSelectedPlayer()._id,
                        unlockTime: new Date().toISOString(),
                        creator: {
                            type: "admin",
                            name: authService.adminName,
                            id: authService.adminId
                        },
                        rewardTask: {
                            type: vm.rewardTaskGroupProposalList[indexNO].type.name,
                            id: vm.rewardTaskGroupProposalList[indexNO].type._id,
                        },
                        currentConsumption: vm.rewardTaskGroupProposalList[indexNO].curConsumption$,
                        maxConsumption: vm.rewardTaskGroupProposalList[indexNO].maxConsumption$,
                        currentAmount: -vm.rewardTaskGroupProposalList[indexNO].archivedAmt$,
                        targetAmount: vm.rewardTaskGroupProposalList[indexNO].availableAmt$,
                        topupAmount: vm.rewardTaskGroupProposalList[indexNO].topUpAmount,
                        proposalId: vm.rewardTaskGroupProposalList[indexNO]._id,
                        proposalNumber: vm.rewardTaskGroupProposalList[indexNO].proposalId,
                        topupProposalNumber: vm.rewardTaskGroupProposalList[indexNO].topUpProposal,
                        bonusAmount: vm.rewardTaskGroupProposalList[indexNO].bonusAmount,
                        targetProviderGroup: vm.rewardTaskGroupProposalList[indexNO].data.provider$,
                        status: "ManualUnlock",
                        useConsumption: vm.rewardTaskGroupProposalList[indexNO].useConsumption,
                        inProvider: vm.rewardTaskGroupProposalList[indexNO].inProvider,

                    };

                    socketService.$socket($scope.AppSocket, 'createRewardTaskGroupUnlockedRecord', sendData, function (data) {
                        console.log('createRewardTaskGroupUnlockedRecord', sendData);
                        $scope.safeApply();
                    })

                })
            })
        }

        vm.getIncReward = function (currentAmt, rewardAmt, firstIdx, lastIdx) {

            let sumRewardAmt = 0;
            for (let i = 0; i <= lastIdx; i++) {
                let prop = vm.simpleRewardProposalData[i];
                sumRewardAmt += prop.applyAmount + prop.rewardAmount;
            }
            let result = sumRewardAmt - currentAmt;
            return result
        }

        vm.getIncConsumpt = function (curConsumption, targetConsumption, firstIdx, lastIdx) {

            let sumConsumption = 0;
            for (let i = 0; i <= lastIdx; i++) {
                let prop = vm.simpleRewardProposalData[i];
                sumConsumption += prop.spendingAmount;
            }
            let result = sumConsumption - curConsumption;
            return result;

        }

        vm.drawRewardTaskProposalTable = function (newSearch, data, size, summary, topUpAmountSum) {
            let rewardTaskGroup = vm.dynRewardTaskGroupId[0] ? vm.dynRewardTaskGroupId[0] : {};
            var tableOptions = $.extend({}, vm.generalDataTableOptions, {
                data: data,
                aoColumnDefs: [
                    {targets: '_all', defaultContent: ' ', bSortable: false}
                ],
                columns: [
                    {
                        title: $translate('RewardProposalId'),
                        data: "proposalId",
                        render: function (data, type, row, meta) {
                            let applyAmount = row.data.applyAmount;
                            var rowId = String(meta.row);
                            let text = '';
                            let sumRewardAmount = 0;
                            for (let i = 0; i <= rowId; i++) {
                                let applyAmount = vm.rewardTaskProposalData[i].data.applyAmount ? vm.rewardTaskProposalData[i].data.applyAmount : 0;
                                let rewardAmount = vm.rewardTaskProposalData[i].data.rewardAmount ? vm.rewardTaskProposalData[i].data.rewardAmount : 0;
                                sumRewardAmount += applyAmount + rewardAmount;
                            }
                            let isSubmit = vm.isSubmitProposal(rowId);
                            var adminName = row.creator ? row.creator.name : '';

                            if (isSubmit.isSubmit) {
                                text = '<a class="fa fa-check margin-right-5"></a><span>(' + adminName + ')</span>';
                            } else {
                                text = '<input type="checkbox" class="unlockTaskGroupProposal" value="' + [row.data.applyAmount, row.data.spendingAmount, rowId] + '" ng-click="vm.setUnlockTaskGroup(\'' + rowId + '\')">';
                            }
                            let result = '<div>' + text + '</div>';
                            return result;
                        }
                    },
                    {
                        title: $translate('eventName'),
                        data: "data.eventName",
                        render: function (data, type, row) {
                            let result = '<div>' + data + '</div>';
                            return result;
                        }
                    },
                    {
                        title: $translate('Unlock Progress(TopUp)'),
                        data: "applyAmount",
                        advSearch: true,
                        sClass: "",
                        render: function (data, type, row) {

                            let rewardAmt = rewardTaskGroup ? rewardTaskGroup.rewardAmt : 0;
                            let applyAmount = row.data.applyAmount ? row.data.applyAmount : 0;
                            let rewardAmount = row.data.rewardAmount ? row.data.rewardAmount : 0;
                            let sumAmount = applyAmount + row.data.rewardAmount;
                            let text = sumAmount + '/' + rewardAmt;
                            let result = '<div>' + text + '</div>';
                            return result;
                        }
                    },
                    {
                        title: $translate('Unlock Progress(Consumption)'),
                        data: "spendingAmount",
                        advSearch: true,
                        sClass: "",
                        render: function (data, type, row) {

                            let targetConsumption = rewardTaskGroup ? rewardTaskGroup.targetConsumption : 0;
                            let text = spendingAmt + '/' + targetConsumption;
                            let result = '<div>' + text + '</div>';
                            return result;
                        }
                    },
                ],
                "paging": false,
                "scrollX": true,
                "autoWidth": true,
                "sScrollY": 350,
                "scrollCollapse": true,
                "destroy": true,
                fnRowCallback: function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                    $compile(nRow)($scope);
                }

            });

            var aTable = $("#rewardTaskGroupProposalTbl").DataTable(tableOptions);
            aTable.columns.adjust().draw();
            vm.rewardTaskLog.pageObj.init({maxCount: size}, newSearch);

            // $('#DD').resize();
            $('#rewardTaskGroupProposalTbl').off('order.dt');
            $('#rewardTaskGroupProposalTbl').on('order.dt', function (event, a, b) {
                vm.commonSortChangeHandler(a, 'rewardTaskLog', vm.getRewardTaskLogData);
            });
            $('#rewardTaskLogTbl').resize();
            $scope.safeApply();
        }
        vm.calSpendingAmt = function (rowId) {
            let rewardTaskGroup = vm.dynRewardTaskGroupId[0] ? vm.dynRewardTaskGroupId[0] : null;

            if (!rewardTaskGroup) {
                return {'incCurConsumption': 0, 'currentAmt': 0, 'currentMax': 0}
            } else {
                let spendingAmt = 0;

                //calculate the value between this rowId
                let currentMax = 0;
                let AmtNow = 0;
                let curConsumption = rewardTaskGroup.curConsumption ? rewardTaskGroup.curConsumption : 0;
                for (let i = 0; i <= rowId; i++) {
                    if (vm.rewardTaskProposalData[i]) {
                        let proposalSpendingAmt =
                            vm.rewardTaskProposalData[i].data.spendingAmount
                            || vm.rewardTaskProposalData[i].data.requiredUnlockAmount
                            || vm.rewardTaskProposalData[i].data.actualAmountReceived
                            || vm.rewardTaskProposalData[i].data.amount
                            || 0;

                        let forbidXIMAAmt = 0;
                        let spendingAmount = parseFloat(proposalSpendingAmt);
                        let rewardTaskGroup = vm.dynRewardTaskGroupId[0] ? vm.dynRewardTaskGroupId[0] : null;
                        if (rewardTaskGroup) {
                            forbidXIMAAmt = rewardTaskGroup.forbidXIMAAmt ? rewardTaskGroup.forbidXIMAAmt : 0;
                        }
                        currentMax = parseFloat(proposalSpendingAmt);
                        spendingAmt += spendingAmount;
                    }
                }
                let incCurConsumption = curConsumption - spendingAmt;

                if (incCurConsumption >= 0) {
                    AmtNow = currentMax;
                } else {
                    AmtNow = currentMax + incCurConsumption;
                    if (AmtNow <= 0) {
                        AmtNow = 0;
                    }
                }

                return {'incCurConsumption': incCurConsumption, 'currentAmt': AmtNow, 'currentMax': currentMax}
            }


        }
        vm.isSubmitProposal = function (rowId) {

            let sumRewardAmount = 0;
            let curRewardAmount = 0;
            // let taskGroupCurrentAmt = vm.dynRewardTaskGroupId ? vm.dynRewardTaskGroupId[0].currentAmt:0;
            let currentMax = 0;
            let curRewardDisplay = 0;


            //getRewardTaskGroup
            let rewardTaskGroup = vm.dynRewardTaskGroupId ? vm.dynRewardTaskGroupId[0] : null;

            if (!rewardTaskGroup) {
                rewardTaskGroup = {currentAmt: 0, rewardAmt: 0}
            }

            let taskGroupCurrentAmt = rewardTaskGroup ? rewardTaskGroup.currentAmt : 0;
            let rewardTaskGroupRewardAmt = rewardTaskGroup.rewardAmt ? rewardTaskGroup.rewardAmt : 0;

            if (rowId == '0') {
                let applyAmount =
                    vm.rewardTaskProposalData[0]
                    && vm.rewardTaskProposalData[0].data
                    && vm.rewardTaskProposalData[0].data.applyAmount
                        ? vm.rewardTaskProposalData[0].data.applyAmount : 0;
                let rewardAmount =
                    vm.rewardTaskProposalData[0]
                    && vm.rewardTaskProposalData[0].data
                    && vm.rewardTaskProposalData[0].data.rewardAmount
                        ? vm.rewardTaskProposalData[0].data.rewardAmount : 0;
                currentMax = applyAmount + rewardAmount;
                sumRewardAmount += applyAmount + rewardAmount;
            } else {
                for (let i = 0; i <= rowId; i++) {
                    if (vm.rewardTaskProposalData[i]) {
                        let applyAmount =
                            vm.rewardTaskProposalData[i]
                            && vm.rewardTaskProposalData[i].data
                            && vm.rewardTaskProposalData[i].data.applyAmount
                                ? vm.rewardTaskProposalData[i].data.applyAmount : 0;
                        let rewardAmount =
                            vm.rewardTaskProposalData[i]
                            && vm.rewardTaskProposalData[i].data
                            && vm.rewardTaskProposalData[i].data.rewardAmount
                                ? vm.rewardTaskProposalData[i].data.rewardAmount : 0;
                        currentMax = applyAmount + rewardAmount;
                        sumRewardAmount += applyAmount + rewardAmount;
                    }
                }


            }

            let finalRewardAmount = taskGroupCurrentAmt - sumRewardAmount;

            if (finalRewardAmount >= 0) {
                curRewardDisplay = currentMax;
            } else {
                curRewardDisplay = currentMax + finalRewardAmount;
                if (curRewardDisplay <= 0) {
                    curRewardDisplay = 0;
                }
            }
            let spendingAmt = vm.calSpendingAmt(rowId);

            //getCurrentRewardAmt
            if (vm.rewardTaskProposalData[rowId]) {
                let curApplyAmt = vm.rewardTaskProposalData[rowId].data.applyAmount ? vm.rewardTaskProposalData[rowId].data.applyAmount : 0;
                let curRewardAmt = vm.rewardTaskProposalData[rowId].data.rewardAmount ? vm.rewardTaskProposalData[rowId].data.rewardAmount : 0;
                curRewardAmount = curApplyAmt + curRewardAmt;
            }

            if (curRewardDisplay == 0 && spendingAmt.currentAmt == 0) {
                return {
                    isSubmit: false,
                    curRewardAmount: curRewardDisplay,
                    rewardAmount: currentMax,
                    spendingAmt: spendingAmt
                }
            }
            else if (finalRewardAmount > 0 || spendingAmt.incCurConsumption > 0) {
                // already submit, display tick icon
                return {
                    isSubmit: true,
                    curRewardAmount: curRewardDisplay,
                    rewardAmount: currentMax,
                    rewardGroupMaxAmount: rewardTaskGroupRewardAmt,
                    spendingAmt: spendingAmt
                }
            } else {
                return {
                    isSubmit: false,
                    curRewardAmount: curRewardDisplay,
                    rewardAmount: currentMax,
                    rewardGroupMaxAmount: rewardTaskGroupRewardAmt,
                    spendingAmt: spendingAmt
                }
            }
        }

        vm.getRewardTaskGroupProposalLoading = false;

        vm.getRewardTaskGroupProposal = function (id) {
            // let sendQuery = { _id : id};
            vm.isUnlockTaskGroup = true;
            vm.dynRewardTaskGroupId = vm.rewardTaskGroupDetails.filter(item => {
                if (item.providerGroup) {
                    return item.providerGroup._id == id;
                }
            });

            if (!id) {
                vm.dynRewardTaskGroupId = vm.rewardTaskGroupDetails.filter(item => {
                    return !item.providerGroup && item.status == 'Started';
                });
            }

            vm.chosenProviderGroupId = id;
            let sendQuery = {
                _id: id,
                playerId: vm.selectedSinglePlayer._id,
                platformId: vm.selectedSinglePlayer.platform,
                from: vm.rewardTaskLog.query.startTime.data('datetimepicker').getLocalDate(),
                to: vm.rewardTaskLog.query.endTime.data('datetimepicker').getLocalDate(),
                index: vm.rewardTaskLog.index ? vm.rewardTaskLog.index : 0,
                limit: vm.rewardTaskLog.limit ? vm.rewardTaskLog.limit : 0,
                sortCol: vm.rewardTaskLog.sortCol || null
            };

            if (!id) {
                $('#rewardTaskGroupProposalTbl').DataTable().clear().draw();
            }

            if (!vm.getRewardTaskGroupProposalLoading) {
                vm.getRewardTaskGroupProposalLoading = true;
                socketService.$socket($scope.AppSocket, 'getRewardTaskGroupProposal', sendQuery, function (data) {

                    console.log("getRewardTaskGroupProposal data", data);
                    // vm.rewardTaskProposalData = data.data.data;
                    vm.simpleRewardProposalData = vm.constructProposalData(data.data.data);
                    let result = commonService.checkProgressOfRewardTasksWithinRTG(data.data.data, vm.dynRewardTaskGroupId, vm.rtgBonusAmt, true);
                    let summary = data.data.summary;

                    if (result && result.length){
                        result.forEach(item => {
                            item['createTime$'] = vm.dateReformat(item.data.createTime$);
                            item['provider$'] = $translate(item.data.provider$);
                        })
                    }

                    /* YeeHui - will remove this after the testing are OK */
                    // let result = data.data.data;
                    // let usedTopUp = []
                    //
                    // // check the proposal and exclude the proposal to be shown in the progress bar if the proposal is dynamicReward, type c promocode or limitedOffer
                    // result.forEach(
                    //     item => {
                    //         if (item && item.data && (item.data.topUpProposalId || item.data.topUpProposal) && (item.data.isDynamicRewardAmount || (item.data.promoCodeTypeValue && item.data.promoCodeTypeValue == 3) || item.data.limitedOfferObjId)) {
                    //             usedTopUp.push(item.data.topUpProposalId || item.data.topUpProposal)
                    //         }
                    //     }
                    // );
                    //
                    // if (usedTopUp.length > 0) {
                    //     result = result.filter(item => {
                    //         for (let i = 0; i < usedTopUp.length; i++) {
                    //             if (usedTopUp.indexOf(item.proposalId) < 0) {
                    //                 return item;
                    //             }
                    //         }
                    //     });
                    // }
                    //
                    // vm.rewardTaskProposalData = result;
                    // console.log("vm.getRewardTaskGroupProposal data", data);
                    //
                    // result.forEach((item, index) => {
                    //     item.proposalId = item.proposalId || item.data.proposalId;
                    //     item['createTime$'] = vm.dateReformat(item.data.createTime$);
                    //     item.useConsumption = item.data.useConsumption;
                    //     item.topUpProposal = item.data.topUpProposalId ? item.data.topUpProposalId : item.data.topUpProposal;
                    //     item.topUpAmount = item.data.topUpAmount;
                    //     item.bonusAmount = item.data.rewardAmount;
                    //     item.applyAmount = item.data.actualAmount || item.data.actualAmountReceived || item.data.applyAmount || item.data.amount;
                    //     item.requiredUnlockAmount = item.data.spendingAmount;
                    //     item.requiredBonusAmount = item.data.requiredBonusAmount;
                    //     item['provider$'] = $translate(item.data.provider$);
                    //     item.rewardType = item.data.rewardType;
                    //
                    //     item.requiredUnlockAmount$ = item.requiredUnlockAmount;
                    //     // item.curConsumption$ = item.curConsumption;
                    //     if (vm.isUnlockTaskGroup) {
                    //         let spendingAmt = vm.calSpendingAmt(index);
                    //
                    //         item.curConsumption$ = spendingAmt.currentAmt;
                    //         item.maxConsumption$ = spendingAmt.currentMax;
                    //     } else {
                    //         item.curConsumption$ = item.requiredBonusAmount;
                    //         item.maxConsumption$ = item.requiredUnlockAmount;
                    //     }
                    //     item.bonusAmount$ = item.data.bonusAmount;
                    //     item.requiredBonusAmount$ = item.requiredBonusAmount;
                    //     item.currentAmount$ = item.data.currentAmount;
                    //
                    //     item.availableAmt$ = item.bonusAmount ? item.bonusAmount : (item.applyAmount || 0);
                    //     item.archivedAmt$ = 0;
                    //
                    //     // exclude the proposal to be shown in the progress bar if the proposal is dynamicReward, type c promocode or limitedOffer
                    //     if (item.data.isDynamicRewardAmount || (item.data.promoCodeTypeValue && item.data.promoCodeTypeValue == 3) || item.data.limitedOfferObjId) {
                    //         item.availableAmt$ = (item.applyAmount || 0) + (item.bonusAmount || 0);
                    //         // usedTopUp.push(item.topUpProposal)
                    //     }
                    //
                    //     let providerGroup = "undefined"; // this is the key to access vm.rtgBonusAmt for rewards/top ups that are not binding with providerGroup
                    //     if (item && item.data && item.data.providerGroup){
                    //
                    //         // extra checking on the type as the promocode will generate array of providerGroup
                    //         if (typeof item.data.providerGroup == 'object'){
                    //
                    //             if (item.data.providerGroup.length){
                    //                 providerGroup = item.data.providerGroup[0];
                    //             }
                    //             else{
                    //                 providerGroup = "undefined";
                    //             }
                    //         }
                    //         else{
                    //             providerGroup = item.data.providerGroup;
                    //         }
                    //     }
                    //     // let providerGroup = item && item.data && item.data.providerGroup ? (item.data.providerGroup.length == 0 ? 'undefined' : ):
                    //     if (vm.rtgBonusAmt[providerGroup] <= -(item.availableAmt$)) {
                    //         vm.rtgBonusAmt[providerGroup] -= -(item.availableAmt$);
                    //         item.archivedAmt$ = item.availableAmt$
                    //     } else if (vm.rtgBonusAmt[providerGroup] != 0) {
                    //         if (providerGroup === "undefined") {
                    //             let archivedAmtEmpty = vm.rtgBonusAmt["undefined"] ? vm.rtgBonusAmt["undefined"] : 0;
                    //             item.archivedAmt$ = -archivedAmtEmpty;
                    //             vm.rtgBonusAmt["undefined"] = 0;
                    //
                    //         } else {
                    //             item.archivedAmt$ = -vm.rtgBonusAmt[providerGroup];
                    //             vm.rtgBonusAmt[providerGroup] = 0;
                    //             item.archivedAmt$ = item.archivedAmt$ ? item.archivedAmt$ : 0;
                    //         }
                    //     }
                    //     item.isArchived =
                    //         item.archivedAmt$ == item.availableAmt$ || item.curConsumption$ == item.requiredUnlockAmount$;
                    //
                    //
                    // });

                    // if (usedTopUp.length > 0) {
                    //     result = result.filter(item => {
                    //         for (let i = 0; i < usedTopUp.length; i++) {
                    //             if (usedTopUp.indexOf(item.proposalId) < 0) {
                    //                 return item;
                    //             }
                    //         }
                    //     });
                    // }

                    console.log("vm.getRewardTaskGroupProposal", result);
                    vm.rewardTaskGroupProposalList = [];
                    Object.assign(vm.rewardTaskGroupProposalList, result);
                    $scope.$evalAsync(vm.drawRewardTaskTable(true, result, 0, summary, 0, 0));
                    // vm.drawRewardTaskTable(true, data.data, size, summary, topUpAmountSum);
                    vm.curRewardTask = data;
                    vm.getRewardTaskGroupProposalLoading = false;
            })

            }
        };

        vm.constructProposalData = function (proposals) {
            let proposalData = [];

            proposals.map(item => {
                let proposal = {
                    applyAmount: item.data.applyAmount ? item.data.applyAmount : 0,
                    rewardAmount: item.data.rewardAmount ? item.data.rewardAmount : 0,
                    //consumption
                    spendingAmount: item.data.spendingAmount ? item.data.spendingAmount : 0
                }
                proposalData.push(proposal);
            })
            return proposalData;
        }

        vm.unlockPlatformProviderGroup = function () {
            let sendQuery = {
                platformObjId: vm.selectedPlatform.id
            }
            socketService.$socket($scope.AppSocket, 'startPlatformUnlockRewardTaskGroup', sendQuery, function (data) {
                console.log("PlatformUnlockRewardTaskGroup", data)
            })
        }

        vm.showUnlockProviderModal = function () {
            if (vm.platformBasic.useProviderGroup == false && vm.selectedPlatform.data.useProviderGroup == true) {
                $("#modalUnlockProvider").modal('show');
                $("#modalUnlockProvider").on('shown.bs.modal', function (e) {
                    $scope.safeApply();
                })
            }

        };

        vm.isDiffConsumptionProvider = function (providerArr, showModal) {
            let isDiff = false;
            let providerSourceArr;
            if (providerArr) {
                providerSourceArr = providerArr.sort();
            } else {
                providerSourceArr = vm.allPlayerLvl[0].levelUpConfig[0].consumptionSourceProviderId.sort();
            }

            for (let i = 0; i < vm.allPlayerLvl.length; i++) {
                for (let j = 0; j < vm.allPlayerLvl[i].levelUpConfig.length; j++) {
                    let providerSourceCompare = [];
                    if (vm.allPlayerLvl[i].levelUpConfig[j].consumptionSourceProviderId) {
                        providerSourceCompare = vm.allPlayerLvl[i].levelUpConfig[j].consumptionSourceProviderId.sort();
                    }
                    if (JSON.stringify(providerSourceArr) != JSON.stringify(providerSourceCompare)) {
                        isDiff = true;
                        break;
                    }
                }
                if (isDiff) {
                    break;
                }
            }

            if (showModal && isDiff && !vm.autoCheckPlayerLevelUp) {
                vm.autoCheckPlayerLevelUp = true;
                $("#modalLevelUpProvider").modal('show');
                $("#modalLevelUpProvider").on('shown.bs.modal', function (e) {
                    $scope.safeApply();
                })
            }

            return isDiff;
        }


        vm.diffLevelUpPeriod = function (childPeriod) {
            if (vm.allPlayerLevelUpPeriod[childPeriod] != vm.playerLevelPeriod.playerLevelUpPeriod && !vm.autoCheckPlayerLevelUp) {
                vm.autoCheckPlayerLevelUp = true;
                $("#modalLevelUpPeriod").modal('show');
                $("#modalLevelUpPeriod").on('shown.bs.modal', function (e) {
                    $scope.safeApply();
                })
            }
        }

        vm.isAutoCheckLevelUpChangeble = function () {
            let isEditable = true;
            for (let i = 0; i < Object.keys(vm.playerLvlData).length; i++) {
                let levelUpConfig = vm.playerLvlData[Object.keys(vm.playerLvlData)[i]].levelUpConfig;
                for (let j = 0; j < levelUpConfig.length; j++) {
                    if (vm.allPlayerLevelUpPeriod[levelUpConfig[j].topupPeriod] != vm.playerLevelPeriod.playerLevelUpPeriod
                        || vm.allPlayerLevelUpPeriod[levelUpConfig[j].consumptionPeriod] != vm.playerLevelPeriod.playerLevelUpPeriod) {
                        isEditable = false;
                        break;
                    }
                }
                if (isEditable == false) {
                    break;
                }
            }
            return isEditable;
        }
        vm.autoCheckLevelUpPopUp = function () {
            if (!vm.isAutoCheckLevelUpChangeble()) {
                vm.autoCheckPlayerLevelUp = true;
                $("#modalLevelUpPeriod").modal('show');
                $("#modalLevelUpPeriod").on('shown.bs.modal', function (e) {
                    $scope.safeApply();
                })
            } else {
                vm.isDiffConsumptionProvider(null, true);
            }
        }


        vm.selectReward = function ($event) {
            $event.stopPropagation();
            vm.selectedRewards = [];
            $('.unlockList:checked').each(function () {
                vm.selectedRewards.push($(this).val())
            })
        }
        vm.drawRewardTaskTable = function (newSearch, tblData, size, summary, topUpAmountSum) {
            console.log("tblData", tblData);
            var tableOptions = $.extend({}, vm.generalDataTableOptions, {
                data: tblData,
                "aaSorting": vm.rewardTaskLog.aaSorting || [[3, 'desc']],
                aoColumnDefs: [
                    // {'sortCol': 'createTime$', bSortable: true, 'aTargets': [3]},
                    {targets: '_all', defaultContent: ' ', bSortable: false}
                ],
                columns: [
                    {
                        "title": $translate('UnlockStatus'), data: "status",
                        render: function (data, type, row, meta) {
                            let text;
                            let rowId = String(meta.row);
                            let adminName = row.creator ? row.creator.name : '';

                            if (row.isArchived) {
                                text = '<a class="fa fa-check margin-right-5"></a><span>(' + adminName + ')</span>';
                            } else {
                                text = '<input type="checkbox" class="unlockTaskGroupProposal" value="' + [row.availableAmt$, row.maxConsumption$ - row.curConsumption$, rowId] + '" ng-click="vm.setUnlockTaskGroup(\'' + rowId + '\')">';
                            }

                            //
                            // let isSubmit = vm.isSubmitProposal(meta.row);
                            // let archived;
                            //
                            // if (vm.isUnlockTaskGroup && vm.chosenProviderGroupId) {
                            //     console.log('case 1');
                            //
                            //     archived = isSubmit.curRewardAmount <= 0;
                            // } else if (vm.isUnlockTaskGroup && !vm.chosenProviderGroupId) {
                            //
                            //
                            //     let applyAmount = row.applyAmount ? row.applyAmount: 0;
                            //     let rewardAmount = applyAmount + row.bonusAmount;
                            //
                            //     console.log('case 2', row.archivedAmt$, rewardAmount);
                            //
                            //     archived = row.archivedAmt$ == rewardAmount;
                            // }
                            //
                            // if (archived) {
                            //     console.log('case 3');
                            //     if (isSubmit.isSubmit) {
                            //         text = '<a class="fa fa-check margin-right-5"></a><span>(' + adminName + ')</span>';
                            //     } else {
                            //         text = '<input type="checkbox" class="unlockTaskGroupProposal" value="' + [row.data.applyAmount, row.data.spendingAmount, rowId] + '" ng-click="vm.setUnlockTaskGroup(\'' + rowId + '\')">';
                            //     }
                            // } else {
                            //     console.log('case 4');
                            //     if (data != 'Started') {
                            //         text = '<a class="fa fa-check margin-right-5"></a><span>(' + adminName +')</span>';
                            //     } else {
                            //         text = '<input type="checkbox" class="unlockList" name="unlockList[]" value="'+rowId+'"  ng-click="vm.selectReward($event)"/>';
                            //     }
                            // }

                            return "<div>" + text + "</div>";
                        }
                    },
                    {
                        title: $translate('RewardProposalId'),
                        data: "proposalId",
                        render: function (data, type, row) {
                            var link = $('<a>', {

                                'ng-click': 'vm.showProposalModal("' + data + '",1)'

                            }).text(data);
                            return link.prop('outerHTML');
                        }
                    },
                    {
                        title: $translate('SubRewardType'), data: "rewardType",
                        render: function (data, type, row) {
                            var text = $translate(data);
                            return text;
                        }

                    },
                    {title: $translate('CREATETIME'), data: "createTime$"},
                    //相關存款金額
                    {
                        title: $translate('Deposit Amount'),
                        data: "topUpAmount",
                        render: function(data, type, row){

                            let topUpAmount = '';
                            if(data && typeof data === 'number'){
                               topUpAmount = $noRoundTwoDecimalToFix(data);
                            }
                            return "<div align='right'>" + topUpAmount + "</div>";
                        }
                    },
                    {
                        title: $translate('Deposit ProposalId'),
                        data: "data.topUpProposal",
                        render: function (data, type, row) {
                            var link = $('<a>', {
                                'ng-click': 'vm.showProposalModal("' + data + '",1)'
                            }).text(data);
                            return link.prop('outerHTML');
                        }
                    },
                    //相關存款提案號
                    {
                        title: $translate('REWARD_AMOUNT'), data: "bonusAmount",
                        render: function(data, type, row){
                            let bonusAmount = '';
                            if(data && typeof data === 'number'){
                               bonusAmount = $noRoundTwoDecimalToFix(data);
                            }
                            return "<div align='right'>" + bonusAmount + "</div>";
                        }
                    },
                    {
                        //解锁进度（投注额）
                        "title": $translate('Unlock Progress(Consumption)'), data: "curConsumption$",
                        render: function (data, type, row, meta) {
                            let text = $noRoundTwoDecimalToFix(row.curConsumption$) + "/" + $noRoundTwoDecimalToFix(row.maxConsumption$);
                            return "<div>" + text + "</div>";
                        }
                    },
                    // {title: $translate('Unlock Progress(Consumption)'), data: "requiredUnlockAmount$", sClass: 'sumFloat textRight'},

                    // 解鎖進度
                    {
                        //解锁进度（输赢值）
                        "title": $translate('Unlock Progress(WinLose)'), data: "currentAmount",
                        render: function (data, type, row, meta) {
                            // let spendingAmt = vm.calSpendingAmt(meta.row);
                            // let isSubmit = vm.isSubmitProposal(meta.row);
                            let text = $noRoundTwoDecimalToFix(-row.archivedAmt$) + "/-" + $noRoundTwoDecimalToFix(row.availableAmt$);
                            //
                            // if (vm.isUnlockTaskGroup && vm.chosenProviderGroupId) {
                            //     let curRewardAmount = isSubmit.curRewardAmount;
                            //     let spAmount = spendingAmt.currentAmt;
                            //     let spCurrentMax = spendingAmt.currentMax;
                            //     text = isSubmit.curRewardAmount - isSubmit.rewardAmount + '/ -' + isSubmit.rewardAmount;
                            // } else if (vm.isUnlockTaskGroup && !vm.chosenProviderGroupId) {
                            //     let applyAmount = row.applyAmount ? row.applyAmount: 0;
                            //     let currentAmount = row.currentAmount ? row.currentAmount :0;
                            //     let rewardAmount = applyAmount + row.bonusAmount;
                            //     text = row.archivedAmt$ + '/ -' + rewardAmount;
                            // } else {
                            //     let applyAmount = row.applyAmount ? row.applyAmount: 0;
                            //     text = row.currentAmount - row.initAmt + '/ -' + (applyAmount + row.bonusAmount);
                            // }

                            return "<div>" + text + "</div>";
                        }
                    },
                    {title: $translate('GAME LOBBY / REWARD TASK GROUP'), data: "provider$"},
                    {
                        "title": $translate('IsConsumption'), data: "useConsumption",
                        render: function (data, type, row) {
                            var text = $translate(data);
                            return "<div>" + text + "</div>";
                        }
                    },
                ],
                "paging": false,
                "scrollX": true,
                "autoWidth": true,
                "sScrollY": 350,
                "scrollCollapse": true,
                "destroy": true,
                fnInitComplete: function(settings){
                    $compile(angular.element('#' + settings.sTableId).contents())($scope);
                }

                // fnRowCallback: function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                //     $compile(nRow)($scope);
                //     // $(nRow).off('click');
                //     // $(nRow).find('a').on('click', function () {
                //     //     vm.showProposalModal(aData.proposalId, 1);
                //     // });
                // }

            });

            utilService.createDatatableWithFooter('#rewardTaskLogTbl', tableOptions, {
                4: topUpAmountSum,
                6: summary ? summary.bonusAmountSum : 0,
                7: summary ? summary.requiredBonusAmountSum : 0,
                8: summary ? summary.currentAmountSum : 0
            });

            var aTable = $("#rewardTaskLogTbl").DataTable(tableOptions);
            aTable.columns.adjust().draw();
            vm.rewardTaskLog.pageObj.init({maxCount: size}, newSearch);

            // $('#DD').resize();
            $('#rewardTaskLogTbl').off('order.dt');
            $('#rewardTaskLogTbl').on('order.dt', function (event, a, b) {
                vm.commonSortChangeHandler(a, 'rewardTaskLog', vm.getRewardTaskLogData);
            });
            // $('#rewardTaskLogTbl').resize();
            // $scope.safeApply();
        }

        //////////////////////////// reward task log end
        vm.enableDisablePlayer = function () {
            var status = 1; //player status enable
            if (vm.selectedSinglePlayer.status == 1) {
                status = 2 // player status disable - forbidGame
            }
            var sendData = {
                _id: vm.selectedSinglePlayer._id,
                status: status,
                reason: "Status set by Admin",
                forbidProviders: null
            }
            socketService.$socket($scope.AppSocket, 'updatePlayerStatus', sendData, function (data) {
                vm.getPlatformPlayersData();
                $scope.safeApply();
            });
        };

        //Edit selected player
        vm.prepareEditCritical = function (which) {
            if (which == 'player') {
                if (!vm.correctVerifyPhoneNumber) {
                    vm.correctVerifyPhoneNumber = {str: ""};
                }
                $scope.emailConfirmation = null;
                $scope.qqConfirmation = null;
                $scope.weChatConfirmation = null;
                vm.duplicatedPhoneErr = {};
                if (!vm.modifyCritical) {
                    vm.modifyCritical = {
                        which: 'player',
                        title: $translate('MODIFY_PLAYER') + ' ' + vm.selectedSinglePlayer.name,
                        changeType: 'email',
                        curEmail: vm.selectedSinglePlayer.email,
                        curQQ: vm.selectedSinglePlayer.qq,
                        curWeChat: vm.selectedSinglePlayer.wechat,
                        phoneNumber: vm.selectedSinglePlayer.phoneNumber ? (vm.selectedSinglePlayer.phoneNumber.substring(0, 3) + "******" + vm.selectedSinglePlayer.phoneNumber.slice(-4)) : '',
                    }
                } else {
                    vm.modifyCritical.which = 'player';
                    vm.modifyCritical.title = $translate('MODIFY_PLAYER') + ' ' + vm.selectedSinglePlayer.name;
                    vm.modifyCritical.changeType = 'email';
                    vm.modifyCritical.curEmail = vm.selectedSinglePlayer.email;
                    vm.modifyCritical.curQQ = vm.selectedSinglePlayer.qq;
                    vm.modifyCritical.curWeChat = vm.selectedSinglePlayer.wechat;
                    vm.modifyCritical.phoneNumber = vm.selectedSinglePlayer.phoneNumber ? (vm.selectedSinglePlayer.phoneNumber.substring(0, 3) + "******" + vm.selectedSinglePlayer.phoneNumber.slice(-4)) : '';

                }
            } else if (which == 'partner') {
                $scope.emailConfirmation = null;
                $scope.qqConfirmation = null;
                $scope.weChatConfirmation = null;
                if (!vm.modifyCritical) {
                    vm.modifyCritical = {
                        which: 'partner',
                        title: $translate('MODIFY_PARTNER') + ' ' + vm.selectedSinglePartner.partnerName,
                        changeType: 'email',
                        curEmail: vm.selectedSinglePartner.email,
                        curQQ: vm.selectedSinglePartner.qq,
                        curWeChat: vm.selectedSinglePartner.wechat,
                        phoneNumber: vm.selectedSinglePartner.phoneNumber,
                    }
                } else {
                    vm.modifyCritical.which = 'partner';
                    vm.modifyCritical.title = $translate('MODIFY_PARTNER') + ' ' + vm.selectedSinglePartner.partnerName;
                    vm.modifyCritical.changeType = 'email';
                    vm.modifyCritical.curEmail = vm.selectedSinglePartner.email;
                    vm.modifyCritical.curQQ = vm.selectedSinglePartner.qq;
                    vm.modifyCritical.curWeChat = vm.selectedSinglePartner.wechat;
                    vm.modifyCritical.phoneNumber = vm.selectedSinglePartner.phoneNumber;
                }

                delete vm.modifyCritical.correctVerifyPhoneNumber;
                delete vm.modifyCritical.verifyPhoneNumber;
            }
        }
        vm.submitCriticalUpdate = function () {
            console.log('updateData', vm.modifyCritical);
            var sendStringKey = 0;
            var sendString = '';
            var sendData = {
                creator: {type: "admin", name: authService.adminName, id: authService.adminId},
                platformId: vm.selectedSinglePlayer.platform,
            };
            if (vm.modifyCritical.which == 'player') {
                sendData.data = {
                    playerName: vm.selectedSinglePlayer.name,
                    playerObjId: vm.selectedSinglePlayer._id
                }
                sendStringKey = 10;
            } else if (vm.modifyCritical.which == 'partner') {
                sendData.data = {
                    partnerName: vm.selectedSinglePartner.partnerName,
                    partnerObjId: vm.selectedSinglePartner._id
                }
                sendStringKey = 20;
            }
            if (vm.modifyCritical.changeType == 'email') {
                sendStringKey += 1;
                sendData.data.curData = {
                    email: vm.modifyCritical.curEmail
                }
                sendData.data.updateData = {
                    email: vm.modifyCritical.newEmail
                }
            } else if (vm.modifyCritical.changeType == 'phone') {
                sendData.data.curData = {
                    phoneNumber: vm.modifyCritical.phoneNumber
                }
                sendData.data.updateData = {
                    phoneNumber: vm.modifyCritical.newPhoneNumber
                }
            } else if (vm.modifyCritical.changeType == 'qq') {
                sendStringKey += 2;
                sendData.data.curData = {
                    qq: vm.modifyCritical.curQQ
                }
                sendData.data.updateData = {
                    qq: vm.modifyCritical.newQQ
                }
            } else if (vm.modifyCritical.changeType == 'weChat') {
                sendStringKey += 3;
                sendData.data.curData = {
                    wechat: vm.modifyCritical.curWeChat
                }
                sendData.data.updateData = {
                    wechat: vm.modifyCritical.newWeChat
                }
            }

            switch (sendStringKey) {
                case 10:
                    sendString = 'createUpdatePlayerPhoneProposal';
                    break;
                case 11:
                    sendString = 'createUpdatePlayerEmailProposal';
                    break;
                case 12:
                    sendString = 'createUpdatePlayerQQProposal';
                    break;
                case 13:
                    sendString = 'createUpdatePlayerWeChatProposal';
                    break;
                case 20:
                    sendString = 'createUpdatePartnerPhoneProposal';
                    break;
                case 21:
                    sendString = 'createUpdatePartnerEmailProposal';
                    break;
                case 22:
                    sendString = 'createUpdatePartnerQQProposal';
                    break;
                case 23:
                    sendString = 'createUpdatePartnerWeChatProposal';
                    break;

            }
            console.log(sendData, 'sendData', sendString);
            socketService.$socket($scope.AppSocket, sendString, sendData, function (data) {
                console.log("func inside");
                console.log('sent', data);
                if (vm.modifyCritical.which == 'partner') {
                    vm.getPlatformPartnersData();
                } else if (vm.modifyCritical.which == 'player') {
                    vm.getPlatformPlayersData();
                }

                if (data.data && data.data.stepInfo) {
                    socketService.showProposalStepInfo(data.data.stepInfo, $translate);
                }


            }, function (err) {
                console.log('err', err);
            });
        }

        vm.verifyPlayerPhoneNumber = function () {
            socketService.$socket($scope.AppSocket, 'verifyPlayerPhoneNumber', {
                playerObjId: vm.selectedSinglePlayer._id,
                phoneNumber: vm.modifyCritical.verifyPhoneNumber
            }, function (data) {
                $scope.$evalAsync(()=>{
                    console.log("verifyPlayerPhoneNumber:", data);
                    vm.correctVerifyPhoneNumber.str = data.data;
                })
            });
        };

        vm.checkIsPhoneNumberExist = function (isCreate) {
            if (isCreate) {
                vm.duplicatedPhoneErr = {};
            }

            let phoneNumber = (vm.modifyCritical && vm.modifyCritical.newPhoneNumber) || vm.newPlayer.phoneNumber;
            let platform = (vm.selectedSinglePlayer && vm.selectedSinglePlayer.platform) || vm.newPlayer.platform;

            if (phoneNumber && platform) {
                socketService.$socket($scope.AppSocket, 'isPhoneNumberExist', {
                    phoneNumber: phoneNumber,
                    platformObjId: platform
                }, function (data) {
                    $scope.$evalAsync(()=>{
                        if (data.data.length) {
                            console.log("checkIsPhoneNumberExist:", data);
                            vm.duplicatedPhoneErr.str = `此号码已绑定给玩家: ${data.data[0]}`
                        }
                    })
                });
            }
        };

        vm.verifyPlayerBankAccount = function (testBankAccount) {
            socketService.$socket($scope.AppSocket, 'verifyPlayerBankAccount', {
                playerObjId: vm.selectedSinglePlayer._id,
                bankAccount: testBankAccount
            }, function (data) {
                $scope.$evalAsync(()=>{
                    console.log("verifyPlayerBankAccount:", data);
                    vm.correctVerifyBankAccount = data.data;

                    if (vm.correctVerifyBankAccount) {
                        socketService.showConfirmMessage($translate("Validation succeed."), 10000);
                    } else {
                        socketService.showErrorMessage($translate("Validation failed.") + " - " + $translate("Bank card number did not match."));
                    }
                });
            });
        };

        vm.testSound = function (soundPath) {
            let soundUrl = "sound/notification/" + soundPath;
            let sound = new Audio(soundUrl);
            sound.play();
        };

        // Returns an object containing all key-value pairs of newObj which were are not in oldObj
        function newAndModifiedFields(oldObj, newObj) {
            function isEqualArray(array1, array2) {
                if (!array1 || !array2)
                    return false;
                if (array1.length != array2.length)
                    return false;

                for (var i = 0, l = array1.length; i < l; i++) {
                    if (array1[i] instanceof Array && array2[i] instanceof Array) {
                        if (isEqualArray(array1[i], array2[i]))
                            return false;
                    }
                    else if (array1[i] != array2[i]) {
                        // Warning - two different object instances will never be equal: {x:20} != {x:20}
                        return false;
                    }
                }
                return true;
            }

            var changes = {};
            for (var key in newObj) {
                if ($.isArray(newObj[key])) {
                    if (!isEqualArray(newObj[key], oldObj[key])) {
                        changes[key] = newObj[key];
                    }
                } else if (newObj[key] instanceof Date) {
                    let newValue = new Date(newObj[key]);
                    let oldValue = new Date(oldObj[key]);
                    if (newValue.getTime() !== oldValue.getTime()) {
                        changes[key] = newObj[key];
                    }
                } else if (JSON.stringify(newObj[key]) !== JSON.stringify(oldObj[key]) && newObj[key] != oldObj[key]) {
                    changes[key] = newObj[key];
                }
            }
            return changes;
        }

        //Enable or disable selected player
        vm.updatePlayerStatus = function (rowData, sendData) {
            console.log(rowData, sendData);
            socketService.$socket($scope.AppSocket, 'updatePlayerStatus', sendData, function (data) {
                vm.getPlatformPlayersData();
            });
        };

        vm.updatePlayerForbidProviders = function (sendData) {
            console.log('sendData', sendData);
            socketService.$socket($scope.AppSocket, 'updatePlayerForbidProviders', sendData, function (data) {
                vm.getPlatformPlayersData();
                vm.updateForbidGameLog(data.data._id, vm.findForbidCheckedName(data.data.forbidProviders, vm.allGameProviders));
            });
        };

        vm.updateBatchPlayerForbidProviders = function (sendData) {
            console.log('sendData', sendData);
            socketService.$socket($scope.AppSocket, 'updateBatchPlayerForbidProviders', sendData, function (data) {
                vm.getPlatformPlayersData();
                vm.updateBatchForbidGameLog(data);
            });
        };

        vm.updatePlayerForbidRewardPointsEvent = function (sendData) {
            console.log('sendData', sendData);
            socketService.$socket($scope.AppSocket, 'updatePlayerForbidRewardPointsEvent', sendData, function (data) {
                vm.getPlatformPlayersData();
                vm.updateForbidRewardPointsEventLog(data.data._id, vm.findForbidCheckedTitle(data.data.forbidRewardPointsEvent, vm.rewardPointsAllEvent));
            });
        };

        vm.updateBatchPlayerForbidRewardPointsEvent = function (sendData) {
            console.log('sendData', sendData);
            socketService.$socket($scope.AppSocket, 'updateBatchPlayerForbidRewardPointsEvent', sendData, function (data) {
                vm.getPlatformPlayersData();
                vm.updateBatchForbidRewardPointsEventLog(data);
            });
        };

        vm.updatePlayerForbidRewardEvents = function (sendData) {
            console.log('sendData', sendData);
            socketService.$socket($scope.AppSocket, 'updatePlayerForbidRewardEvents', sendData, function (data) {
                // let playerObj = data.data;
                // if (playerObj) {
                //     let sendData = {
                //         query: {
                //             platformObjId: playerObj.platform,
                //             isBlockByMainPermission: false
                //         },
                //         updateData: {}
                //     }
                //     if (playerObj.forbidPromoCode) {
                //         sendData.query.name = "次权限禁用组（预设）"; //hard code name;
                //         sendData.query.isBlockPromoCodeUser = true;
                //         sendData.query.isDefaultGroup = true;
                //         sendData.checkQuery = {
                //             platformObjId: playerObj.platform,
                //             playerNames: playerObj.name
                //         }
                //         sendData.updateData["$addToSet"] = {playerNames: playerObj.name};
                //     } else {
                //         sendData.query.playerNames =  playerObj.name;
                //         sendData.updateData["$pull"] = {playerNames: playerObj.name};
                //     }
                //
                //     socketService.$socket($scope.AppSocket, 'updatePromoCodeGroupMainPermission', sendData, function () {
                //     });
                // }
                vm.getPlatformPlayersData();
                vm.updateForbidRewardLog(data.data._id, vm.findForbidCheckedName(data.data.forbidRewardEvents, vm.allRewardEvent), data.data);
            });
        };
        vm.updateBatchPlayerForbidRewardEvents = function (sendData) {
            console.log('sendData', sendData);
            socketService.$socket($scope.AppSocket, 'updateBatchPlayerForbidRewardEvents', sendData, function (data) {
                vm.getPlatformPlayersData();
                vm.updateBatchForbidRewardLog(data);
            });
        };
        vm.getPlayerStatusChangeLog = function (rowData) {
            var deferred = Q.defer();
            console.log(rowData);
            socketService.$socket($scope.AppSocket, 'getPlayerStatusChangeLog', {
                _id: rowData._id
            }, function (data) {
                console.log('logData', data.data);
                vm.playerStatusHistory = data.data || [];
                $scope.safeApply();
                deferred.resolve(true);
            });
            return deferred.promise;
        }

        vm.getPlayerPermissionChangeByPlayerTab = function (flag) {
            $('.playerPermissionPopover').popover('hide');
            // $('#playerPermissionPopover').modal('hide');
            vm.playerPermissionQuery = vm.playerPermissionQuery || {};
            vm.playerPermissionQuery.searching = true;
            vm.playerPermissionHistory = [];
            $scope.safeApply();
            if (flag == 'new') {
                utilService.actionAfterLoaded('#modalPlayerPermissionChangeLog .searchDiv .startTime', function () {
                    vm.playerPermissionQuery.startTime = utilService.createDatePicker('#modalPlayerPermissionChangeLog .searchDiv .startTime');
                    vm.playerPermissionQuery.endTime = utilService.createDatePicker('#modalPlayerPermissionChangeLog .searchDiv .endTime');
                    // vm.playerPermissionQuery.startTime.data('datetimepicker').setDate(utilService.setLocalDayStartTime(utilService.setNDaysAgo(new Date(), 180)));
                    vm.playerPermissionQuery.startTime.data('datetimepicker').setDate(utilService.setLocalDayStartTime(new Date(vm.selectedSinglePlayer.registrationTime)));
                    vm.playerPermissionQuery.endTime.data('datetimepicker').setDate(utilService.setLocalDayEndTime(new Date()));
                });
            }
            let tempPlayerId = vm.popOverPlayerPermission && vm.popOverPlayerPermission._id ? vm.popOverPlayerPermission._id :
                vm.selectedSinglePlayer && vm.selectedSinglePlayer._id ? vm.selectedSinglePlayer._id : null;
            var sendData = {
                playerId: tempPlayerId,
                platform: vm.selectedPlatform.id,
                createTime: {
                    $gte: new Date(vm.playerPermissionQuery.startTime.data('datetimepicker').getLocalDate()),
                    $lt: new Date(vm.playerPermissionQuery.endTime.data('datetimepicker').getLocalDate())
                }
            }
            socketService.$socket($scope.AppSocket, 'getPlayerPermissionLog', sendData, function (data) {
                data.data.forEach(row => {
                    row.admin = row.isSystem ? {adminName: "System"} : row.admin;
                });
                vm.playerPermissionHistory = data.data || [];
                vm.playerPermissionHistory.map(item => {
                    if (item.oldData) {
                        let toggleGroup = {
                            banReward : item.oldData.banReward,
                            disableWechatPay : item.oldData.disableWechatPay,
                            forbidPlayerConsumptionReturn : item.oldData.forbidPlayerConsumptionReturn,
                            forbidPlayerFromEnteringGame : item.oldData.forbidPlayerFromEnteringGame,
                            forbidPlayerFromLogin : item.oldData.forbidPlayerFromLogin
                        };
                        for (let v in toggleGroup){
                            if(item.oldData.hasOwnProperty(v)){
                                item.oldData[v] = !item.oldData[v];
                            }
                            if(item.newData.hasOwnProperty(v)){
                                item.newData[v] = !item.newData[v];
                            }
                        }
                    }
                });
                vm.playerPermissionQuery.searching = false;
                $scope.safeApply();
            });
        }
        vm.getPlayerRewardHistory = function ($event) {
            vm.playerRewardHistory = {totalCount: 0};
            utilService.actionAfterLoaded(('#modalPlayerRewardHistory.in #playerReward .endTime' ), function () {
                vm.playerRewardHistory.startTime = utilService.createDatePicker('#playerReward .startTime');
                vm.playerRewardHistory.endTime = utilService.createDatePicker('#playerReward .endTime');
                vm.playerRewardHistory.startTime.data('datetimepicker').setDate(utilService.setLocalDayStartTime(utilService.setNDaysAgo(new Date(), 1)));
                vm.playerRewardHistory.endTime.data('datetimepicker').setDate(utilService.setLocalDayEndTime(new Date()));
                vm.playerRewardHistory.type = 'all';
                vm.playerRewardHistory.pageObj = utilService.createPageForPagingTable("#playerRewardHistoryTblPage", {}, $translate, function (curP, pageSize) {
                    vm.commonPageChangeHandler(curP, pageSize, "playerRewardHistory", vm.getPlayerRewardHistoryRecord)
                });
                vm.getPlayerRewardHistoryRecord(true);
            });
        }
        vm.getPlayerRewardHistoryRecord = function (newSearch) {
            vm.playerRewardHistory.loading = true;
            var sendQuery = {
                startTime: vm.playerRewardHistory.startTime.data('datetimepicker').getLocalDate(),
                endTime: vm.playerRewardHistory.endTime.data('datetimepicker').getLocalDate(),
                type: vm.playerRewardHistory.type,
                playerId: vm.selectedSinglePlayer._id,
                index: newSearch ? 0 : vm.playerRewardHistory.index,
                limit: newSearch ? 10 : vm.playerRewardHistory.limit,
                sortCol: vm.playerRewardHistory.sortCol || undefined,
            };
            if (sendQuery.type == 'all') {
                sendQuery.type = null;
            }
            console.log("Second:Query:", sendQuery);
            socketService.$socket($scope.AppSocket, 'queryRewardProposal', sendQuery, function (data) {
                var tableData = data.data ? data.data.data.map(item => {
                    item.createTime$ = vm.dateReformat(item.createTime);
                    item.rewardType$ = $translate(vm.platformRewardtype[item.type]);
                    item.rewardAmount$ = parseFloat((item.data.rewardAmount || item.data.amount)).toFixed(2);
                    item.status$ = $translate(item.status || item.process.status);
                    item.entryType$ = $translate($scope.constProposalEntryType[item.entryType]);
                    item.userType$ = $translate(item.userType ? $scope.constProposalUserType[item.userType] : "");
                    return item;
                }) : [];
                vm.playerRewardHistory.loading = false;
                vm.playerRewardHistory.totalCount = data.data ? data.data.total : 0;
                console.log("RewardHist:length:", tableData);
                vm.drawPlayerRewardHistoryTbl(tableData, vm.playerRewardHistory.totalCount, newSearch);
            });
        }
        vm.drawPlayerRewardHistoryTbl = function (showData, size, newSearch) {
            var tableOptions = $.extend({}, vm.generalDataTableOptions, {
                data: showData,
                "aaSorting": vm.playerRewardHistory.aaSorting || [],
                aoColumnDefs: [
                    {'sortCol': 'createTime', bSortable: true, 'aTargets': [0]},
                    {'sortCol': 'proposalId', bSortable: true, 'aTargets': [1]},
                    {'sortCol': 'type', bSortable: true, 'aTargets': [2]},
                    {'sortCol': 'entryType', bSortable: true, 'aTargets': [3]},
                    {'sortCol': 'entryType', bSortable: true, 'aTargets': [4]},
                    // {'sortCol': 'rewardAmount', bSortable: true, 'aTargets': [7]},
                    {targets: '_all', defaultContent: ' ', bSortable: false}
                ],
                columns: [
                    {title: $translate('date'), data: "createTime$"},
                    {title: $translate('proposalId'), data: "proposalId"},
                    {title: $translate('REWARD_TYPE'), data: "rewardType$"},
                    {title: $translate('ENTRY_TYPE'), data: "entryType$"},
                    {title: $translate('USER_TYPE'), data: "userType$"},
                    {title: $translate('REWARD_CODE'), data: "data.eventCode"},
                    {title: $translate('REWARD_NAME'), data: "data.eventName"},
                    {title: $translate('CREDIT'), data: "rewardAmount$", sClass: "alignRight"},
                    {title: $translate('STATUS'), data: "status$"},
                    {title: $translate('DESCRIPTION'), data: "data.eventDescription"}

                ],
                "paging": false,
            });
            var aTable = $("#playerRewardHistoryTbl").DataTable(tableOptions);
            vm.playerRewardHistory.pageObj.init({maxCount: size}, newSearch);
            $("#playerRewardHistoryTbl").off('order.dt');
            $("#playerRewardHistoryTbl").on('order.dt', function (event, a, b) {
                vm.commonSortChangeHandler(a, 'playerRewardHistory', vm.getPlayerRewardHistoryRecord);
            });

            $('#playerRewardHistoryTbl').resize();
            $scope.safeApply();
        }

        vm.getPlayerBonusHistory = function ($event) {
            vm.playerBonusHistory = {};
            utilService.actionAfterLoaded('#modalPlayerBonusHistory.in #playerBonus .endTime', function () {
                vm.playerBonusHistory.startTime = utilService.createDatePicker('#playerBonus .startTime');
                vm.playerBonusHistory.endTime = utilService.createDatePicker('#playerBonus .endTime');
                vm.playerBonusHistory.startTime.data('datetimepicker').setDate(utilService.setLocalDayStartTime(utilService.setNDaysAgo(new Date(), 1)));
                vm.playerBonusHistory.endTime.data('datetimepicker').setDate(utilService.setLocalDayEndTime(new Date()));
                vm.playerBonusHistory.pageObj = utilService.createPageForPagingTable("#playerBonusHistoryTblPage", {}, $translate, function (curP, pageSize) {
                    vm.commonPageChangeHandler(curP, pageSize, "playerBonusHistory", vm.getPlayerBonusHistoryRecord)
                });
                vm.getPlayerBonusHistoryRecord(true);
            });
        }
        vm.getPlayerBonusHistoryRecord = function (newSearch) {
            var sendQuery = {
                startTime: vm.playerBonusHistory.startTime.data('datetimepicker').getLocalDate(),
                endTime: vm.playerBonusHistory.endTime.data('datetimepicker').getLocalDate(),
                playerId: vm.selectedSinglePlayer.playerId,
                limit: newSearch ? 10 : vm.playerBonusHistory.limit,
                index: newSearch ? 0 : vm.playerBonusHistory.index,
                sortCol: vm.playerBonusHistory.sortCol || undefined
            };
            if (vm.playerBonusHistory.status) {
                sendQuery.status = vm.playerBonusHistory.status;
            }
            vm.playerBonusHistory.isSearching = true;
            console.log("Second:Query:", sendQuery);
            $scope.safeApply();
            socketService.$socket($scope.AppSocket, 'queryBonusProposal', sendQuery, function (data) {
                var showData = data.data ? data.data.data.map(item => {
                    item.createTime$ = vm.dateReformat(item.createTime);
                    item.curAmount$ = item.data && item.data.curAmount ? item.data.curAmount.toFixed(2) : 0;
                    item.status$ = $translate(item.status);
                    return item;
                }) : [];
                vm.playerBonusHistory.totalCount = data.data ? data.data.total : 0;
                let summary = data.data ? data.data.summary : {sumAmt: 0};
                console.log("RewardHist:length:", showData);
                vm.drawPlayerBonusHistoryTbl(showData, vm.playerBonusHistory.totalCount, newSearch, summary);
                vm.playerBonusHistory.isSearching = false;
                $scope.safeApply();
            });
        }
        vm.drawPlayerBonusHistoryTbl = function (showData, size, newSearch, summary) {
            var tableOptions = $.extend({}, vm.generalDataTableOptions, {
                data: showData,
                "aaSorting": vm.playerBonusHistory.aaSorting || [],
                aoColumnDefs: [
                    {'sortCol': 'playerId', bSortable: true, 'aTargets': [0]},
                    {'sortCol': 'proposalId', bSortable: true, 'aTargets': [1]},
                    {targets: '_all', defaultContent: ' ', bSortable: false}
                ],
                columns: [
                    {title: $translate('date'), data: "createTime$"},
                    {title: $translate('proposalId'), data: "proposalId"},
                    {title: $translate('STATUS'), data: "status$"},
                    {title: $translate('bonusId'), data: "data.bonusId"},
                    {title: $translate('bonusCredit'), data: "data.bonusCredit", sClass: 'sumText'},
                    {title: $translate('amount'), data: "data.amount", sClass: 'sumInt'},
                    {title: $translate('CUR_AMOUNT'), data: "curAmount$"},
                    {title: $translate('HONOREE_DETAIL'), data: "data.honoreeDetail"},
                ],
                "paging": false,
            });
            utilService.createDatatableWithFooter("#playerBonusHistoryTbl", tableOptions, {5: summary.sumAmt});

            // var aTable = $("#playerBonusHistoryTbl").DataTable(tableOptions);
            vm.playerBonusHistory.pageObj.init({maxCount: size}, newSearch);
            $("#playerBonusHistoryTbl").off('order.dt');
            $("#playerBonusHistoryTbl").on('order.dt', function (event, a, b) {
                vm.commonSortChangeHandler(a, 'playerBonusHistory', vm.getPlayerBonusHistoryRecord);
            });
            $('#playerBonusHistoryTbl').resize();
            $scope.safeApply();
        }
        vm.initPlayerBonus = function (rowData) {
            vm.playerBonus = {
                resMsg: '',
                showSubmit: true,
                notSent: true,
                bonusId: 1
            };

            vm.getSelectedRowPlatformDetails(rowData);
        }

        vm.getPlayerBankList = function () {
            vm.playerBankList = [];
            let isMultipleBank = false;

            if (authService.checkViewPermission('Player', 'Player', 'BindMultiplePaymentInformation')) {
                isMultipleBank = true;
            }

            let sendQuery = {
                playerObjId: vm.selectedSinglePlayer._id,
                platformObjId: vm.selectedSinglePlayer.platform,
                isMultipleBank: isMultipleBank
            };
            console.log('getPlayerBankList sendQuery', sendQuery);

            socketService.$socket($scope.AppSocket, 'getPlayerBankList', sendQuery, function (data) {
                console.log('getPlayerBankList', data);
                $scope.$evalAsync(() => {
                    if (data && data.data) {
                        vm.playerBankList = data.data.map(
                            bankList => {
                                bankList.encodedBankAccount =
                                    bankList.bankAccount ?
                                        bankList.bankAccount.slice(0, 6) + "**********" + bankList.bankAccount.slice(-4)
                                        : null;

                                for (let x in vm.allActiveBankTypeList) {
                                    bankList.bankNameStr = vm.allActiveBankTypeList[bankList.bankName];
                                }

                                return bankList;
                            }
                        );
                    }
                });
            });
        }

        vm.initPlayerCreditLog = function () {
            vm.playerCreditLog = vm.playerCreditLog || {totalCount: 0, limit: 50, index: 0, query: {}};
            // utilService.actionAfterLoaded('#modalPlayerCreditLog.in #playerCreditLogQuery .endTime', function () {
            utilService.actionAfterLoaded('#modalPlayerAccountingDetail #playerCreditLogQuery .endTime', function () {
                vm.playerCreditLog.query.startTime = utilService.createDatePicker('#playerCreditLogQuery .startTime');
                vm.playerCreditLog.query.endTime = utilService.createDatePicker('#playerCreditLogQuery .endTime');
                vm.playerCreditLog.query.startTime.data('datetimepicker').setDate(utilService.setLocalDayStartTime(utilService.setNDaysAgo(new Date(), 1)));
                vm.playerCreditLog.query.endTime.data('datetimepicker').setDate(utilService.setLocalDayEndTime(new Date()));
                vm.playerCreditLog.pageObj = utilService.createPageForPagingTable("#playerCreditLogTblPage", {pageSize: 50}, $translate, function (curP, pageSize) {
                    vm.commonPageChangeHandler(curP, pageSize, "playerCreditLog", vm.getPlayerCreditLogData)
                });
                vm.getPlayerCreditLogData(true);
            });
        }

        vm.getPlayerCreditLogData = function (newSearch) {
            if (!authService.checkViewPermission('Player', 'Credit', 'playerDailyCreditLog')) {
                return;
            }
            let sendQuery = {
                playerId: vm.selectedSinglePlayer._id,
                from: vm.playerCreditLog.query.startTime.data('datetimepicker').getLocalDate(),
                to: vm.playerCreditLog.query.endTime.data('datetimepicker').getLocalDate(),
                index: newSearch ? 0 : vm.playerCreditLog.index,
                limit: newSearch ? vm.playerCreditLog.limit : (vm.playerCreditLog.limit || 50),
                sortCol: vm.playerCreditLog.sortCol || null
            };
            socketService.$socket($scope.AppSocket, 'getPlayerCreditsDaily', sendQuery, function (data) {
                console.log('getPlayerDailyCredit', data);
                var tblData = data && data.data ? data.data.data.map(item => {
                    item.createTime$ = vm.dateReformat(item.createTime);
                    item.validCredit = (item.validCredit).toFixed(2);
                    item.lockedCredit = (item.lockedCredit).toFixed(2);
                    item.gameCredit = (item.gameCredit).toFixed(2);
                    item.providerStr$ = '(' + ((item.targetProviders && item.targetProviders.length > 0) ? item.targetProviders.map(pro => {
                        return pro.name + ' ';
                    }) : $translate('all')) + ')';
                    return item;
                }) : [];
                var size = data.data ? data.data.size : 0;
                vm.playerCreditLog.totalCount = size;
                vm.drawPlayerCreditLogTable(newSearch, tblData, size);
            });
        }
        vm.drawPlayerCreditLogTable = function (newSearch, tblData, size) {
            var tableOptions = $.extend({}, vm.generalDataTableOptions, {
                data: tblData,
                aoColumnDefs: [
                    {targets: '_all', defaultContent: ' ', bSortable: false}
                ],
                columns: [
                    {title: $translate('CREATETIME'), data: "createTime$"},
                    {title: $translate('valid Credit'), data: "validCredit"},
                    {title: $translate('locked Credit'), data: "lockedCredit"},
                    {title: $translate('game Credit'), data: "gameCredit"}
                ],
                "paging": false,
            });
            var aTable = $("#playerCreditLogTbl").DataTable(tableOptions);
            aTable.columns.adjust().draw();
            vm.playerCreditLog.pageObj.init({maxCount: size}, newSearch);
            $('#playerCreditLogTbl').resize();
            $('#playerCreditLogTbl').off('order.dt');
            $('#playerCreditLogTbl').on('order.dt', function (event, a, b) {
                vm.commonSortChangeHandler(a, 'playerCreditLog', vm.getPlayerCreditLogData);
            });

            $scope.safeApply();
        }

        vm.initPlayerApiLog = function () {
            vm.playerApiLog = {totalCount: 0, limit: 10, index: 0};
            vm.playerApiLog.apiAction = "";
            utilService.actionAfterLoaded('#modalPlayerApiLog.in #playerApiLogQuery .endTime', function () {
                vm.playerApiLog.startDate = utilService.createDatePicker('#playerApiLogQuery .startTime');
                vm.playerApiLog.endDate = utilService.createDatePicker('#playerApiLogQuery .endTime');
                vm.playerApiLog.startDate.data('datetimepicker').setDate(utilService.setLocalDayStartTime(utilService.setNDaysAgo(new Date(), 1)));
                vm.playerApiLog.endDate.data('datetimepicker').setDate(utilService.setLocalDayEndTime(new Date()));
                vm.playerApiLog.pageObj = utilService.createPageForPagingTable("#playerApiLogTblPage", {}, $translate, function (curP, pageSize) {
                    vm.commonPageChangeHandler(curP, pageSize, "playerApiLog", vm.getPlayerApiLogData);
                });
                vm.getPlayerApiLogData(true);
            });
        };

        vm.getPlayerApiLogData = function (newSearch) {
            if (!authService.checkViewPermission('Player', 'Player', 'playerApiLog')) {
                return;
            }

            let platformIdList;
            if(vm.actionLogPlatformList && vm.actionLogPlatformList.length){
                platformIdList = vm.actionLogPlatformList;
            }else{
                platformIdList = vm.allPlatformData.map(a => a._id);
            }

            let sendQuery = {
                platform: platformIdList,
                playerObjId: vm.selectedSinglePlayer && vm.selectedSinglePlayer._id || "",
                playerName: vm.playerApiLog.playerName || "",
                startDate: vm.playerApiLog.startDate.data('datetimepicker').getLocalDate(),
                endDate: vm.playerApiLog.endDate.data('datetimepicker').getLocalDate(),
                ipAddress: vm.playerApiLog.ipAddress,
                index: newSearch ? 0 : vm.playerApiLog.index,
                limit: newSearch ? 10 : vm.playerApiLog.limit,
                sortCol: vm.playerApiLog.sortCol || null
            };

            if (vm.playerApiLog.apiAction) {
                sendQuery.action = vm.playerApiLog.apiAction;
            }
            socketService.$socket($scope.AppSocket, 'getPlayerActionLog', sendQuery, function (data) {
                console.log("getPlayerApiLog", data);
                let tblData = data && data.data ? data.data.data.map(item => {
                    item.operationTime$ = vm.dateReformat(item.operationTime);

                    if (item.providerId && item.providerId.name) {
                        item.action$ = $translate(item.action) + item.providerId.name;
                    } else {
                        item.action$ = $translate("Login to main site");
                    }

                    if (item.player && item.player.name) {
                        item.playerName = item.player.name;
                    }

                    item.os = item.userAgent[0] && item.userAgent[0].os ? item.userAgent[0].os : "";
                    item.browser = item.userAgent[0] && item.userAgent[0].browser ? item.userAgent[0].browser : "";
                    item.ipArea$ = item.ipArea && item.ipArea.province && item.ipArea.city ? item.ipArea.province + "," + item.ipArea.city : "";
                    item.platform$ = item.platform && item.platform.name ? item.platform.name : "";
                    if (item.domain) {
                        var filteredDomain = item.domain.replace("https://www.", "").replace("http://www.", "").replace("https://", "").replace("http://", "").replace("www.", "");
                        let indexNo = filteredDomain.indexOf("/");
                        if (indexNo != -1) {
                            filteredDomain = filteredDomain.substring(0,indexNo);
                        }
                        item.domain$ = filteredDomain;
                    }
                    if (item.hasOwnProperty('osType') && item.osType !== '' && item.hasOwnProperty('os')) {
                        item.os = item.osType;
                    }

                    return item;
                }) : [];
                let total = data.data ? data.data.total : 0;
                vm.playerApiLog.totalCount = total;
                vm.drawPlayerApiLogTable(newSearch, tblData, total);
            });
        };

        vm.drawPlayerApiLogTable = function (newSearch, tblData, size) {
            let tableOptions = $.extend({}, vm.generalDataTableOptions, {
                data: tblData,
                aoColumnDefs: [
                    {targets: '_all', defaultContent: ' ', bSortable: false}
                ],
                columns: [
                    {title: $translate('PRODUCT_NAME'), data: "platform$"},
                    {title: $translate('Incident'), data: "action$"},
                    {title: $translate('PLAYER_NAME'), data: "playerName"},
                    {title: $translate('Operation Time'), data: "operationTime$"},
                    {
                        title: $translate('DEVICE'),
                        data: "inputDevice",
                        render: function (data, type, row) {
                            for (let i = 0; i < Object.keys(vm.inputDevice).length; i++) {
                                if (vm.inputDevice[Object.keys(vm.inputDevice)[i]] == data) {
                                    return $translate(Object.keys(vm.inputDevice)[i]);
                                }
                            }
                        }
                    },
                    {
                        title: $translate('IP_ADDRESS'),
                        data: "ipAddress",
                        render: function (data, type, row) {
                            data = data || '0';
                            let playerIpAddress = (row && row.ipAddress) ? row.ipAddress : "";

                            // display text in red if match blacklist ip
                            if (vm.blacklistIpList.includes(playerIpAddress)) {
                                var $a = $('<a>', {
                                    'class': 'colorRed',
                                    'data-toggle': 'modal',
                                    'data-target': '#modalPlayerBlacklistIpDetail',
                                    'ng-click': "vm.showBlacklistIpDetail(" + JSON.stringify(data) + ")"
                                }).text(data);
                                return $a.prop('outerHTML');
                            } else {
                                return $('<p>', {}).text(data).prop('outerHTML');
                            }
                        },
                        "fnCreatedCell": function (nTd, sData, oData, iRow, iCol) {
                            $compile(nTd)($scope)
                        }
                    },
                    {title: $translate('IP_AREA'), data: "ipArea$"},
                    {title: $translate('OS'), data: "os"},
                    {title: $translate('Browser'), data: "browser"},
                    {title: $translate('Domain Name'), data: "domain$"}
                ],
                "paging": false,
            });
            let aTable = $("#playerApiLogTbl").DataTable(tableOptions);
            aTable.columns.adjust().draw();
            vm.playerApiLog.pageObj.init({maxCount: size}, newSearch);
            $('#playerApiLogTbl').resize();
            $('#playerApiLogTbl').off('order.dt');
            $('#playerApiLogTbl').on('order.dt', function (event, a, b) {
                vm.commonSortChangeHandler(a, 'playerApiLog', vm.getPlayerApiLogData);
            });

            $scope.safeApply();
        };

        vm.showBlacklistIpDetail = function (playerIpAddress) {
            vm.blacklistIpDetail = vm.blacklistIpConfig.filter(e => {
                if (e && e.ip && playerIpAddress && e.ip.toString() === playerIpAddress.toString()) {
                    return e;
                }
            });
        };

        vm.initPlayerRewardPointLog = () => {
            vm.playerRewardPointsLog = {};
            utilService.actionAfterLoaded('#modalPlayerRewardPointsLog.in #playerRewardPointsLogTblPage', function () {
                vm.playerRewardPointsLog.pageObj = utilService.createPageForPagingTable("#playerRewardPointsLogTblPage", {}, $translate, function (curP, pageSize) {
                    vm.commonPageChangeHandler(curP, pageSize, "playerRewardPointsLog", vm.getPlayerRewardPointsLogData);
                });
                vm.getPlayerRewardPointsLogData(true);
            });
        };

        vm.getPlayerRewardPointsLogData = function (newSearch) {

            let sendQuery = {
                playerName: vm.selectedSinglePlayer.name,
                index: newSearch ? 0 : vm.playerRewardPointsLog.index,
                limit: newSearch ? 10 : vm.playerRewardPointsLog.limit,
                sortCol: vm.playerRewardPointsLog.sortCol || null
            };

            socketService.$socket($scope.AppSocket, 'getPlayerRewardPointsLog', sendQuery, function (data) {
                console.log("getPlayerRewardPointsLog", data);
                let tblData = data && data.data ? data.data.data : [];
                let total = data.data ? data.data.total : 0;
                vm.playerRewardPointsLog.totalCount = total;
                vm.drawPlayerRewardPointsLogTable(newSearch, tblData, total);
            });
        };

        vm.drawPlayerRewardPointsLogTable = function (newSearch, tblData, size) {
            let tableOptions = $.extend({}, vm.generalDataTableOptions, {
                data: tblData,
                aoColumnDefs: [
                    {targets: '_all', defaultContent: ' ', bSortable: false}
                ],
                columns: [
                    {title: $translate('Reward Point ID'), data: "pointLogId"},
                    {title: $translate('Proposal Creator'), data: "creator"},
                    {
                        title: $translate('Reward Points Type'), data: "category",
                        render: function (data, type, row) {
                            return $translate($scope.constRewardPointsLogCategory[row.category]);
                        }
                    },
                    {
                        title: $translate('Reward Title'), data: "rewardTitle",
                        render: function (data, type, row) {
                            return row.rewardTitle ? row.rewardTitle : "-";
                        }
                    },
                    {
                        title: $translate('userAgent'), data: "userAgent",
                        render: function (data, type, row) {
                            return $translate($scope.constPlayerRegistrationInterface[row.userAgent]);
                        }
                    },
                    {
                        title: $translate('Proposal Status'), data: "status",
                        render: function (data, type, row) {
                            return $translate($scope.constRewardPointsLogStatus[row.status]);
                        }
                    },
                    {title: $translate('Member Account'), data: "playerName"},
                    {title: $translate('beforeChangeRewardPoint'), data: "oldPoints"},
                    {title: $translate('afterChangeRewardPoint'), data: "newPoints"},
                    {title: $translate('Reward Point Variable'), data: "amount", bSortable: true},
                    {
                        title: $translate('dailyMaxRewardPoint'), data: "maxDayApplyAmount",
                        render: function (data, type, row) {
                            return row.currentDayAppliedAmount != null && row.maxDayApplyAmount ? row.currentDayAppliedAmount + "/" + row.maxDayApplyAmount : "-";
                        }
                    },
                    {
                        title: $translate('createTime'), data: "createTime", bSortable: true,
                        render: function (data, type, row) {
                            return utilService.getFormatTime(data);
                        }
                    },
                    {
                        title: $translate('playerLevelName'), data: "playerLevelName",
                        render: function (data, type, row) {
                            return $translate(row.playerLevelName);
                        }
                    },
                    {
                        title: $translate('remark'), data: "remark",
                        render: function (data, type, row) {
                            return row.remark.replace('Proposal No', $translate('Proposal No'));
                        }
                    },
                    {
                        title: $translate('detail'),
                        render: function (data, type, row) {
                            var $a = $('<a>', {
                                'ng-click': "vm.prepareShowRewardPointsLogDetail(" + JSON.stringify(row) + ")"
                            }).text($translate('detail'));
                            // $compile($a.prop('outerHTML'))($scope);
                            return $a.prop('outerHTML');
                        },
                        "fnCreatedCell": function (nTd, sData, oData, iRow, iCol) {
                            $compile(nTd)($scope)
                        }
                    },
                ],
                "paging": false,
            });
            let aTable = $("#playerRewardPointsLogTbl").DataTable(tableOptions);
            aTable.columns.adjust().draw();
            vm.playerRewardPointsLog.pageObj.init({maxCount: size}, newSearch);
            $('#playerRewardPointsLogTbl').resize();
            $('#playerRewardPointsLogTbl').off('order.dt');
            $('#playerRewardPointsLogTbl').on('order.dt', function (event, a, b) {
                vm.commonSortChangeHandler(a, 'playerRewardPointsLogTbl', vm.getPlayerRewardPointsLogData);
            });

            $scope.safeApply();
        };

        vm.startCountDown = function(targetTime){
            let timenow = new Date().getTime()
            vm.timeLeft = (targetTime.getTime() - timenow) / 1000 / 60;
            if(vm.timeLeft <= 0){
                vm.timeLeft = 0;
            }else{
                // if that's time left , start the loop
                vm.loop = $interval(vm.countMachine, 60000);
            }
        }
        vm.countMachine = function(){
            if(vm.timeLeft <= 0){
                // break the loop . if the countdown end;
                console.log('end...');
                $interval.cancel(vm.loop);
                vm.timeLeft = 0;
            }else{
                vm.timeLeft -= 1;
                console.log('countDown:', vm.timeLeft);
            }
        }
        vm.endCountDown = function(){
            $interval.cancel(vm.loop);
        }
        vm.displayAssignTopUp = function(data){
            let result = '';
            if(data && data.depositMethod == 1){
                result = '*' + $translate('ONLINE BANK NAME') + ' :' + data.inputData.netPayName || ''
            }

            if(data && data.depositMethod == 2){
                result = '*' + $translate('ATM SAVING PROVINCE') + ' :' + data.inputData.province +'\n'+
                '*' + $translate('ATM SAVING CITY') + ' :' + data.inputData.city || '';
            }

            if(data && data.depositMethod == 3){
                result = '*'+ $translate('BANK COUNTER DEPOSIT METHOD') + ' : ' + $translate(data.inputData.counterDepositTypeName) +'\n';
                if(data.inputData.counterCardOwner){
                    result += '*' + $translate('BANK COUNTER BANK CARD HOLDER') +' : ' + data.inputData.counterCardOwner +'\n';
                }
                if(data.inputData.counterTransferId){
                    result += '*' + $translate('BANK COUNTER TRANSFER NUMBER') + '*' + $translate('PLEASE INFORM BANK STAFF THIS SERIAL NUMBER, AND LET THEM FILL UP REMARK') + ': ' + data.inputData.counterTransferId || '';
                }
            }
            return result;
        }

        vm.getDepositMethod = function(data) {
            let result = {};
            data.forEach(item=>{
                result[item.depositMethod] = item.data;
            })
            return result;
        }
        vm.copyClipboard = function(el){
            $(el).select();
            document.execCommand('copy', true);
        }

        vm.initPlayerManualTopUp = function () {
            vm.getZoneList();
            vm.provinceList = [];
            vm.cityList = [];
            vm.districtList = [];
            vm.freezeZoneSelection = false;
            vm.playerManualTopUp = {submitted: false};
            vm.filterBankname("playerManualTopUp");
            vm.existingManualTopup = null;
            vm.chosenBankAcc = {};

            // socketService.$socket($scope.AppSocket, 'requestBankTypeByUserName', {playerId: vm.selectedSinglePlayer.playerId, clientType:1}, function (data) {
            //     $scope.$evalAsync(() => {
            //         if (data && data.data && data.data.data) {
            //             vm.depositMethodType = vm.getDepositMethod(data.data.data);
            //         }
            //     })
            // })

            socketService.$socket($scope.AppSocket, 'getManualTopupRequestList', {playerId: vm.selectedSinglePlayer.playerId}, function (data) {
                vm.existingManualTopup = data.data ? data.data : false;
            });

            // utilService.actionAfterLoaded('#modalPlayerManualTopUp', function () {
            //     vm.playerManualTopUp.createTime = utilService.createDatePicker('#modalPlayerManualTopUp .createTime');
            utilService.actionAfterLoaded('#modalPlayerTopUp', function () {
                vm.playerManualTopUp.createTime = utilService.createDatePicker('#modalPlayerTopUp [name="form_manual_topup"] .createTime');
                vm.playerManualTopUp.createTime.data('datetimepicker').setDate(utilService.setLocalDayStartTime(utilService.setNDaysAgo(new Date(), 0)));
            });
            vm.refreshSPicker();
        };

        // Player alipay topup
        vm.initPlayerAlipayTopUp = function () {
            vm.playerAlipayTopUp = {submitted: false};
            vm.existingAlipayTopup = null;

            socketService.$socket($scope.AppSocket, 'getAlipayTopUpRequestList', {playerId: vm.selectedSinglePlayer.playerId},
                data => {
                    vm.existingAlipayTopup = data.data ? data.data : false;
                    $scope.safeApply();
                });
            vm.alipaysAcc = '';

            // utilService.actionAfterLoaded('#modalPlayerAlipayTopUp', function () {
            //     vm.playerAlipayTopUp.createTime = utilService.createDatePicker('#modalPlayerAlipayTopUp .createTime');
            utilService.actionAfterLoaded('#modalPlayerTopUp', function () {
                vm.playerAlipayTopUp.createTime = utilService.createDatePicker('#modalPlayerTopUp [name="form_alipay_topup"] .createTime');
                vm.playerAlipayTopUp.createTime.data('datetimepicker').setDate(utilService.setLocalDayStartTime(utilService.setNDaysAgo(new Date(), 0)));
            });
            $scope.safeApply();
        };

        vm.applyPlayerAlipayTopUp = () => {
            let sendData = {
                playerId: vm.isOneSelectedPlayer().playerId,
                amount: vm.playerAlipayTopUp.amount,
                alipayName: vm.playerAlipayTopUp.alipayName,
                alipayAccount: vm.playerAlipayTopUp.alipayAccount,
                bonusCode: vm.playerAlipayTopUp.bonusCode,
                remark: vm.playerAlipayTopUp.remark,
                realName: vm.playerAlipayTopUp.realName,
                createTime: vm.playerAlipayTopUp.createTime.data('datetimepicker').getLocalDate(),
                topUpReturnCode: vm.playerAlipayTopUp.topUpReturnCode,
                orderNo: vm.playerAlipayTopUp.orderNo,
                platform: vm.selectedPlatform.id
            };
            vm.playerAlipayTopUp.submitted = true;
            $scope.safeApply();
            socketService.$socket($scope.AppSocket, 'applyAlipayTopUpRequest', sendData,
                data => {
                    vm.playerAlipayTopUp.responseMsg = $translate('SUCCESS');
                    vm.getPlatformPlayersData();
                    $scope.safeApply();
                },
                error => {
                    vm.playerAlipayTopUp.responseMsg = error.error.errorMessage;
                    // socketService.showErrorMessage(error.error.errorMessage);
                    vm.getPlatformPlayersData();
                    $scope.safeApply();
                }
            );
        };

        vm.cancelPlayerAlipayTopUp = () => {
            if (!vm.existingAlipayTopup) {
                return;
            }
            let sendQuery = {
                playerId: vm.selectedSinglePlayer.playerId,
                proposalId: vm.existingAlipayTopup.proposalId
            };
            socketService.$socket($scope.AppSocket, 'cancelAlipayTopup', sendQuery,
                data => {
                    if (vm.existingAlipayTopup.proposalId == data.data.proposalId) {
                        vm.existingAlipayTopup.isCanceled = true;
                    }
                    $scope.safeApply();
                },
                error => {
                    vm.playerAlipayTopUp.responseMsg = error.error.errorMessage;
                    $scope.safeApply();
                }
            );
        };

        // Player WechatPay TopUp
        vm.initPlayerWechatPayTopUp = function () {
            vm.playerWechatPayTopUp = {submitted: false, notUseQR: "true"};
            vm.existingWechatPayTopup = null;
            socketService.$socket($scope.AppSocket, 'getWechatPayTopUpRequestList', {playerId: vm.selectedSinglePlayer.playerId},
                data => {
                    vm.existingWechatPayTopup = data.data ? data.data : false;
                    $scope.safeApply();
                });
            vm.wechatpaysAcc = '';

            // utilService.actionAfterLoaded('#modalPlayerWechatPayTopUp', function () {
            //     vm.playerWechatPayTopUp.createTime = utilService.createDatePicker('#modalPlayerWechatPayTopUp .createTime');
            utilService.actionAfterLoaded('#modalPlayerTopUp', function () {
                vm.playerWechatPayTopUp.createTime = utilService.createDatePicker('#modalPlayerTopUp [name="form_wechatPay_topup"] .createTime');
                vm.playerWechatPayTopUp.createTime.data('datetimepicker').setDate(utilService.setLocalDayStartTime(utilService.setNDaysAgo(new Date(), 0)));
            });
            $scope.safeApply();
        };

        vm.applyPlayerWechatPayTopUp = () => {
            let sendData = {
                playerId: vm.isOneSelectedPlayer().playerId,
                amount: vm.playerWechatPayTopUp.amount,
                wechatPayName: vm.playerWechatPayTopUp.wechatPayName || " ",
                wechatPayAccount: vm.playerWechatPayTopUp.wechatPayAccount,
                bonusCode: vm.playerWechatPayTopUp.bonusCode,
                remark: vm.playerWechatPayTopUp.remark,
                createTime: vm.playerWechatPayTopUp.createTime.data('datetimepicker').getLocalDate(),
                notUseQR: !!vm.playerWechatPayTopUp.notUseQR,
                topUpReturnCode: vm.playerWechatPayTopUp.topUpReturnCode,
                orderNo: vm.playerWechatPayTopUp.orderNo,
                platform: vm.selectedPlatform.id
            };
            console.log("applyPlayerWechatPayTopUp", sendData);
            vm.playerWechatPayTopUp.submitted = true;
            $scope.safeApply();
            socketService.$socket($scope.AppSocket, 'applyWechatPayTopUpRequest', sendData,
                data => {
                    vm.playerWechatPayTopUp.responseMsg = $translate('SUCCESS');
                    vm.getPlatformPlayersData();
                    $scope.safeApply();
                },
                error => {
                    vm.playerWechatPayTopUp.responseMsg = error.error.errorMessage;
                    // socketService.showErrorMessage(error.error.errorMessage);
                    vm.getPlatformPlayersData();
                    $scope.safeApply();
                }
            );
        };

        vm.cancelPlayerWechatPayTopUp = () => {
            if (!vm.existingWechatPayTopup) {
                return;
            }
            let sendQuery = {
                playerId: vm.selectedSinglePlayer.playerId,
                proposalId: vm.existingWechatPayTopup.proposalId
            };
            socketService.$socket($scope.AppSocket, 'cancelWechatPayTopup', sendQuery,
                data => {
                    if (vm.existingWechatPayTopup.proposalId == data.data.proposalId) {
                        vm.existingWechatPayTopup.isCanceled = true;
                    }
                    $scope.safeApply();
                },
                error => {
                    vm.playerWechatPayTopUp.responseMsg = error.error.errorMessage;
                    $scope.safeApply();
                }
            );
        };

        vm.cancelPlayerManualTop = function () {
            if (!vm.existingManualTopup) {
                return;
            }
            var sendQuery = {
                playerId: vm.selectedSinglePlayer.playerId,
                proposalId: vm.existingManualTopup.proposalId
            };
            socketService.$socket($scope.AppSocket, 'cancelManualTopupRequest', sendQuery, function (data) {
                console.log(data.data);
                if (vm.existingManualTopup.proposalId == data.data.proposalId) {
                    vm.existingManualTopup.isCanceled = true;
                }
                $scope.safeApply();
            });
        }

        vm.cancelPlayerAssignTop = function () {
            if (!vm.existingAssignTopup) {
                return;
            }
            var sendQuery = {
                playerId: vm.selectedSinglePlayer.playerId,
                proposalId: vm.existingAssignTopup.proposalId
            };
            socketService.$socket($scope.AppSocket, 'cancelAssignTopupRequest', sendQuery, function (data) {
                $scope.$evalAsync(() => {
                        console.log(data.data);
                    if (vm.existingAssignTopup.proposalId == data.data.proposalId) {
                        vm.existingAssignTopup.isCanceled = true;
                    }
                });
            });
        }

        // quickpay topup
        vm.initPlayerQuickpayTopUp = function () {
            vm.playerQuickpayTopUp = {submitted: false};
            vm.existingQuickpayTopup = null;
            socketService.$socket($scope.AppSocket, 'getQuickpayTopUpRequestList', {playerId: vm.selectedSinglePlayer.playerId},
                data => {
                    vm.existingQuickpayTopup = data.data ? data.data : false;
                    $scope.safeApply();
                });
            utilService.actionAfterLoaded('#modalPlayerQuickpayTopUp', function () {
                vm.playerQuickpayTopUp.createTime = utilService.createDatePicker('#modalPlayerQuickpayTopUp .createTime');
                vm.playerQuickpayTopUp.createTime.data('datetimepicker').setDate(utilService.setLocalDayStartTime(utilService.setNDaysAgo(new Date(), 0)));
            });
            $scope.safeApply();
        };

        vm.applyPlayerQuickpayTopUp = () => {
            let sendData = {
                playerId: vm.isOneSelectedPlayer().playerId,
                amount: vm.playerQuickpayTopUp.amount,
                quickpayName: vm.playerQuickpayTopUp.quickpayName,
                quickpayAccount: vm.playerQuickpayTopUp.quickpayAccount,
                remark: vm.playerQuickpayTopUp.remark,
                createTime: vm.playerQuickpayTopUp.createTime.data('datetimepicker').getLocalDate()
            };
            vm.playerQuickpayTopUp.submitted = true;
            $scope.safeApply();
            socketService.$socket($scope.AppSocket, 'applyQuickpayTopUpRequest', sendData,
                data => {
                    vm.playerQuickpayTopUp.responseMsg = $translate('SUCCESS');
                    vm.getPlatformPlayersData();
                    $scope.safeApply();
                },
                error => {
                    vm.playerQuickpayTopUp.responseMsg = error.error.errorMessage;
                    socketService.showErrorMessage(error.error.errorMessage);
                    vm.getPlatformPlayersData();
                    $scope.safeApply();
                }
            );
        };

        vm.cancelPlayerQuickpayTopUp = () => {
            if (!vm.existingQuickpayTopup) {
                return;
            }
            let sendQuery = {
                playerId: vm.selectedSinglePlayer.playerId,
                proposalId: vm.existingQuickpayTopup.proposalId
            };
            socketService.$socket($scope.AppSocket, 'cancelQuickpayTopup', sendQuery,
                data => {
                    if (vm.existingQuickpayTopup.proposalId == data.data.proposalId) {
                        vm.existingQuickpayTopup.isCanceled = true;
                    }
                    $scope.safeApply();
                },
                error => {
                    vm.playerQuickpayTopUp.responseMsg = error.error.errorMessage;
                    $scope.safeApply();
                }
            );
        };

        vm.getZoneList = function (provinceId, cityId) {
            vm.freezeZoneSelection = true;
            $scope.safeApply();
            var sendQuery = {
                provinceId: provinceId, cityId: cityId
            }
            socketService.$socket($scope.AppSocket, 'getZoneList', sendQuery, function (data) {
                console.log(data.data);
                if (!provinceId && !cityId) {
                    vm.provinceList = data.data.data || [];
                    vm.playerManualTopUp.provinceId = vm.provinceList[0].id;
                    vm.getZoneList(vm.playerManualTopUp.provinceId);
                } else if (provinceId && !cityId) {
                    vm.cityList = data.data.data || [];
                    // vm.playerManualTopUp.cityId = vm.cityList[0].id;
                    vm.getZoneList(vm.playerManualTopUp.provinceId, vm.cityList[0].id);
                } else if (provinceId && cityId) {
                    vm.districtList = data.data.data || [];
                    vm.playerManualTopUp.districtId = '';
                }
                vm.freezeZoneSelection = false;
                $scope.safeApply();
            });
        }

        vm.prepareClearPlayerProposalLimit = function () {
            vm.clearPlayerProposalLimit = {
                resMsg: '',
                showSubmit: true
            };
        };

        vm.prepareClearPlayerState = function (isConfirm = false) {
            if (!isConfirm) {
                vm.modalYesNo = {};
                vm.modalYesNo.modalTitle = $translate("Reset player state");
                vm.modalYesNo.modalText = $translate("Are you sure");
                vm.modalYesNo.actionYes = () => vm.prepareClearPlayerState(true);
                $('#modalYesNo').modal();
            }
            else {
                $scope.$socketPromise("clearPlayerState", {playerObjId: vm.selectedSinglePlayer._id}).then(
                    () => {
                        socketService.showConfirmMessage($translate("Success"), 1000);
                    },
                    error => {
                        socketService.showErrorMessage($translate(error.error.error));
                    }
                )
            }
        }

        vm.prepareUnbindPhoneDeviceId = function (isConfirm = false) {
            if (!isConfirm) {
                vm.modalYesNo = {};
                vm.modalYesNo.modalTitle = $translate("UnbindPhoneDeviceId");
                vm.modalYesNo.modalText = $translate("Are you sure");
                vm.modalYesNo.actionYes = () => vm.prepareUnbindPhoneDeviceId(true);
                $('#modalYesNo').modal();
            }
            else {
                $scope.$socketPromise("unbindPhoneDeviceId", {playerObjId: vm.selectedSinglePlayer._id}).then(
                    () => {
                        socketService.showConfirmMessage($translate("Success"), 1000);
                    },
                    error => {
                        socketService.showErrorMessage($translate(error.error.error));
                    }
                )
            }
        }
        ///////////////////////////////// player feedback //////////////////////////////////////////

        vm.setQueryRole = (modal) => {
            vm.queryRoles = [];

            vm.queryDepartments.map(e => {
                if (modal.departments.indexOf(e._id) >= 0) {
                    vm.queryRoles = vm.queryRoles.concat(e.roles);
                }
            });
            vm.refreshSPicker();
            $scope.safeApply();
        };

        vm.setQueryAdmins = (modal) => {
            vm.queryAdmins = [];

            vm.queryRoles.map(e => {
                if (modal.roles.indexOf(e._id) >= 0) {
                    vm.queryAdmins = vm.queryAdmins.concat(e.users);
                }
            });
            vm.refreshSPicker();
            $scope.safeApply();
        };

        vm.clearFeedBackResultDataStatus = function (rowData) {
            if (rowData && rowData.playerId) {
                vm.addPlayerFeedbackResultData.message = null;
                vm.addPlayerFeedbackResultData.success = null;
                vm.addPlayerFeedbackResultData.failure = null;

                vm.deletePlayerFeedbackResultData.message = null;
                vm.deletePlayerFeedbackResultData.success = null;
                vm.deletePlayerFeedbackResultData.failure = null;
            }

            if (rowData && rowData.partnerId) {
                vm.addPartnerFeedbackResultData.message = null;
                vm.addPartnerFeedbackResultData.success = null;
                vm.addPartnerFeedbackResultData.failure = null;

                vm.deletePartnerFeedbackResultData.message = null;
                vm.deletePartnerFeedbackResultData.success = null;
                vm.deletePartnerFeedbackResultData.failure = null;
            }
        };

        vm.addFeedbackResult = function (rowData) {
            vm.clearFeedBackResultDataStatus(rowData);
            let reqData = {};

            if (rowData && rowData.playerId) {
                reqData.key = vm.addPlayerFeedbackResultData.key;
                reqData.value = vm.addPlayerFeedbackResultData.value;
                console.log(reqData);
                return $scope.$socketPromise('createPlayerFeedbackResult', reqData).then(
                    () => {
                        $scope.$evalAsync(async () => {
                            vm.addPlayerFeedbackResultData.message = "SUCCESS";
                            vm.addPlayerFeedbackResultData.success = true;
                            vm.allPlayerFeedbackResults = await commonService.getAllPlayerFeedbackResults($scope).catch(err => Promise.resolve([]));
                        })
                    },
                    function (err) {
                        console.log("vm.addPlayerFeedbackResults()ErrIn", err);
                        vm.addPlayerFeedbackResultData.message = "FAILURE";
                        vm.addPlayerFeedbackResultData.failure = true;
                        $scope.safeApply();
                    }
                );
            }

            if (rowData && rowData.partnerId) {
                reqData.key = vm.addPartnerFeedbackResultData.key;
                reqData.value = vm.addPartnerFeedbackResultData.value;
                console.log(reqData);
                return $scope.$socketPromise('createPartnerFeedbackResult', reqData).then(
                    () => {
                        $scope.$evalAsync(async () => {
                            vm.addPartnerFeedbackResultData.message = "SUCCESS";
                            vm.addPartnerFeedbackResultData.success = true;
                            vm.allPartnerFeedbackResults = await commonService.getAllPartnerFeedbackResults($scope).catch(err => Promise.resolve([]));
                        })
                    },
                    function (err) {
                        console.log("vm.addPartnerFeedbackResults()ErrIn", err);
                        vm.addPartnerFeedbackResultData.message = "FAILURE";
                        vm.addPartnerFeedbackResultData.failure = true;
                        $scope.safeApply();
                    }
                ).catch(
                    function (err) {
                        console.log("vm.addPartnerFeedbackResults()ErrOut", err);
                        vm.addPartnerFeedbackResultData.message = "FAILURE";
                        vm.addPartnerFeedbackResultData.failure = true;
                        $scope.safeApply();
                    }
                );
            }
        };

        vm.deleteFeedbackResult = function (rowData) {
            vm.clearFeedBackResultDataStatus(rowData);
            let reqData = {};

            if (rowData && rowData.playerId) {
                reqData._id = vm.deletePlayerFeedbackResultData._id;
                return $scope.$socketPromise('deletePlayerFeedbackResult', reqData).then(
                    function (data) {
                        $scope.$evalAsync(async () => {
                            vm.deletePlayerFeedbackResultData.message = "SUCCESS";
                            vm.deletePlayerFeedbackResultData.success = true;
                            vm.allPlayerFeedbackResults = await commonService.getAllPlayerFeedbackResults($scope).catch(err => Promise.resolve([]));
                        })
                    },
                    function (err) {
                        console.log("vm.addPlayerFeedbackResults()ErrIn", err);
                        vm.deletePlayerFeedbackResultData.message = "FAILURE";
                        vm.deletePlayerFeedbackResultData.failure = true;
                        $scope.safeApply();
                    }
                );
            }

            if (rowData && rowData.partnerId) {
                reqData._id = vm.deletePartnerFeedbackResultData._id;
                return $scope.$socketPromise('deletePartnerFeedbackResult', reqData).then(
                    () => {
                        $scope.$evalAsync(async () => {
                            vm.deletePartnerFeedbackResultData.message = "SUCCESS";
                            vm.deletePartnerFeedbackResultData.success = true;
                            vm.allPartnerFeedbackResults = await commonService.getAllPartnerFeedbackResults($scope).catch(err => Promise.resolve([]));
                        })
                    },
                    function (err) {
                        console.log("vm.addPartnerFeedbackResults()ErrIn", err);
                        vm.deletePartnerFeedbackResultData.message = "FAILURE";
                        vm.deletePartnerFeedbackResultData.failure = true;
                        $scope.safeApply();
                    }
                ).catch(
                    function (err) {
                        console.log("vm.addPartnerFeedbackResults()Out", err);
                        vm.deletePartnerFeedbackResultData.message = "FAILURE";
                        vm.deletePartnerFeedbackResultData.failure = true;
                        $scope.safeApply();
                    }
                );
            }
        };

        vm.clearFeedBackTopicDataStatus = function (rowData) {
            if (rowData && rowData.playerId) {
                vm.addPlayerFeedbackTopicData.message = null;
                vm.addPlayerFeedbackTopicData.success = null;
                vm.addPlayerFeedbackTopicData.failure = null;

                vm.deletePlayerFeedbackTopicData.message = null;
                vm.deletePlayerFeedbackTopicData.success = null;
                vm.deletePlayerFeedbackTopicData.failure = null;
            }

            if (rowData && rowData.partnerId) {
                vm.addPartnerFeedbackTopicData.message = null;
                vm.addPartnerFeedbackTopicData.success = null;
                vm.addPartnerFeedbackTopicData.failure = null;

                vm.deletePartnerFeedbackTopicData.message = null;
                vm.deletePartnerFeedbackTopicData.success = null;
                vm.deletePartnerFeedbackTopicData.failure = null;
            }
        };

        vm.addFeedbackTopic = function (rowData) {
            vm.clearFeedBackTopicDataStatus(rowData);
            let reqData = {};

            if (rowData && rowData.playerId) {
                reqData.key = vm.addPlayerFeedbackTopicData.value;
                reqData.value = vm.addPlayerFeedbackTopicData.value;
                reqData.platform = vm.selectedPlatform.id;
                console.log(reqData);
                return $scope.$socketPromise('createPlayerFeedbackTopic', reqData).then(
                    () => $scope.$evalAsync(async () => {
                        vm.addPlayerFeedbackTopicData.message = "SUCCESS";
                        vm.addPlayerFeedbackTopicData.success = true;
                        vm.playerFeedbackTopic = await commonService.getPlayerFeedbackTopic($scope, vm.selectedPlatform.id).catch(err => Promise.resolve([]));
                    }),
                    function (err) {
                        console.log("vm.addPlayerFeedbackTopics()ErrIn", err);
                        vm.addPlayerFeedbackTopicData.message = "FAILURE";
                        vm.addPlayerFeedbackTopicData.failure = true;
                        if(err.error && err.error.error && err.error.error.code == '11000'){
                            vm.addPlayerFeedbackTopicData.message = '失败，回访主题已存在'
                        }
                        $scope.safeApply();
                    }
                );
            }

            if (rowData && rowData.partnerId) {
                reqData.key = vm.addPartnerFeedbackTopicData.value;
                reqData.value = vm.addPartnerFeedbackTopicData.value;
                reqData.platform = vm.selectedPlatform.id;
                console.log(reqData);
                return $scope.$socketPromise('createPartnerFeedbackTopic', reqData).then(
                    () => $scope.$evalAsync(async () => {
                        vm.addPartnerFeedbackTopicData.message = "SUCCESS";
                        vm.addPartnerFeedbackTopicData.success = true;
                        vm.partnerFeedbackTopic = await commonService.getPartnerFeedbackTopic($scope, vm.selectedPlatform.id).catch(err => Promise.resolve([]));
                    }),
                    function (err) {
                        console.log("vm.addPartnerFeedbackTopics()ErrIn", err);
                        vm.addPartnerFeedbackTopicData.message = "FAILURE";
                        vm.addPartnerFeedbackTopicData.failure = true;
                        if(err.error && err.error.error && err.error.error.code == '11000'){
                            vm.addPartnerFeedbackTopicData.message = '失败，回访主题已存在'
                        }
                        $scope.safeApply();
                    }
                ).catch(
                    function (err) {
                        console.log("vm.addPartnerFeedbackTopics()ErrOut", err);
                        vm.addPartnerFeedbackTopicData.message = "FAILURE";
                        vm.addPartnerFeedbackTopicData.failure = true;
                        $scope.safeApply();
                    }
                );
            }
        };

        vm.deleteFeedbackTopic = function (rowData) {
            vm.clearFeedBackTopicDataStatus(rowData);
            let reqData = {};

            if (rowData && rowData.playerId) {
                reqData._id = vm.deletePlayerFeedbackTopicData._id;
                return $scope.$socketPromise('deletePlayerFeedbackTopic', reqData).then(
                    () => $scope.$evalAsync(async () => {
                        vm.deletePlayerFeedbackTopicData.message = "SUCCESS";
                        vm.deletePlayerFeedbackTopicData.success = true;
                        vm.playerFeedbackTopic = await commonService.getPlayerFeedbackTopic($scope, vm.selectedPlatform.id).catch(err => Promise.resolve([]));
                    }),
                    function (err) {
                        console.log("vm.addPlayerFeedbackTopics()ErrIn", err);
                        vm.deletePlayerFeedbackTopicData.message = "FAILURE";
                        vm.deletePlayerFeedbackTopicData.failure = true;
                        $scope.safeApply();
                    }
                );
            }

            if (rowData && rowData.partnerId) {
                reqData._id = vm.deletePartnerFeedbackTopicData._id;
                return $scope.$socketPromise('deletePartnerFeedbackTopic', reqData).then(
                    () => $scope.$evalAsync(async () => {
                        vm.deletePartnerFeedbackTopicData.message = "SUCCESS";
                        vm.deletePartnerFeedbackTopicData.success = true;
                        vm.partnerFeedbackTopic = await commonService.getPartnerFeedbackTopic($scope, vm.selectedPlatform.id).catch(err => Promise.resolve([]));
                    }),
                    function (err) {
                        console.log("vm.addPartnerFeedbackTopics()ErrIn", err);
                        vm.deletePartnerFeedbackTopicData.message = "FAILURE";
                        vm.deletePartnerFeedbackTopicData.failure = true;
                        $scope.safeApply();
                    }
                ).catch(
                    function (err) {
                        console.log("vm.addPartnerFeedbackTopics()Out", err);
                        vm.deletePartnerFeedbackTopicData.message = "FAILURE";
                        vm.deletePartnerFeedbackTopicData.failure = true;
                        $scope.safeApply();
                    }
                );
            }
        };
        ///////////////////////////////// player feedback //////////////////////////////////////////

        ////////////////////////////////////////////////////////////////////////////////////Mark::partner functions//////////////////

        vm.duplicatePhoneNumberDetector = function (newSearch, isPlayer) {
            let phoneNum = '';
            if (isPlayer) {
                if (!vm.newPlayer.phoneNumber) {
                    return;
                } else {
                    phoneNum = vm.newPlayer.phoneNumber;
                }
            } else {
                if (!vm.newPartner.phoneNumber) {
                    return;
                } else {
                    phoneNum = vm.newPartner.phoneNumber;
                }
            }

            let sendData = {
                platformId: vm.selectedPlatform.id,
                phoneNumber: phoneNum,
                limit: newSearch ? 10 : (vm.duplicatePhoneNumber.limit || 10),
                index: newSearch ? 0 : (vm.duplicatePhoneNumber.index || 0),
                isPlayer: isPlayer
            }

            socketService.$socket($scope.AppSocket, 'getDuplicatePhoneNumber', sendData, function (data) {
                let duplicatePhoneNumberCount = data.data.size || 0;

                if (duplicatePhoneNumberCount == 0) {
                    vm.existPhone = false;
                } else {
                    vm.existPhone = true;
                }

                $scope.safeApply();

            });
        };

        vm.initPhoneNumberRecord = function () {
            vm.duplicatePhoneNumber = {};
            utilService.actionAfterLoaded('#duplicatePhoneNumberLog.in #duplicatePhoneNumberLogTablePage', function () {
                vm.duplicatePhoneNumber.pageObj = utilService.createPageForPagingTable("#duplicatePhoneNumberLogTablePage", {}, $translate, function (curP, pageSize) {
                    vm.commonPageChangeHandler(curP, pageSize, "duplicatePhoneNumber", vm.loadPhoneNumberRecord);
                });

                let isPlayer = true;
                if (vm.newPlayer && vm.newPlayer.createPartner) {
                    isPlayer = false;
                }
                vm.loadPhoneNumberRecord(true, isPlayer);
            });
        }

        vm.loadPhoneNumberRecord = function (newSearch, isPlayer) {
            let phoneNum = '';

            if (isPlayer) {
                if (!vm.newPlayer.phoneNumber) {
                    return;
                } else {
                    phoneNum = vm.newPlayer.phoneNumber;
                }
            } else {
                if (!vm.newPartner.phoneNumber) {
                    return;
                } else {
                    phoneNum = vm.newPartner.phoneNumber;
                }
            }

            vm.getCredibilityRemarks();

            let sendData = {
                platformId: vm.selectedPlatform.id,
                phoneNumber: phoneNum,
                limit: newSearch ? 10 : (vm.duplicatePhoneNumber.limit || 10),
                index: newSearch ? 0 : (vm.duplicatePhoneNumber.index || 0),
                sortCol: vm.duplicatePhoneNumber.sortCol || null,
                isPlayer: isPlayer
            }

            socketService.$socket($scope.AppSocket, 'getDuplicatePhoneNumber', sendData, function (data) {
                console.log("getDuplicatePhoneNumber", data);
                let tblData = data && data.data ? data.data.data : [];
                let total = data.data ? data.data.size : 0;
                vm.duplicatePhoneNumber.totalCount = total;

                if (tblData && tblData.length > 0) {
                    tblData.map(
                        record => {
                            let credibilityRemarksTXT = '';
                            record.name = record.data.name ? record.data.name : "";
                            record.realName = record.data.realName ? record.data.realName : "";
                            record.lastLoginIp = record.lastLoginIp ? record.lastLoginIp : "";
                            record.combinedArea = (record.data.phoneProvince && record.data.phoneCity) ? record.data.phoneProvince + " " + record.data.phoneCity : "";
                            record.registrationTime = record.data.registrationTime ? vm.dateReformat(record.data.registrationTime) : "";
                            record.playerLevelName = record.data.playerLevel ? $translate(record.data.playerLevel.name) : "";
                            record.credibilityRemarks = record.data.credibilityRemarks ? vm.credibilityRemarks.filter(item => {
                                return record.data.credibilityRemarks.includes(item._id);
                            }) : [];
                            record.credibilityRemarksName = record.credibilityRemarks.map(function (value, index) {
                                let colon = '';
                                credibilityRemarksTXT += value.name + colon;
                                return credibilityRemarksTXT;
                            }) || '';
                            record.valueScore = record.data.valueScore ? record.data.valueScore : "";
                            record.ipAreaName = record.data.ipArea ? vm.getIpAreaName(record.data.ipArea) : '';
                            record.lastAccessTime = record.data.lastAccessTime ? vm.dateReformat(record.data.lastAccessTime) : "";
                            Object.keys(vm.allPlayersStatusString).filter(item => {
                                return record.data.playerStatus == vm.allPlayersStatusString[item];
                            })[0];
                            record.playerStatusName = $translate("Enable");
                            if (record.data.forbidPlayerFromLogin == true) {
                                record.playerStatusName = $translate("Disable")
                            }
                            return record;
                        }
                    );
                }
                vm.prepareDuplicatePhoneNumberRecords(newSearch, tblData, total, isPlayer);
            });
        };

        vm.prepareDuplicatePhoneNumberRecords = function (newSearch, tblData, size, isPlayer) {
            let columns = [];
            if (isPlayer) {
                columns = [
                    {title: $translate('PLAYERNAME'), data: "name"},
                    {title: $translate('Real Name'), data: "realName"},
                    {title: $translate('CREDIBILITY'), data: "credibilityRemarksName"},
                    {title: $translate('PLAYER_VALUE'), data: "valueScore"},
                    {
                        title: $translate('STATUS'), data: "playerStatusName",
                        render: function (data, type, row) {
                            let color = "black";
                            if (row.data.forbidPlayerFromLogin == true) {
                                color = "red";
                            }
                            return '<div style="color:' + color + '">' + data + '</div>';
                        }
                    },
                    {title: $translate('PlayerLevel'), data: "playerLevelName"},
                    {title: $translate('REGISTERED_IP'), data: "ipAreaName"},
                    {title: $translate('PHONE_LOCATION'), data: "combinedArea"},
                    {title: $translate('REGISTERED_TIME'), data: "registrationTime"},
                    {title: $translate('last_access_time'), data: "lastAccessTime"}
                ]
            } else {
                columns = [
                    {title: $translate('PARTNER_NAME'), data: "name"},
                    {title: $translate('Real Name'), data: "realName"},
                    {title: $translate('CREDIBILITY'), data: "credibilityRemarksName"},
                    {
                        title: $translate('STATUS'), data: "playerStatusName",
                        render: function (data, type, row) {
                            let color = "black";
                            if (row.data.forbidPlayerFromLogin == true) {
                                color = "red";
                            }
                            return '<div style="color:' + color + '">' + data + '</div>';
                        }
                    },
                    {title: $translate('REGISTERED_IP'), data: "ipAreaName"},
                    {title: $translate('PHONE_LOCATION'), data: "combinedArea"},
                    {title: $translate('REGISTERED_TIME'), data: "registrationTime"},
                    {title: $translate('last_access_time'), data: "lastAccessTime"}
                ]
            }

            let tableOptions = $.extend({}, vm.generalDataTableOptions, {
                data: tblData,
                aoColumnDefs: [
                    {'sortCol': 'status', bSortable: true, 'aTargets': [1]},
                    {'sortCol': 'data.name', bSortable: true, 'aTargets': [3]},
                    {'sortCol': 'data.realName', bSortable: true, 'aTargets': [4]},
                    {'sortCol': 'lastLoginIp', bSortable: true, 'aTargets': [5]},
                    {'sortCol': 'createTime', bSortable: true, 'aTargets': [6]},
                    {'sortCol': 'data.phoneNumber', bSortable: true, 'aTargets': [7]},
                ],
                columns: columns,
                destroy: true,
                paging: false,
                autoWidth: true,
            });
            let aTable = $("#duplicatePhoneNumberLogTable").DataTable(tableOptions);
            aTable.columns.adjust().draw();
            vm.duplicatePhoneNumber.pageObj.init({maxCount: size}, newSearch);
            $('#duplicatePhoneNumberLogTable').resize();
            $('#duplicatePhoneNumberLogTable').off('order.dt');
            $scope.safeApply();
        };

        vm.getGenderFromBool = function (genderBool) {
            if (genderBool === true) {
                return "Male";
            }
            else if (genderBool === false) {
                return "Female";
            }
            else {
                return "";
            }
        }

        vm.convertDOBFormat = function (DOBDate) {
            // conversion to new Date() from ISOString date format by using toLocaleString() will have delay after year 1982
            // the delay will result wrong displaying date
            // solution to this: generat the string format from new Date() by using basic functions (getFullYear(), geMonth(), getDate())
            if (DOBDate) {

                let displayedDOB = new Date(DOBDate);
                var y = displayedDOB.getFullYear();
                var m = displayedDOB.getMonth() + 1;
                if (m < 10) {
                    m = '0' + m;
                }

                var d = displayedDOB.getDate();
                if (d < 10) {
                    d = '0' + d;
                }

                return y + "-" + m + "-" + d
                // return utilService.getFormatTime(DOBDate).slice(0, 10);
            }

        }

        vm.getPlayerInfo = function (query) {
            var myQuery = {
                _id: query._id,
                playerId: query.playerId
            }
            socketService.$socket($scope.AppSocket, 'getPlayerInfo', myQuery, function (data) {
                console.log('playerData', data);
                vm.playerDetail = vm.playerDetail || {};
                vm.playerDetail[data.data._id] = data.data;
                vm.playerDetail[data.data.playerId] = data.data;
                $scope.safeApply();
            });
        }

        vm.preLinkedPlayertoPartner = function () {
            vm.linkPlayerText = '';
            vm.linkPlayerTextChange();
        }
        vm.linkPlayerTextChange = function () {
            var myQuery = {
                platform: vm.selectedPlatform.id,
                name: vm.linkPlayerText
            }
            if (!vm.linkPlayerText) {
                vm.linkPlayerFound = false;
                vm.linkPlayerStatement = $translate("Cannot find player");
                $("i.linkPlayerTextFalse").show();
                $("i.linkPlayerTextTrue").hide();
                return;
            }
            socketService.$socket($scope.AppSocket, 'getPlayerInfo', myQuery, function (data) {
                if (data.data) {
                    var valid = true;
                    vm.linkPlayerStatement = '';
                    if (vm.selectedSinglePartner && vm.selectedSinglePartner.player == data.data._id) {
                        valid = false; //linkplayer cannot be the binded player
                        vm.linkPlayerStatement = $translate("This player is already binded.");
                    } else if (data.data && data.data.partner) {
                        valid = false; //this player already had a partner
                        vm.linkPlayerStatement = $translate("This player is already linked.");
                    }
                    vm.linkPlayerFound = valid;
                    vm.linkPlayerData = valid ? data.data : null;
                } else {
                    vm.linkPlayerFound = false;
                    vm.linkPlayerStatement = $translate("Cannot find player");
                }
                if (vm.linkPlayerFound) {
                    $("i.linkPlayerTextFalse").hide();
                    $("i.linkPlayerTextTrue").show();
                } else {
                    $("i.linkPlayerTextFalse").show();
                    $("i.linkPlayerTextTrue").hide();
                }
                $scope.safeApply();
            });
        }
        vm.submitLinkPlayer = function () {
            var sendQuery = {};
            socketService.$socket($scope.AppSocket, 'createUpdatePlayerInfoProposal', {
                creator: {type: "admin", name: authService.adminName, id: authService.adminId},
                data: {
                    _id: vm.linkPlayerData._id,
                    partner: vm.selectedSinglePartner._id,
                    partnerName: vm.selectedSinglePartner.partnerName
                },
                platformId: vm.selectedPlatform.id
            }, function (data) {
                if (data.data && data.data.stepInfo) {
                    socketService.showProposalStepInfo(data.data.stepInfo, $translate);
                }
                vm.getPlatformPartnersData();
            }, null, true);
        }

        vm.submitResetPartnerPassword = function () {
            socketService.$socket($scope.AppSocket, 'resetPartnerPassword', {_id: vm.selectedSinglePartner._id}, function (data) {
                console.log('password', data);
                vm.partnerNewPassword = data.data;
                $scope.safeApply();
            });
        }
        vm.preShowReferralPlayer = function (data) {
            vm.selectedSinglePartner = data;
            $('#totalReferralModal').modal('show');
            vm.totalReferralPlayer = {totalCount: 0, index: 0, limit: 10}
            utilService.actionAfterLoaded('#totalReferralModal.in #totalReferralPlayersTablePage', function () {
                vm.totalReferralPlayer.regStart = utilService.createDatePicker('#totalReferralModal.in .regStartTime');
                vm.totalReferralPlayer.regEnd = utilService.createDatePicker('#totalReferralModal.in .regEndTime');
                vm.totalReferralPlayer.loginStart = utilService.createDatePicker('#totalReferralModal.in .loginStartTime');
                vm.totalReferralPlayer.loginEnd = utilService.createDatePicker('#totalReferralModal.in .loginEndTime');

                utilService.clearDatePickerDate(vm.totalReferralPlayer.regStart);
                utilService.clearDatePickerDate(vm.totalReferralPlayer.regEnd);
                utilService.clearDatePickerDate(vm.totalReferralPlayer.loginStart);
                utilService.clearDatePickerDate(vm.totalReferralPlayer.loginEnd);

                vm.totalReferralPlayer.pageObj = utilService.createPageForPagingTable("#totalReferralPlayersTablePage", {}, $translate, function (curP, pageSize) {
                    vm.commonPageChangeHandler(curP, pageSize, "totalReferralPlayer", vm.getPagePartnerReferralPlayers)
                });
                vm.getPagePartnerReferralPlayers(true)
            })
        }
        vm.getPagePartnerReferralPlayers = function (newSearch) {
            var sendQuery = {
                query: {
                    partnerObjId: vm.selectedSinglePartner._id,
                    name: vm.totalReferralPlayer.playerName,
                    regStart: $(vm.totalReferralPlayer.regStart).data('datetimepicker').getLocalDate(),
                    regEnd: $(vm.totalReferralPlayer.regEnd).data('datetimepicker').getLocalDate(),
                    loginStart: $(vm.totalReferralPlayer.loginStart).data('datetimepicker').getLocalDate(),
                    loginEnd: $(vm.totalReferralPlayer.loginEnd).data('datetimepicker').getLocalDate(),
                    minTopupTimes: vm.totalReferralPlayer.minTopupTimes,
                    maxTopupTimes: vm.totalReferralPlayer.maxTopupTimes,
                    domain: vm.totalReferralPlayer.domain
                },
                index: newSearch ? 0 : vm.totalReferralPlayer.index,
                limit: newSearch ? 10 : vm.totalReferralPlayer.limit,
                sortCol: vm.totalReferralPlayer.sortCol || null
            }
            if (vm.totalReferralPlayer.playerName != null) {
                sendQuery.query.name = vm.totalReferralPlayer.playerName;
            }
            socketService.$socket($scope.AppSocket, 'getPagePartnerReferralPlayers', sendQuery, function (data) {
                console.log('tableData', data);
                var tableData = data.data.data ? data.data.data.map(item => {
                    item.$lastAccessTime = utilService.getFormatTime(item.lastAccessTime);
                    item.$registrationTime = utilService.getFormatTime(item.registrationTime);
                    return item;
                }) : [];
                vm.totalReferralPlayer.totalCount = data.data.size;
                vm.drawTotalReferralPlayerTable(newSearch, tableData, data.data.size)
            })
        }
        vm.drawTotalReferralPlayerTable = function (newSearch, tableData, size) {
            var option = $.extend({}, vm.generalDataTableOptions, {
                data: tableData.map(item => {
                    item.consumptionSum$ = item.consumptionSum.toFixed(2);
                    item.validCredit$ = item.validCredit.toFixed(2);
                    return item;
                }),
                order: vm.totalReferralPlayer.aaSorting || [[0, 'desc']],
                columnDefs: [
                    {'sortCol': 'registrationTime', bSortable: true, 'aTargets': [2]},
                    {'sortCol': 'lastAccessTime', bSortable: true, 'aTargets': [3]},
                    {'sortCol': 'consumptionSum', bSortable: true, 'aTargets': [4]},
                    {'sortCol': 'topUpSum', bSortable: true, 'aTargets': [5]},
                    {'sortCol': 'topUpTimes', bSortable: true, 'aTargets': [6]},
                    {'sortCol': 'validCredit', bSortable: true, 'aTargets': [7]},
                    {targets: '_all', defaultContent: ' ', bSortable: false}
                ],
                columns: [
                    {'title': $translate('NAME'), data: 'name', sClass: "name"},
                    {'title': $translate('REAL_NAME'), data: 'realName', sClass: "realName"},
                    {'title': $translate('registrationTime'), data: '$registrationTime', sClass: "tbodyNoWrap"},
                    {'title': $translate('lastAccessTime'), data: '$lastAccessTime'},
                    {'title': $translate('CONSUMPTION'), data: 'consumptionSum$'},
                    {'title': $translate('TOP_UP_SUM'), data: 'topUpSum', sClass: "topUpSum"},
                    {'title': $translate('TOP_UP_TIMES'), data: 'topUpTimes', sClass: "topUpTimes"},
                    {'title': $translate('VALID_CREDIT'), data: 'validCredit$', sClass: "tbodyNoWrap"},
                    {'title': $translate('Domain Name'), data: 'domain', sClass: "tbodyNoWrap"},
                    // {'title': $translate('STATUS'), data: 'status', sClass: "tbodyNoWrap"},
                    // {'title': $translate('TRUST_LEVEL'), data: 'trustLevel'}
                ],
                paging: false,
            });
            var a = utilService.createDatatableWithFooter('#totalReferralPlayersTable', option, {});
            vm.totalReferralPlayer.pageObj.init({maxCount: size}, newSearch);

            $('#totalReferralPlayersTable').off('order.dt');
            $('#totalReferralPlayersTable').on('order.dt', function (event, a, b) {
                vm.commonSortChangeHandler(a, 'totalReferralPlayer', vm.getPagePartnerReferralPlayers);
            });
            $("#totalReferralPlayersTable").resize();
            $scope.safeApply();
        }
        vm.getPartnerReferralPlayers = function (src, callback) {
            console.log('src', {partnerObjId: src._id});
            socketService.$socket($scope.AppSocket, 'getPartnerReferralPlayers', {partnerObjId: src._id}, function (data) {
                console.log('referral', data);
                vm.referralPartner = data.data;
                $scope.safeApply();
                if (callback) {
                    callback();
                }
            });
        }
        vm.getPartnerActivePlayers = function (src, callback) {
            console.log('src', {partnerObjId: src._id});
            socketService.$socket($scope.AppSocket, 'getPartnerActivePlayers', {
                platformObjId: vm.selectedPlatform.id,
                partnerObjId: src._id
            }, function (data) {
                console.log('active', data);
                vm.referralPartner = data.data;
                $scope.safeApply();
                if (callback) {
                    callback();
                }
            });
        }
        vm.getPartnerValidPlayers = function (src, callback) {
            console.log('src', {partnerObjId: src._id});
            socketService.$socket($scope.AppSocket, 'getPartnerValidPlayers', {
                platformObjId: vm.selectedPlatform.id,
                partnerObjId: src._id
            }, function (data) {
                console.log('valid', data);
                vm.referralPartner = data.data;
                $scope.safeApply();
                if (callback) {
                    callback();
                }
            });
        }
        vm.updatePartnerBank = function () {
            console.log('before after', vm.selectedSinglePartner, vm.partnerBank);
            var result = socketService.$compareObj(vm.selectedSinglePartner, vm.partnerBank);

            var sendData = {
                creator: {type: "admin", name: authService.adminName, id: authService.adminId},
                platformId: vm.selectedPlatform.id,
                data: {
                    partnerName: vm.selectedSinglePartner.partnerName,
                    curData: result.before,
                    updateData: result.after
                }
            }
            console.log('sendData', sendData);

            socketService.$socket($scope.AppSocket, 'createUpdatePartnerBankInfoProposal', sendData, function (data) {
                console.log('valid', data);
                if (data.data && data.data.stepInfo) {
                    socketService.showProposalStepInfo(data.data.stepInfo, $translate);
                }
                vm.getPlatformPartnersData();
                $scope.safeApply();
            });
        };

        // Partner apply bonus
        vm.initPartnerBonus = function () {
            vm.partnerBonus = {
                resMsg: '',
                showSubmit: true,
                notSent: true,
                bonusId: 1
            };
        };

        vm.prepareShowPartnerCreditAdjustment = function (type) {
            vm.partnerCreditChange = {
                finalValidAmount: vm.isOneSelectedPartner().credits,
                finalLockedAmount: null,
                remark: '',
                updateAmount: 0
            };

            if (type == "adjust") {
                vm.partnerCreditChange.socketStr = "createUpdatePartnerCreditProposal";
                vm.partnerCreditChange.modaltitle = "CREDIT_ADJUSTMENT";
            }
        }

        vm.updatePartnerCredit = function () {
            var sendData = {
                platformId: vm.selectedPlatform.id,
                creator: {type: "admin", name: authService.adminName, id: authService.adminId},
                isPartner: true,
                data: {
                    partnerObjId: vm.isOneSelectedPartner()._id,
                    partnerName: vm.isOneSelectedPartner().partnerName,
                    updateAmount: vm.partnerCreditChange.updateAmount,
                    curAmount: vm.isOneSelectedPartner().credits,
                    realName: vm.isOneSelectedPartner().realName,
                    remark: vm.partnerCreditChange.remark,
                    adminName: authService.adminName
                }
            }

            socketService.$socket($scope.AppSocket, vm.partnerCreditChange.socketStr, sendData, function (data) {
                var newData = data.data;
                if (data.data && data.data.stepInfo) {
                    socketService.showProposalStepInfo(data.data.stepInfo, $translate);
                }
                vm.getPlatformPartnersData();
                $scope.safeApply();
            });
        };

        vm.applyPartnerBonus = function () {
            let sendData = {
                partnerId: vm.selectedSinglePartner.partnerId,
                amount: vm.partnerBonus.amount,
                bonusId: vm.partnerBonus.bonusId,
                honoreeDetail: vm.partnerBonus.honoreeDetail,
                bForce: vm.partnerBonus.bForce
            };
            vm.partnerBonus.resMsg = '';
            vm.partnerBonus.showSubmit = true;
            socketService.$socket($scope.AppSocket, 'applyPartnerBonusRequest', sendData, function (data) {
                vm.partnerBonus.resMsg = $translate('Approved');
                vm.partnerBonus.showSubmit = false;
                vm.getPlatformPartnersData();
                $scope.safeApply();
            }, function (data) {
                vm.partnerBonus.showSubmit = false;
                if (data.error.errorMessage) {
                    vm.partnerBonus.resMsg = data.error.errorMessage;
                    socketService.showErrorMessage(data.error.errorMessage);
                    $scope.safeApply();
                }
                $scope.safeApply();
            });
        };
        /////////////////////////////////////// bank card start  /////////////////////////////////////////////////

        vm.loadBankCardGroupData = function () {
            //init gametab start===============================
            vm.showBankCate = "include";
            vm.curGame = null;
            //init gameTab end==================================
            if (!vm.selectedPlatform) {
                return
            }

            return $scope.$socketPromise("getPlatformBankCardGroup", {platform: vm.selectedPlatform.id}).then(
                data => {
                    //$scope.$evalAsync(() => {
                        vm.platformBankCardGroupList = data.data;
                        vm.platformBankCardGroupListCheck = {};
                        $.each(vm.platformBankCardGroupList, function (i, v) {
                            vm.platformBankCardGroupListCheck[v._id] = v.displayName ? v.displayName : true;
                        })
                    //})
                },
                error => {
                    console.log(error)
                }
            )
        }

        vm.pickBankCardAcc = function (bankcard) {
            if (bankcard && bankcard.accountNumber) {
                vm.playerManualTopUp.groupBankcardList = [bankcard.accountNumber];
                vm.playerManualTopUp.bankTypeId = bankcard.bankTypeId;
                vm.playerManualTopUp.lastBankcardNo = bankcard['accountNumber'].substr(bankcard['accountNumber'].length - 6);
            };
        }
        vm.getBankCardMaxAmount = function (bankAcc) {
            vm.playerAssignTopUp.maxDepositAmount = vm.pickBankAcc.maxDepositAmount;
            vm.playerAssignTopUp.bankTypeId = vm.pickBankAcc.bankTypeId;

        }
        vm.playerAssignPlayerId = function (counterDepositType){
            if(counterDepositType==2){
                vm.playerAssignTopUp.counterTransferId = vm.selectedSinglePlayer.playerId
            }
        }
        /////////////////////////////////////// bank card end  /////////////////////////////////////////////////

        /////////////////////////////////////// Merchant Group start  /////////////////////////////////////////////////
        vm.loadMerchantGroupData = function () {
            //init gametab start===============================
            vm.showMerchantCate = "include";
            vm.curGame = null;
            //init gameTab end==================================
            if (!vm.selectedPlatform) {
                return
            }

            return $scope.$socketPromise("getPlatformMerchantGroup", {platform: vm.selectedPlatform.id}).then(
                data => {
                    //$scope.$evalAsync(() => {
                        vm.platformMerchantGroupList = data.data;
                        vm.platformMerchantGroupListCheck = {};
                        $.each(vm.platformMerchantGroupList, function (i, v) {
                            vm.platformMerchantGroupListCheck[v._id] = v.displayName ? v.displayName : true;
                        })
                    //})
                }
            )
        };

        /////////////////////////////////////// Merchant Group end  /////////////////////////////////////////////////

        /////////////////////////////////////// Alipay Group start  /////////////////////////////////////////////////

        vm.loadAlipayGroupData = function () {
            //init gametab start===============================
            vm.showAlipayCate = "include";
            vm.curGame = null;
            //init gameTab end==================================
            if (!vm.selectedPlatform) {
                return
            }
            console.log("getAlipays", vm.selectedPlatform.id);
            return $scope.$socketPromise("getPlatformAlipayGroup", {platform: vm.selectedPlatform.id}).then(
                data => {
                    $scope.$evalAsync(() => {
                        console.log('Alipaygroup', data);
                        //provider list init
                        vm.platformAlipayGroupList = data.data;
                        vm.platformAlipayGroupListCheck = {};
                        $.each(vm.platformAlipayGroupList, function (i, v) {
                            vm.platformAlipayGroupListCheck[v._id] = v.displayName ? v.displayName : true;
                        })
                    })
                }
            )
        }

        vm.pickAlipayAcc = function () {
            vm.playerAlipayTopUp.alipayName = '';
            vm.playerAlipayTopUp.alipayAccount = '';
            if (vm.alipaysAcc != '') {
                var alipayAcc = vm.alipaysAcc;
                vm.playerAlipayTopUp.alipayName = alipayAcc['name'];
                vm.playerAlipayTopUp.alipayAccount = alipayAcc['accountNumber'];
            }

        }

        /////////////////////////////////////// Alipay Group end  /////////////////////////////////////////////////

        /////////////////////////////////////// QuickPay Group start  /////////////////////////////////////////////////

        vm.loadQuickPayGroupData = function () {
            //init gametab start===============================
            vm.showQuickPayCate = "include";
            vm.curGame = null;
            //init gameTab end==================================
            if (!vm.selectedPlatform) {
                return
            }
            console.log("getQuickPay", vm.selectedPlatform.id);
            //todo::no need quick pay for now
            // socketService.$socket($scope.AppSocket, 'getPlatformQuickPayGroup', {platform: vm.selectedPlatform.id}, function (data) {
            //     console.log('QuickPayGroup', data);
            //     //provider list init
            //     vm.platformQuickPayGroupList = data.data;
            //     vm.platformQuickPayGroupListCheck = {};
            //     $.each(vm.platformQuickPayGroupList, function (i, v) {
            //         vm.platformQuickPayGroupListCheck[v._id] = true;
            //     })
            //     $scope.safeApply();
            // })
        }

        /////////////////////////////////////// QuickPay Group end  /////////////////////////////////////////////////

        /////////////////////////////////////// WechatPay Group start  /////////////////////////////////////////////////
        vm.loadWechatPayGroupData = function () {
            //init gametab start===============================
            vm.showWechatPayCate = "include";
            vm.curGame = null;
            //init gameTab end==================================
            if (!vm.selectedPlatform) {
                return
            }
            return $scope.$socketPromise("getPlatformWechatPayGroup", {platform: vm.selectedPlatform.id}).then(
                data => {
                    $scope.$evalAsync(() => {
                        //provider list init
                        vm.platformWechatPayGroupList = data.data;
                        vm.platformWechatPayGroupListCheck = {};
                        $.each(vm.platformWechatPayGroupList, function (i, v) {
                            vm.platformWechatPayGroupListCheck[v._id] = v.displayName ? v.displayName : true;
                        });
                    })
                }
            )
        };

        vm.pickWechatPayAcc = function () {
            vm.playerWechatPayTopUp.wechatPayName = '';
            vm.playerWechatPayTopUp.wechatPayAccount = '';
            if (vm.wechatpaysAcc != '') {
                var wechatpayAcc = vm.wechatpaysAcc;
                vm.playerWechatPayTopUp.wechatPayName = wechatpayAcc['name'];
                vm.playerWechatPayTopUp.wechatPayAccount = wechatpayAcc['accountNumber'];
            }
            $scope.safeApply();
        };

        /////////////////////////////////////// Alipay Group end  /////////////////////////////////////////////////

        // platform-reward start =============================================================================

        vm.initRewardValidTimeDOM = function (date1, date2) {
            utilService.actionAfterLoaded("#rewardValidEndTime", function () {
                function checkValidTime() {
                    var time1 = new Date(vm.showReward.validStartTime).getTime();
                    var time2 = new Date(vm.showReward.validEndTime).getTime();
                    var text = time2 > time1 ? '' : $translate('RewardEndTimeStartTIme');
                    $('#rewardEndTimeValid').text(text);
                }

                let dateTimeRegex = /\d{4}\/\d{2}\/\d{2}\ \d{2}\:\d{2}\:\d{2}/g;
                utilService.createDatePicker("#rewardValidStartTime", {
                    language: 'en',
                    format: 'yyyy/MM/dd hh:mm:ss'
                });
                utilService.createDatePicker("#rewardValidEndTime", {
                    language: 'en',
                    format: 'yyyy/MM/dd hh:mm:ss'
                });
                if (date1) {
                    $("#rewardValidStartTime").data('datetimepicker').setLocalDate(new Date(date1));
                }
                if (date2) {
                    $("#rewardValidEndTime").data('datetimepicker').setLocalDate(new Date(date2));
                }
                $("#rewardValidStartTime").off('changeDate change keyup');
                $("#rewardValidEndTime").off('changeDate change keyup');
                $("#rewardValidStartTime").on('changeDate change keyup', function (data) {
                    if (vm.showReward) {
                        let inputFieldValue = $("#rewardValidStartTime > div > input").val();
                        if (dateTimeRegex.test(inputFieldValue)) {
                            $("#rewardValidStartTime").datetimepicker('update');
                        } else {
                            if (inputFieldValue == '') {
                                $("#rewardValidStartTime").datetimepicker('setDate', null);
                            }
                        }
                        vm.showReward.validStartTime = $("#rewardValidStartTime").data('datetimepicker').getLocalDate();
                        checkValidTime();
                    }
                });
                $("#rewardValidEndTime").on('changeDate change keyup', function (data) {
                    if (vm.showReward) {
                        let inputFieldValue = $("#rewardValidEndTime > div > input").val();
                        if (dateTimeRegex.test(inputFieldValue)) {
                            $("#rewardValidEndTime").datetimepicker('update');
                        } else {
                            if (inputFieldValue == '') {
                                $("#rewardValidEndTime").datetimepicker('setDate', null);
                            }
                        }
                        vm.showReward.validEndTime = $("#rewardValidEndTime").data('datetimepicker').getLocalDate();
                        checkValidTime();
                    }
                });
            });
        };
        vm.initReward = function () {
            vm.platformRewardPageName = "newReward";
            vm.showRewardTypeData = {};
            vm.showReward = {};
            vm.rewardParams = {};
            vm.rewardCondition = {};
            vm.showRewardTypeId = null;
            vm.initRewardValidTimeDOM()
            //vm.showRewardTypeData.params.params = {};
            //vm.showRewardTypeData.condition.condition = {};
            $scope.safeApply();
        }
        vm.getFullDate = function (num) {
            if (num < 10) {
                return '0' + num;
            } else {
                return '' + num + '';
            }
        };

        vm.rewardTabClicked = async function (callback) {
            vm.forbidRewardRemark = '';
            vm.dayHrs = {};
            vm.dayMin = {};
            for (var i = 0; i < 24; i++) {
                vm.dayHrs[i] = vm.getFullDate(i);
            }
            for (var i = 0; i < 60; i++) {
                vm.dayMin[i] = vm.getFullDate(i);
            }
            if (!vm.selectedPlatform) return;
            if (!authService.checkViewPermission('Platform', 'Reward', 'Read')) {
                return;
            }
            socketService.$socket($scope.AppSocket, 'getRewardEventsForPlatform', {platform: vm.selectedPlatform.id}, function (data) {
                $scope.$evalAsync(() => {
                    vm.allRewardEvent = data.data;
                    vm.allRewardEventNoXima = vm.allRewardEvent.filter(event => {
                        // don't display xima at player secondary permission
                        if (event && event.type && event.type.name && event.type.name !== 'PlayerConsumptionReturn') {
                            return event;
                        }
                    })
                    vm.allXimaID = [];
                    vm.allRewardEventIsXima = vm.allRewardEvent.filter(event => {
                        if (event && event.type && event.type.name && event.type.name === 'PlayerConsumptionReturn') {
                            vm.allXimaID.push(event._id);
                            return event;
                        }
                    })
                    vm.showApplyRewardEvent = data.data.filter(item => {
                        return item.needApply || (item.condition && item.condition.applyType && item.condition.applyType == "1")
                    }).length > 0
                    vm.curContentRewardType = {};
                    vm.settlementRewardGroupEvent = [];
                    if (vm.showReward && vm.showReward.display && !vm.showReward.display.length) {
                        vm.showReward.display.push({displayId:"", displayTitle:"", displayTextContent: ""});
                    }
                    $.each(vm.allRewardEvent, function (i, v) {
                        $.each(vm.allRewardTypes, function (a, b) {
                            if (b._id == v.type._id) {
                                vm.curContentRewardType[v._id] = b;
                                return true;
                            }
                        })

                        // Setup settlement reward group events entry
                        if (v && v.condition && v.condition.applyType == "3" && v.condition.interval != "5") {
                            vm.settlementRewardGroupEvent.push(v);
                        }
                    });
                    if (callback) {
                        callback();
                    }
                })
            });

            vm.getPlatformProviderGroup();
        };

        vm.rewardEventClicked = function (i, v) {
            if (!v) {
                vm.platformRewardPageName = 'showReward';
                //vm.highlightRewardEvent = {};
                //vm.highlightRewardEvent[v.name] = 'bg-bright';
                vm.showReward = {};
                vm.initRewardValidTimeDOM(vm.showReward.validStartTime, vm.showReward.validEndTime);
                console.log('reward', i, v);
                vm.showRewardTypeData = v;
                vm.showRewardTypeId = null;
                vm.rewardParams = {};
                vm.rewardCondition = {};
                return;
            }
            vm.platformRewardPageName = 'showReward';
            //vm.highlightRewardEvent = {};
            //vm.highlightRewardEvent[v.name] = 'bg-bright';
            vm.showReward = v;
            vm.initRewardValidTimeDOM(vm.showReward.validStartTime, vm.showReward.validEndTime);
            console.log('vm.showReward', vm.showReward);
            vm.showRewardTypeData = null;   // This will probably be overwritten by vm.platformRewardTypeChanged() below
            vm.showRewardTypeId = v.type._id;
            vm.rewardParams = Lodash.cloneDeep(v.param);
            vm.rewardParamsFilter = vm.rewardParams.reward;
            vm.rewardCondition = Lodash.cloneDeep(v.condition);
            vm.rewardDisabledParam = [];

            $scope.$evalAsync(() => {
                vm.platformRewardTypeChanged();
            });

            utilService.actionAfterLoaded("#rewardMainTasks", function () {
                vm.disableAllRewardInput(true);
            });
            if (vm.showReward && vm.showReward.display && !vm.showReward.display.length) {
                vm.showReward.display.push({displayId:"", displayTitle:"", displayTextContent: ""});
            }
            console.log('vm.rewardParams', vm.rewardParams);
            //$scope.safeApply();
        };

        vm.platformRewardTypeChanged = function () {
            $.each(vm.allRewardTypes, function (i, v) {
                if (v._id === vm.showRewardTypeId) {
                    vm.showRewardTypeData = v;
                    console.log('vm.showRewardTypeData', vm.showRewardTypeData);
                    return true;
                }
            });

            socketService.$socket($scope.AppSocket, 'getPlatform', {_id: vm.selectedPlatform.id}, function (data) {
                vm.platformProvider = data.data.gameProviders;
                $scope.safeApply();
                vm.disableAllRewardInput();
            }, function (data) {
                console.log("cannot get gameProvider", data);
            });

            // Handling for reward group
            if (vm.showRewardTypeData && vm.showRewardTypeData.isGrouped) {
                vm.rewardMainTask = [];
                vm.rewardMainCondition = {};
                vm.rewardMainParam = {};
                vm.isPlayerLevelDiff = false;
                vm.isDynamicRewardAmt = false;
                vm.isMultiStepReward = false;
                vm.rewardMainParamEntry = [{}];
                vm.rewardDisabledParam = [];
                vm.isRandomReward = false;
                vm.platformRewardIsEnabled = false;
                vm.rewardMainParamTable = [];
                let params = vm.showRewardTypeData.params;

                if (vm.showReward && !vm.showReward.display) {
                    vm.showReward.display = [];
                    vm.showReward.display.push({displayId: "", displayTitle: "", displayTextContent: ""});
                }

                // Set condition value
                Object.keys(params.condition).forEach(el => {
                    let mainCond = params.condition[el];
                    let result;

                    Object.keys(mainCond).forEach(el => {
                        let cond = mainCond[el];
                        vm.rewardMainCondition[cond.index] = {
                            index: cond.index,
                            name: el,
                            des: cond.des,
                            type: cond.type,
                            disabled: cond.disabled,
                            value: cond.value
                        };

                        if (cond.chainType && cond.chainOptions) {
                            vm.rewardMainCondition[cond.index].chainType = cond.chainType;
                            vm.rewardMainCondition[cond.index].chainOptions = cond.chainOptions;
                        }

                        if (cond.detail) {
                            vm.rewardMainCondition[cond.index].detail = cond.detail;
                        }

                        // Get options
                        switch (cond.options) {
                            case "providerGroup":
                                if (!vm.gameProviderGroup) break;
                                let providerGroup = {
                                    //     "": "LOCAL_CREDIT"
                                };
                                for (let i = 0; i < vm.gameProviderGroup.length; i++) {
                                    let group = vm.gameProviderGroup[i];
                                    providerGroup[group._id] = group.name;
                                }
                                result = providerGroup;
                                break;
                            case "bankType":
                                result = vm.allBankTypeList;
                                break;
                            case "allRewardEvent":
                                if (!vm.allRewardEvent) break;
                                let rewardEvents = {};
                                for (let i = 0; i < vm.allRewardEvent.length; i++) {
                                    let event = vm.allRewardEvent[i];
                                    rewardEvents[event._id] = event.name;
                                }
                                // Since promo code do not have its own event, it does not have eventObjId
                                // Hence this object id will be use specifically for promo code throughout system as eventObjId
                                rewardEvents["59ca08a3ef187c1ccec863b9"] = "优惠代码";
                                result = rewardEvents;
                                break;
                            case "gameProviders":
                                if (!vm.allGameProviders) break;
                                let gameProviders = {};
                                for (let i = 0; i < vm.allGameProviders.length; i++) {
                                    let provider = vm.allGameProviders[i];
                                    gameProviders[provider._id] = provider.name;
                                }
                                result = gameProviders;
                                break;
                            default:
                                result = $scope[cond.options];
                                if (result) {
                                    for (let key in result) {
                                        result[key] = $translate(result[key]);
                                        // to decode html entities, unwanted encoding by $translate
                                        let txt = document.createElement("textarea");
                                        txt.innerHTML = result[key];
                                        result[key] = txt.value;
                                    }
                                }
                                break;
                        }

                        vm.rewardMainCondition[cond.index].options = result;

                        // Get player level different reward flag
                        if (el == "isPlayerLevelDiff" && vm.showReward && vm.showReward.condition && vm.showReward.condition[el] === true) {
                            vm.isPlayerLevelDiff = true;
                        }

                        // Get reward dynamic amount flag
                        if (el == "isDynamicRewardAmount" && vm.showReward && vm.showReward.condition && vm.showReward.condition[el] === true) {
                            vm.isDynamicRewardAmt = true;
                        }

                        if (el == "topupType") {
                            if (!(vm.showReward && vm.showReward.condition && vm.showReward.condition[el] && vm.showReward.condition[el].indexOf("2") > -1)) {
                                vm.rewardDisabledParam.push("onlineTopUpType")
                            }
                            if (!(vm.showReward && vm.showReward.condition && vm.showReward.condition[el] && vm.showReward.condition[el].indexOf("1") > -1)) {
                                vm.rewardDisabledParam.push("bankCardType")
                            }
                        }

                        if (el == "defineLoseValue") {
                            if (!(vm.showReward && vm.showReward.condition && vm.showReward.condition[el] &&
                                    (vm.showReward.condition[el].indexOf("2") > -1 || vm.showReward.condition[el].indexOf("3") > -1))) {
                                vm.rewardDisabledParam.push("consumptionProvider");
                            }

                        }

                        // Get value
                        if (vm.showReward && vm.showReward.condition && vm.showReward.condition.hasOwnProperty(el)) {
                            vm.rewardMainCondition[cond.index].value = vm.showReward.condition[el];
                        }

                        // Get interval value 1
                        if (cond.type == "interval") {
                            if (vm.rewardMainCondition[cond.index].value && vm.rewardMainCondition[cond.index].value.length == 2) {
                                vm.rewardMainCondition[cond.index].value1 = vm.rewardMainCondition[cond.index].value[1];
                                vm.rewardMainCondition[cond.index].value = vm.rewardMainCondition[cond.index].value[0];
                            }

                            if (vm.rewardMainCondition[cond.index].value && vm.rewardMainCondition[cond.index].value.length == 3) {
                                vm.rewardMainCondition[cond.index].value2 = vm.rewardMainCondition[cond.index].value[2];
                                vm.rewardMainCondition[cond.index].value1 = vm.rewardMainCondition[cond.index].value[1];
                                vm.rewardMainCondition[cond.index].value = vm.rewardMainCondition[cond.index].value[0];
                            }
                        }

                        // Render dateTimePicker
                        let id = "#rewardMainTaskDate-" + cond.index;
                        utilService.actionAfterLoaded(id, function () {
                            let dateValue = vm.rewardMainCondition[cond.index].value;

                            vm.rewardMainCondition[cond.index].value = utilService.createDatePicker(id, {
                                language: 'en',
                                format: 'yyyy/MM/dd hh:mm:ss'
                            });

                            if (dateValue) {
                                vm.rewardMainCondition[cond.index].value.data('datetimepicker').setDate(utilService.getLocalTime(new Date(dateValue)));
                            }
                        });

                    })
                });

                $scope.safeApply();

                setTimeout(function () {
                    let paramType = vm.isDynamicRewardAmt ? vm.showRewardTypeData.params.param.tblOptDynamic : vm.showRewardTypeData.params.param.tblOptFixed;

                    // Set param value
                    Object.keys(paramType).forEach(el => {
                        // Get value
                        if (vm.showReward && vm.showReward.param && vm.showReward.param.hasOwnProperty(el) && el != "rewardParam") {
                            vm.rewardMainParam[el] = paramType[el];
                            vm.rewardMainParam[el].value = vm.showReward.param[el];
                        }

                        // Get multi step reward flag
                        if (el == "isMultiStepReward" && vm.showReward && vm.showReward.param && vm.showReward.param[el] === true) {
                            vm.isMultiStepReward = true;
                        }
                    });

                    vm.changeRewardParamLayout(null, true);

                    utilService.actionAfterLoaded("#rewardMainParamTable", function () {
                        // Set param table value
                        Object.keys(paramType.rewardParam).forEach(el => {
                            if (vm.isPlayerLevelDiff) {
                                if (vm.showReward && vm.showReward.param && vm.showReward.param.rewardParam) {
                                    vm.showReward.param.rewardParam.forEach((el, idx) => {
                                        vm.rewardMainParamTable[idx].value = el.value && el.value[0] !== null ? el.value : [{}];

                                    })
                                }
                            } else {
                                if (vm.showReward && vm.showReward.param && vm.showReward.param.rewardParam && vm.showReward.param.rewardParam[0])
                                    vm.rewardMainParamTable[0].value = vm.showReward.param.rewardParam[0].value[0] !== null ? vm.showReward.param.rewardParam[0].value : [{}];
                            }
                            if (el == "rewardPercentageAmount") {
                                vm.isRandomReward = true;
                                vm.rewardMainParamTable[0].value[0].rewardPercentageAmount = typeof vm.rewardMainParamTable[0].value[0].rewardPercentageAmount !== "undefined" ? vm.rewardMainParamTable[0].value[0].rewardPercentageAmount : [{
                                    percentage: "",
                                    amount: ""
                                }];
                            }
                        });

                        $scope.safeApply();

                        if (vm.rewardMainCondition[0].name == 'name' && vm.rewardMainCondition[0].value == null) {
                            vm.disableAllRewardInput(false);
                        } else {
                            vm.disableAllRewardInput(true);
                        }
                    });
                }, 0);
            }

            const onCreationForm = vm.platformRewardPageName === 'newReward';

            // Initialise the models with some default values
            // and grab any required external data (e.g. for select box lists)

            if (onCreationForm) {
                vm.rewardCondition = {};
                vm.rewardParams = {};
                vm.rewardParams.reward = vm.rewardParams.reward || [];
            }

            console.log('platformID', vm.selectedPlatform.id);
            if (vm.showRewardTypeData.name == "PlatformTransactionReward") {
                console.log('action', vm.showRewardTypeData.params.params.playerLevel.action);
                socketService.$socket($scope.AppSocket, vm.showRewardTypeData.params.params.playerLevel.action, {platformId: vm.selectedPlatform.id}, function (data) {
                    vm.allPlayerLevels = data.data;
                    //console.log('ok', vm.allPlayerLevels);
                    $scope.safeApply();
                }, function (data) {
                    console.log("created not", data);
                });
            } else if (vm.showRewardTypeData.name == "GameProviderReward") {
                vm.rewardParams.games = vm.rewardParams.games || [];
                vm.allGames = [];

                socketService.$socket($scope.AppSocket, 'getPlatform', {_id: vm.selectedPlatform.id}, function (data) {
                    vm.platformProvider = data.data.gameProviders;
                    $scope.safeApply();
                }, function (data) {
                    console.log("cannot get gameProvider", data);
                });

                //console.log('action', vm.showRewardTypeData.params.params.games.action);
                if (vm.rewardParams.provider) {
                    socketService.$socket($scope.AppSocket, vm.showRewardTypeData.params.params.games.action, {_id: vm.rewardParams.provider}, function (data) {
                        vm.allGames = data.data;
                        console.log('ok', vm.allGames);
                        $scope.safeApply();
                    }, function (data) {
                        console.log("created not", data);
                    });
                }
                $scope.safeApply();

            } else if (vm.showRewardTypeData.name == "PlayerConsecutiveLoginReward") {
                vm.rewardParams.reward = vm.rewardParams.reward || [];
                vm.allGames = [];

                socketService.$socket($scope.AppSocket, 'getPlatform', {_id: vm.selectedPlatform.id}, function (data) {
                    vm.platformProvider = data.data.gameProviders;
                    $scope.safeApply();
                }, function (data) {
                    console.log("cannot get gameProvider", data);
                });

                //console.log('action', vm.showRewardTypeData.params.params.games.action);
                if (vm.rewardParams.provider) {
                    socketService.$socket($scope.AppSocket, vm.showRewardTypeData.params.params.games.action, {_id: vm.rewardParams.provider}, function (data) {
                        vm.allGames = data.data;
                        console.log('ok', vm.allGames);
                        $scope.safeApply();
                    }, function (data) {
                        console.log("created not", data);
                    });
                }
                $scope.safeApply();

            } else if (vm.showRewardTypeData.name == "FirstTopUp") {
                // vm.rewardParams.games = vm.rewardParams.games || [];
                // vm.rewardParams = {};
                console.log('vm.rewardParams', vm.rewardParams);
                vm.rewardParams.providers = vm.rewardParams.providers || [];

                vm.firstTopUp = {providerTick: {}};
                console.log('vm.rewardParams', vm.rewardParams);
                socketService.$socket($scope.AppSocket, 'getPlatform', {_id: vm.selectedPlatform.id}, function (data) {
                    vm.platformProvider = data.data.gameProviders;
                    vm.platformProvider.forEach(a => {
                        if (vm.rewardParams.providers) {
                            vm.firstTopUp.providerTick[a._id] = (vm.rewardParams.providers.indexOf(a._id) != -1);
                        }
                    })
                    $scope.safeApply();
                }, function (data) {
                    console.log("cannot get gameProvider", data);
                });
                if (vm.rewardParams.provider) {
                    socketService.$socket($scope.AppSocket, vm.showRewardTypeData.params.params.games.action, {_id: vm.rewardParams.provider}, function (data) {
                        vm.allGames = data.data;
                        console.log('ok', vm.allGames);
                        $scope.safeApply();
                    }, function (data) {
                        console.log("created not", data);
                    });
                }
            } else if (vm.showRewardTypeData.name == "PlayerDoubleTopUpReward") {
                console.log('vm.rewardParams', vm.rewardParams);
                vm.rewardParams.providers = vm.rewardParams.providers || [];

                vm.firstTopUp = {providerTick: {}};
                socketService.$socket($scope.AppSocket, 'getPlatform', {_id: vm.selectedPlatform.id}, function (data) {
                    vm.platformProvider = data.data.gameProviders;
                    vm.platformProvider.forEach(a => {
                        if (vm.rewardParams.providers) {
                            vm.firstTopUp.providerTick[a._id] = (vm.rewardParams.providers.indexOf(a._id) != -1);
                        }
                    })
                    $scope.safeApply();
                }, function (data) {
                    console.log("cannot get gameProvider", data);
                });
            }
            else if (vm.showRewardTypeData.name == "PlayerTopUpReturn") {
                console.log('vm.rewardParams', vm.rewardParams);
                vm.rewardParams.providers = vm.rewardParams.providers || [];

                vm.playerTopUpReturn = {providerTick: {}, providerGroupTick: {}};
                console.log('vm.rewardParams', vm.rewardParams);
                socketService.$socket($scope.AppSocket, 'getPlatform', {_id: vm.selectedPlatform.id}, function (data) {
                    vm.platformProvider = data.data.gameProviders;
                    vm.platformProvider.forEach(a => {
                        if (vm.rewardParams.providers) {
                            vm.playerTopUpReturn.providerTick[a._id] = (vm.rewardParams.providers.indexOf(a._id) != -1);
                        }
                    });

                    $scope.safeApply();
                }, function (data) {
                    console.log("cannot get gameProvider", data);
                });
            }
            else if (vm.showRewardTypeData.name == "PlayerConsumptionIncentive") {
                vm.rewardParams.games = vm.rewardParams.games || [];
                console.log('vm.rewardParams', vm.rewardParams);
                vm.rewardParams.providers = vm.rewardParams.providers || [];
                vm.rewardParams.reward = vm.rewardParams.reward || [];

                vm.playerTopUpReturn = {providerTick: {}};
                socketService.$socket($scope.AppSocket, 'getPlatform', {_id: vm.selectedPlatform.id}, function (data) {
                    vm.platformProvider = data.data.gameProviders;
                    vm.platformProvider.forEach(a => {
                        if (vm.rewardParams.providers) {
                            vm.playerTopUpReturn.providerTick[a._id] = (vm.rewardParams.providers.indexOf(a._id) != -1);
                        }
                    })
                    $scope.safeApply();
                }, function (data) {
                    console.log("cannot get gameProvider", data);
                });

                // JSON sorts the reward param properties into alphabetical order
                // But for the UI display, we would prefer to specify our own order
                let rewardType = vm.showRewardTypeData;
                if (rewardType.params && rewardType.params.params && rewardType.params.params.reward && rewardType.params.params.reward.data) {
                    //console.log("Reordering:", rewardType.params.params.reward.data);
                    let preferredOrder = {
                        minPlayerLevel: 1,
                        maxPlayerCredit: 1,
                        minConsumptionAmount: 1,
                        minTopUpRecordAmount: 1,
                        rewardAmount: 1,
                        rewardPercentage: 1,
                        maxRewardAmount: 1,
                        spendingTimes: 1
                    };
                    rewardType.params.params.reward.data = reorderProperties(rewardType.params.params.reward.data, preferredOrder);
                    //console.log("Reordered: ", rewardType.params.params.reward.data);
                } else {
                    console.warn("Could not reorder:", rewardType);
                }
            } else if (vm.showRewardTypeData.name === "PlayerEasterEggReward") {
                vm.rewardParams.reward = vm.rewardParams.reward || [];
                vm.allGames = [];

                socketService.$socket($scope.AppSocket, 'getPlatform', {_id: vm.selectedPlatform.id}, function (data) {
                    vm.platformProvider = data.data.gameProviders;
                    $scope.safeApply();
                }, function (data) {
                    console.log("cannot get gameProvider", data);
                });

                //console.log('action', vm.showRewardTypeData.params.params.games.action);
                if (vm.rewardParams.provider) {
                    socketService.$socket($scope.AppSocket, vm.showRewardTypeData.params.params.games.action, {_id: vm.rewardParams.provider}, function (data) {
                        vm.allGames = data.data;
                        console.log('ok', vm.allGames);
                        $scope.safeApply();
                    }, function (data) {
                        console.log("created not", data);
                    });
                }
                $scope.safeApply();
            } else if (vm.showRewardTypeData.name === "PlayerTopUpPromo") {
                vm.rewardParams.reward = vm.rewardParams.reward || [];
                vm.allGames = [];

                socketService.$socket($scope.AppSocket, 'getPlatform', {_id: vm.selectedPlatform.id}, function (data) {
                    vm.platformProvider = data.data.gameProviders;
                    $scope.safeApply();
                }, function (data) {
                    console.log("cannot get gameProvider", data);
                });

                //console.log('action', vm.showRewardTypeData.params.params.games.action);
                if (vm.rewardParams.provider) {
                    socketService.$socket($scope.AppSocket, vm.showRewardTypeData.params.params.games.action, {_id: vm.rewardParams.provider}, function (data) {
                        vm.allGames = data.data;
                        console.log('ok', vm.allGames);
                        $scope.safeApply();
                    }, function (data) {
                        console.log("created not", data);
                    });
                }
                $scope.safeApply();
            } else if (vm.showRewardTypeData.name === "PlayerLimitedOfferReward") {
                vm.rewardParams.reward = vm.rewardParams.reward || [];
                vm.allGames = [];
                socketService.$socket($scope.AppSocket, 'getPlatform', {_id: vm.selectedPlatform.id}, function (data) {
                    vm.platformProvider = data.data.gameProviders;
                }, function (data) {
                    console.log("cannot get gameProvider", data);
                });

                //console.log('action', vm.showRewardTypeData.params.params.games.action);
                if (vm.rewardParams.provider) {
                    socketService.$socket($scope.AppSocket, vm.showRewardTypeData.params.params.games.action, {_id: vm.rewardParams.provider}, function (data) {
                        vm.allGames = data.data;
                        console.log('ok', vm.allGames);

                        $scope.safeApply();
                    }, function (data) {
                        console.log("created not", data);
                    });
                }
            }


            if (onCreationForm) {
                if (vm.showRewardTypeData.name == "PartnerConsumptionReturn") {
                    setInitialPartnerLevel();
                } else if (vm.showRewardTypeData.name == "PartnerReferralReward") {
                    vm.rewardCondition.numOfEntries = 1;
                    vm.rewardParams = Lodash.cloneDeep(vm.showRewardTypeData.params.params);
                    setInitialPartnerLevel();
                } else if (vm.showRewardTypeData.name == "PartnerIncentiveReward") {
                    vm.rewardCondition.rewardAmount = 200;
                    setInitialPartnerLevel();
                } else if (vm.showRewardTypeData.name == "PlayerDoubleTopUpReward") {
                    vm.rewardParams.reward = [];
                }
            }

            // Get all the partner levels, and set a default
            function setInitialPartnerLevel() {
                vm.rewardCondition.partnerLevel = vm.allPartnerLevels[0].name;
                $scope.safeApply();
            }

            //
            // console.log("vm.showRewardTypeData", vm.showRewardTypeData);
            // console.log('vm.showRewardTypeData.name', vm.showRewardTypeData.name);
            // console.log("vm.rewardCondition:", vm.rewardCondition);
            // console.log("vm.rewardParams:", vm.rewardParams);
            vm.showRewardFormValid = true;
            vm.endLoadWeekDay();
        };

        vm.changeRewardParamLayout = (model, isFirstLoad) => {
            let isResetLayout = Boolean(isFirstLoad);

            if (model == "isMultiStepReward") {
                vm.isMultiStepReward = vm.rewardMainParam[model].value;
            }

            // Disable player withdrawal permission handling
            if (model && model.i && model.v && model.entry) {
                if (model.i == "forbidWithdrawIfBalanceAfterUnlock" && model.v.type == "number") {
                    model.entry.forbidWithdrawAfterApply = false;
                }

                if (model.i == "forbidWithdrawAfterApply" && model.v.type == "checkbox") {
                    delete model.entry.forbidWithdrawIfBalanceAfterUnlock;
                }
            }

            // Check whether reward is dynamic amount
            if (model && model.name == "isDynamicRewardAmount") {
                vm.isDynamicRewardAmt = model.value;
                isResetLayout = true;
            }

            // Check whether reward is differ by player level
            if (model && model.name == "isPlayerLevelDiff") {
                vm.isPlayerLevelDiff = model.value;
                isResetLayout = true;
            }

            if (isResetLayout) {
                vm.rewardMainParamTable = [];

                let paramType = vm.isDynamicRewardAmt ? vm.showRewardTypeData.params.param.tblOptDynamic : vm.showRewardTypeData.params.param.tblOptFixed;

                vm.rewardMainParam = Object.assign({}, paramType);


                if (vm.isPlayerLevelDiff) {
                    vm.allPlayerLvl.forEach((e, idx) => {
                        let value = [{}];
                        if (vm.isRandomReward) {
                            value = [{"rewardPercentageAmount": [{percentage: "", amount: ""}]}];
                        }
                        vm.rewardMainParamTable.push({
                            header: vm.rewardMainParam.rewardParam,
                            value: value
                        });

                    });
                } else {
                    let value = [{}];
                    if (vm.isRandomReward) {
                        value = [{"rewardPercentageAmount": [{percentage: "", amount: ""}]}];
                    }

                    vm.rewardMainParamTable.push({
                        header: vm.rewardMainParam.rewardParam,
                        value: value
                    });
                }

                delete vm.rewardMainParam.rewardParam;
            }
            $scope.safeApply();
        };

        vm.rewardPeriodNewRow = (valueCollection) => {
            valueCollection.push({startDate: "", startTime: "", endDate: "", endTime: ""});
            console.log(vm.rewardMainCondition);
        };

        vm.rewardPeriodDeleteRow = (idx, valueCollection) => {
            valueCollection.splice(idx, 1);
            console.log(vm.rewardMainCondition);
        };

        vm.rewardDisplayNewRow = (valueCollection) => {
            valueCollection.push({displayId: "", displayTitle: "", displayTextContent: ""});
        };

        vm.rewardDisplayDeleteRow = (idx, valueCollection) => {
            valueCollection.splice(idx, 1);

            if (valueCollection.length == 0) {
                valueCollection.push({displayId: "", displayTitle: "", displayTextContent: ""});
            }
        };

        vm.rewardPercentageAmountNewRow = (valueCollection) => {
            valueCollection.push({percentage: "", amount: ""});
            console.log(vm.rewardMainParamTable);
        };

        vm.rewardPercentageAmountDeleteRow = (idx, valueCollection) => {
            valueCollection.splice(idx, 1);
            console.log(vm.rewardMainParamTable);
        };

        vm.rewardSelectOnChange = (model) => {
            if (model && model.name === "topupType") {
                if (model.value.indexOf("2") === -1) {
                    vm.rewardDisabledParam.indexOf("onlineTopUpType") === -1 ? vm.rewardDisabledParam.push("onlineTopUpType") : null;
                    for (let i = 0; i < Object.keys(vm.rewardMainCondition).length; i++) {
                        if (vm.rewardMainCondition[Object.keys(vm.rewardMainCondition)[i]].name == "onlineTopUpType") {
                            vm.rewardMainCondition[Object.keys(vm.rewardMainCondition)[i]].value = [];
                            vm.refreshSPicker();
                            break;
                        }
                    }
                } else {
                    vm.rewardDisabledParam = vm.rewardDisabledParam.filter(name => name !== "onlineTopUpType");
                }

                if (model.value.indexOf("1") === -1) {
                    vm.rewardDisabledParam.indexOf("bankCardType") === -1 ? vm.rewardDisabledParam.push("bankCardType") : null;
                    for (let i = 0; i < Object.keys(vm.rewardMainCondition).length; i++) {
                        if (vm.rewardMainCondition[Object.keys(vm.rewardMainCondition)[i]].name == "bankCardType") {
                            vm.rewardMainCondition[Object.keys(vm.rewardMainCondition)[i]].value = [];
                            vm.refreshSPicker();
                            break;
                        }
                    }
                } else {
                    vm.rewardDisabledParam = vm.rewardDisabledParam.filter(name => name !== "bankCardType");
                }
            }
            if (model && model.name == "defineLoseValue") {
                if (model.value.indexOf("2") == -1 && model.value.indexOf("3") == -1) {
                    vm.rewardDisabledParam.indexOf("consumptionProvider") === -1 ? vm.rewardDisabledParam.push("consumptionProvider") : null;
                } else {
                    vm.rewardDisabledParam = vm.rewardDisabledParam.filter(name => name !== "consumptionProvider");
                }
            }

            if (model && model.name == "topUpCountType") {
                delete model.value1;
                delete model.value2;
            }

            if (model && model.name == "applyType") {
                if (model.value != 1) {
                    for (let x in vm.rewardMainCondition) {
                        if (vm.rewardMainCondition[x].name == "canApplyFromClient") {
                            vm.rewardMainCondition[x].value = false;
                        }
                    }
                    vm.rewardDisabledParam.indexOf("canApplyFromClient") === -1 ? vm.rewardDisabledParam.push("canApplyFromClient") : null;
                } else {
                    vm.rewardDisabledParam = vm.rewardDisabledParam.filter(name => name !== "canApplyFromClient");
                }
            }

            // $scope.safeApply();
        };

        /**
         * Re-order the properties in obj to match the order of the properties in preferredOrderObj.
         * Any properties in obj not specified in preferredOrderObj will appear in order after those which were specified.
         *
         * @param {Object} obj
         * @param {Object} preferredOrderObj - An object with the properties in their desired order.  Note that the properties of this object will be modified, so it's preferable to pass it fresh each time
         * @returns {Object} - obj with its properties re-ordered
         */
        function reorderProperties(obj, preferredOrderObj) {
            for (var prop in obj) {
                preferredOrderObj[prop] = obj[prop];
                delete obj[prop];
            }
            for (var prop in preferredOrderObj) {
                obj[prop] = preferredOrderObj[prop];
            }
            return obj;
        }

        vm.platformRewardShowEdit = function (type) {
            if (!vm.platformRewardPageName && type) return false;
            if (type == "CANCEL" && vm.platformRewardPageName == "newReward") return true;
            if (type == "CANCEL" && vm.platformRewardPageName == "updateReward") return true;
            if (type == "CANCEL" && vm.platformRewardPageName == "showReward") return false;
            if (type == "CREATE" && vm.platformRewardPageName == "newReward") return true;
            if (type == "EDIT" && vm.platformRewardPageName == "showReward") return true;
            if (type == "UPDATE" && vm.platformRewardPageName == "updateReward") return true;
            if (type == "DELETE" && vm.platformRewardPageName == "showReward") return true;
            if (type == "rewardType" && vm.platformRewardPageName == "newReward") return false;
            if (type == "rewardType") return true;
            if (type && vm.platformRewardPageName) return false;

            if (vm.platformRewardPageName == "newReward" || vm.platformRewardPageName == "updateReward") {
                return false
            } else {
                return true;
            }
        }

        vm.disableAllRewardInput = function (disabled) {
            typeof disabled == "boolean" ? vm.rewardDisabledInput = disabled : disabled = vm.rewardDisabledInput;
            $("#rewardMainTasks :input").prop("disabled", disabled);
            if (!disabled) {
                $("#rewardMainTasks :input").removeClass("disabled");
            }
            vm.platformRewardIsEnabled = !disabled;
            if (vm.isRandomReward) {
                $("#rewardMainTasks [data-cond-name='applyType']").prop("disabled", true);
                $("#rewardMainTasks [data-cond-name='canApplyFromClient']").prop("disabled", disabled);
            }
        }

        vm.clearCanApplyFromClient = function () {
            if (!vm.showReward.needApply) {
                vm.showReward.canApplyFromClient = false;
            }
        }

        vm.clearRewardFormData = function () {
            // vm.rewardCondition = null;
            //vm.showReward = null;
            // vm.rewardParams = null;
            // vm.showRewardTypeId = null;
            // after clearing, force it back to 'ALL' checkbox
            vm.rewardEventClicked(0, vm.showReward);
            vm.daySelection['0'] = true;
            vm.rewardParamsDaySelectedAll();
            $scope.safeApply();
        }

        vm.clearProvider = function (rowIndex) {
            for (var providers in vm.rewardParams.reward[rowIndex].providers) {
                if (vm.rewardParams.reward[rowIndex].providers[providers] == 'ANY') {
                    vm.rewardParams.reward[rowIndex].providers = [];
                }
            }
            console.log(vm.rewardParams.reward[rowIndex]);
            $scope.safeApply();
        }

        vm.clearWeekDay = function (rowIndex) {
            vm.rewardParams.reward[rowIndex].repeatWeekDay = [];
            $scope.safeApply();
        }

        vm.rewardWeeklyConsecutiveTopUpAddProvider = function () {
            vm.rewardParams.providers = vm.rewardParams.providers || [];
            vm.rewardParams.providers.push({});
            console.log('vm.rewardParams.providers', vm.rewardParams.providers);
            $scope.safeApply();
        }

        vm.rewardWeeklyConsecutiveTopUpDeleteProvider = function (i) {
            console.log(vm.rewardParams.providers.length, i);
            if (vm.rewardParams.providers && (vm.rewardParams.providers.length >= i)) {
                vm.rewardParams.providers.splice(i, 1);
            }
            vm.rewardWeeklyConsecutiveTopUpCheckDuplicateProvider();
        }
        vm.rewardWeeklyConsecutiveTopUpChangeProvider = function (i, id) {
            vm.rewardParams.providers[i] = {providerObjId: id};
            console.log('i', i, id);
            vm.rewardWeeklyConsecutiveTopUpCheckDuplicateProvider();

            vm.getProviderGames(id, function (data) {
                console.log('provider ', id, data);
                vm.providerGame = vm.providerGame || {};
                vm.providerGame[id] = data;
                $scope.safeApply();
            })
        }

        vm.rewardWeeklyConsecutiveTopUpCheckDuplicateProvider = function () {
            var newArray = vm.rewardParams.providers.map(function (obj) {
                console.log('obj', obj.providerObjId);
                return obj.providerObjId;
            });
            console.log('newArray', newArray, newArray.length);
            vm.rewardWeeklyConsecutiveTopUpDuplicateProvider = newArray && (newArray.length !== new Set(newArray).size);
            vm.showRewardFormValid = !vm.rewardWeeklyConsecutiveTopUpDuplicateProvider;
            $scope.safeApply();
        }

        vm.updateDoubleTopupReward = function (type, data) {
            if (type == 'add') {
                vm.rewardParams.reward.push(JSON.parse(JSON.stringify(data)));
            } else if (type == 'remove') {
                vm.rewardParams.reward = vm.rewardParams.reward.splice(data, 1)
            }
        };

        vm.updateRewardInEdit = function (type, data) {
            if (type == 'add') {
                vm.rewardParams.reward.push(JSON.parse(JSON.stringify(data)));
            } else if (type == 'remove') {
                vm.rewardParams.reward = vm.rewardParams.reward.splice(data, 1)
            }
        };
        vm.updateLimitedOffersEdit = function (type, data, id) {
            if (type == 'add') {
                socketService.$socket($scope.AppSocket, 'generateObjectId', {}, function (result) {
                    var objectId = result.data
                    if (objectId) {
                        data._id = objectId;

                        if (vm.rewardParams.reward) {
                            // first time create the data
                            if (vm.rewardParams.reward.length == 0) {
                                vm.rewardParams.reward.push(JSON.parse(JSON.stringify(data)));
                                vm.rewardParamsFilter = vm.rewardParams.reward;
                            }
                            else {
                                if (vm.rewardParamsFilter.length == vm.rewardParams.reward.length) {
                                    vm.rewardParams.reward.push(JSON.parse(JSON.stringify(data)));
                                }
                                else {
                                    vm.rewardParamsFilter.push(JSON.parse(JSON.stringify(data)));
                                    vm.rewardParams.reward.push(JSON.parse(JSON.stringify(data)));
                                }
                            }

                        }
                        $scope.safeApply();
                    }
                });
            } else if (type == 'remove') {
                if (vm.rewardParamsFilter) {
                    vm.rewardParamsFilter = vm.rewardParamsFilter.filter(item => {
                        return item._id != id;
                    })
                }

                if (vm.rewardParams.reward) {
                    vm.rewardParams.reward = vm.rewardParams.reward.filter(item => {
                        return item._id != id;
                    })
                }
                $scope.safeApply();
            }
        };
        vm.weekDayList = {
            '1': 'Mon',
            '2': 'Tue',
            '3': 'Wed',
            '4': 'Thu',
            '5': 'Fri',
            '6': 'Sat',
            '7': 'Sun'
        };

        vm.daySelection = {
            '0': true,
            '1': true,
            '2': true,
            '3': true,
            '4': true,
            '5': true,
            '6': true,
            '7': true
        };

        vm.rewardParamsDaySelectedAll = function () {
            vm.rewardParamsFilter = [];
            vm.rewardParamsFilter = vm.rewardParams.reward;

            for (let i in vm.daySelection) {
                vm.daySelection[i] = true;

            }
            console.log('rewardParamsFilter', vm.rewardParamsFilter);
            $scope.safeApply();
            vm.endLoadWeekDay();
        };

        vm.isDayChecked = function (index) {

            for (let i in vm.daySelection) {
                if (i == index) {
                    vm.daySelection[i] = true;
                }
                else {
                    vm.daySelection[i] = false;
                }
            }

            vm.rewardParamsFilter = [];

            vm.rewardParams.reward.map(
                item => {
                    if (item.repeatWeekDay === undefined || item.repeatWeekDay.length === 0) {
                        vm.rewardParamsFilter.push(item);
                    }
                    else if (item.repeatWeekDay.includes(index)) {
                        vm.rewardParamsFilter.push(item);
                    }
                    else {
                    }
                });
            console.log('rewardParamsFilter', vm.rewardParamsFilter);
            $scope.safeApply();
            vm.endLoadWeekDay();
        };

        vm.endLoadWeekDay = function () {
            vm.refreshSPicker();
        };

        vm.refreshSPicker = () => {
            // without this timeout, 'selectpicker refresh' might done before the DOM able to refresh, which evalAsync doesn't help
            $timeout(function () {
                $('.spicker').selectpicker('refresh');
            }, 0);
        };

        vm.updatePlayerValueConfigInEdit = function (type, configType, data) {
            if (type == 'add') {
                switch (configType) {
                    case 'topUpScore':
                        vm.playerValueBasic.topUpTimesScores.push({name: data.minTopUpTimes, score: data.score});
                        break;
                    case 'gameTypeScore':
                        vm.playerValueBasic.gameTypeCountScores.push({name: data.name, score: data.score});
                        break;
                    case 'WinRatio':
                        vm.playerValueBasic.winRatioScores.push({name: data.name, score: data.score});
                        break;
                }
            } else if (type == 'remove') {
                configType.splice(data, 1);
            }
        };

        vm.updateCallRequestConfigInEdit = function (type, data, arrayToRemove) {
            if (type == 'add') {
                if (data && data.hasOwnProperty('lineId') && data.hasOwnProperty('lineName')) {
                    vm.callRequestConfig.callRequestLineConfig.push({
                        lineId: data.lineId,
                        lineName: data.lineName,
                        minLevel: data.minLevel? data.minLevel: ""
                    });
                }
            } else if (type == 'remove') {
                arrayToRemove.splice(data, 1);
            }
        };

        vm.updateCollectionInEdit = function (type, collection, data, collectionCopy) {
            if (type == 'add') {
                let newObj = {};

                // check again if there is duplication of sms title after updating the promoCodeType
                if (data.smsTitle && vm.promoCodeType1BeforeEdit && vm.promoCodeType2BeforeEdit && vm.promoCodeType3BeforeEdit){

                    let filterPromoCodeType1 = vm.promoCodeType1BeforeEdit.map(p => p.smsTitle);
                    let filterPromoCodeType2 = vm.promoCodeType2BeforeEdit.map(p => p.smsTitle);
                    let filterPromoCodeType3 = vm.promoCodeType3BeforeEdit.map(p => p.smsTitle);

                    let promoCodeSMSTitleCheckList = filterPromoCodeType1.concat(filterPromoCodeType2, filterPromoCodeType3);

                    if (promoCodeSMSTitleCheckList.indexOf(data.smsTitle) != -1){
                        vm.smsTitleDuplicationBoolean = true;
                        return socketService.showErrorMessage($translate("Banner title cannot be repeated!"));
                    }
                    else{
                        vm.smsTitleDuplicationBoolean = false;
                    }
                }

                Object.keys(data).forEach(e => {
                    newObj[e] = data[e];
                });

                // update the copy to check for duplication
                if (collectionCopy){
                    collectionCopy.push(newObj);
                }

                collection.push(newObj);
                collection.forEach((elem, index, arr) => {
                    let id = '#expDate1-' + index;
                    let provId = '#promoProviders-' + index;
                    if (!$(id).data("datetimepicker")) {
                        utilService.actionAfterLoaded(id, function () {
                            collection[index].expDate = utilService.createDatePicker(id, {
                                language: 'en',
                                format: 'yyyy/MM/dd hh:mm:ss'
                            });
                            collection[index].expDate.data('datetimepicker').setDate(new Date(), 1);
                        });
                    }

                    if (!$(provId).data("multipleSelect")) {
                        utilService.actionAfterLoaded(provId, function () {
                            $(provId).multipleSelect({
                                allSelected: $translate("All Selected"),
                                selectAllText: $translate("Select All"),
                                countSelected: $translate('# of % selected'),
                                onClick: function () {
                                    //vm.proposalStatusUpdated();
                                },
                                onCheckAll: function () {
                                    //vm.proposalStatusUpdated();
                                },
                                onUncheckAll: function () {
                                    //vm.proposalStatusUpdated();
                                }
                            });
                            $(provId).multipleSelect("checkAll");
                        });
                    }
                })


            } else if (type == 'remove') {

                // delete immediately the constructed promoCodeType before saving into dB
                if (collection[data]._id == null) {
                    collection.splice(data, 1);
                }
                else {

                    let sendData = {
                        platformObjId: vm.selectedPlatform.id,
                        promoCodeTypeObjId: collection[data]._id
                    };

                    // check the availability of the promocode type, can only remove if it is expired
                    socketService.$socket($scope.AppSocket, 'checkPromoCodeTypeAvailability', sendData, function (result) {
                        if (result) {
                            if (!result.data.deleteFlag && !result.data.delete) {
                                socketService.showErrorMessage($translate("The promoCode Type is still valid"));
                            }
                            else if (!result.data.deleteFlag && result.data.delete) {
                                // delete the PromoCodeType from the dB (generated promoCodeType but not using)
                                vm.removeSMSContent.push({
                                    smsContent: collection.splice(data, 1),
                                    isDelete: true
                                });
                                $scope.safeApply();
                            }
                            else if (result.data.deleteFlag && !result.data.delete) {
                                // change the deleteFlag status in dB (as it had been used before)
                                vm.removeSMSContent.push({
                                    smsContent: collection.splice(data, 1),
                                    updateIsDeletedFlag: true
                                });
                                $scope.safeApply();
                            }
                            else {
                            }

                        }
                        else {
                            return Q.reject("data was empty: " + result);
                        }
                    });
                }
            }
        };

        vm.removeGameGroupInEdit = (index) => {
            vm.gameProviderGroup.splice(index, 1);
        };

        vm.topupProviderChange = function (provider, checked) {
            if (!provider) {
                return;
            }
            if (!vm.rewardParams.hasOwnProperty('providers')) {
                vm.rewardParams.providers = [];
            }
            if (checked && vm.rewardParams.providers.indexOf(provider) == -1) {
                vm.rewardParams.providers.push(provider);
            } else if (!checked && vm.rewardParams.providers.indexOf(provider) !== -1) {
                vm.rewardParams.providers.splice(vm.rewardParams.providers.indexOf(provider), 1)
            }
        };

        vm.getProviderGames = function (id, callback) {
            if (!id) return;
            console.log(id);
            socketService.$socket($scope.AppSocket, 'getGamesByProviderId', {_id: id}, function (data) {
                // vm.allGames = data.data;
                console.log('vm.providerAllGames', data.data);
                if (callback) {
                    callback(data.data);
                }
                $scope.safeApply();
            }, function (data) {
                console.log("create not", data);
            });
        }
        vm.getProviderText = function (providerId) {
            if (!providerId || !vm.allGameProviders) return false;
            var result = '';
            $.each(vm.allGameProviders, function (i, v) {
                if (providerId == v._id || providerId == v.providerId) {
                    result = v.name;
                    return true;
                }
                //console.log('all provider', i, v);
            })
            //console.log('provider text', result);
            return result;
        };

        vm.getProviderGroupNameById = (grpId) => {
            let result = '';
            $.each(vm.gameProviderGroup, function (i, v) {
                if (grpId == v._id) {
                    result = v.name;
                    return true;
                }
            });
            return result;
        };

        vm.getGameTextbyId = function (id) {
            if (!vm.allGames) return;
            if (!id) return false;
            var result = '';
            $.each(vm.allGames, function (i, v) {
                if (id == v._id) {
                    result = v.name;
                    return true;
                }
                //console.log('all provider', i, v);
            })
            return result;
        }
        vm.checkGameChecked = function (v) {
            if (!v || !vm.rewardParams.games) return false;
            // console.log(vm.rewardParams.games.indexOf(v._id) > -1);
            return vm.rewardParams.games.indexOf(v._id) > -1;
        }
        vm.processGameArray = function (selected, data) {
            // console.log(selected, data);
            if (selected) {
                vm.rewardParams.games.push(data._id);
            } else {
                vm.rewardParams.games.splice(vm.rewardParams.games.indexOf(data._id), 1);
            }
            console.log('final DB array', vm.rewardParams.games);
            $scope.safeApply();
        }

        vm.editReward = function (i) {
            console.log('vm.showReward', vm.showReward);

            var curReward = {
                name: vm.showReward.name,
                code: vm.showReward.code,
                type: vm.showReward.type._id,
                needApply: vm.showReward.needApply,
                needSettlement: vm.showReward.needSettlement,
                canApplyFromClient: vm.showReward.canApplyFromClient,
                settlementPeriod: vm.showReward.settlementPeriod,
                description: vm.showReward.description,
                platform: vm.showReward.platform,
                param: vm.rewardParams,
                condition: vm.rewardCondition,
                validStartTime: vm.showReward.validStartTime || null,
                validEndTime: vm.showReward.validEndTime || null,
            };

            if (vm.showRewardTypeData.isGrouped === true) {
                // Set condition
                Object.keys(vm.rewardMainCondition).forEach(e => {
                    if (vm.rewardMainCondition[e].value !== undefined) {
                        let condName = vm.rewardMainCondition[e].name;
                        let condType = vm.rewardMainCondition[e].type;
                        let condValue = vm.rewardMainCondition[e].value;

                        // Get time string in object type
                        if (condType == "date") {
                            if (condValue.find("input").val()) {
                                condValue = condValue.data('datetimepicker').getLocalDate();
                            } else {
                                condValue = null;
                            }
                        }

                        // Save name and code to outer level
                        if (condName == "name" || condName == "code" || condName == "canApplyFromClient" || condName == "validStartTime" || condName == "validEndTime") {
                            curReward[condName] = condValue;
                        }

                        // Interval type handling
                        if (condType == "interval") {
                            if (vm.rewardMainCondition[e].hasOwnProperty("value1")) {
                                condValue = [condValue, vm.rewardMainCondition[e].value1];

                                if (vm.rewardMainCondition[e].hasOwnProperty("value2")) {
                                    condValue.push(vm.rewardMainCondition[e].value2);
                                }
                            }
                        }

                        // Save reward condition
                        if ((condType == "date" && condValue) || condType != "date") {
                            curReward.condition[condName] = condValue;
                        }
                    }
                });

                // Set param
                Object.keys(vm.rewardMainParam).forEach(e => {
                    curReward.param[e] = vm.rewardMainParam[e].value;
                });

                curReward.param.rewardParam = [];

                // Set param table
                Object.keys(vm.rewardMainParamTable).forEach((e, idx) => {
                    let levelParam = {
                        levelId: vm.allPlayerLvl[idx]._id,
                        value: vm.rewardMainParamTable[e].value
                    };

                    curReward.param.rewardParam.push(levelParam);
                });

                if (vm.showReward && vm.showReward.display) {
                    for (let i=0; i < vm.showReward.display.length; i++) {
                        if (vm.showReward.display[i].displayId == "" && vm.showReward.display[i].displayTitle == "" && vm.showReward.display[i].displayTextContent == "") {
                            vm.showReward.display.splice(i, 1);
                        }
                    }

                    curReward.display = vm.showReward.display || [];
                }
            } else {

            }


            var sendData = {
                query: {_id: vm.showReward._id},
                updateData: curReward
            };

            console.log('editReward sendData', sendData);

            socketService.$socket($scope.AppSocket, 'updateRewardEvent', sendData, function (data) {
                vm.rewardTabClicked();
                vm.platformRewardPageName = 'showReward';
                console.log('ok');
            }, function (data) {
                console.log("created not", data);
                vm.rewardTabClicked();
            });
        }
        vm.deleteReward = function (data) {
            console.log('vm.showReward', vm.showReward);
            socketService.$socket($scope.AppSocket, 'deleteRewardEventByIds', {_ids: [vm.showReward._id], name: vm.showReward.name}, function (data) {
                //vm.allGameProvider = data.data;
                vm.rewardTabClicked(function () {
                    vm.rewardEventClicked(0, vm.allRewardEvent[0])
                });
                vm.platformRewardPageName = 'showReward';
                $scope.safeApply();
            }, function (data) {
                console.log("created not", data);
            });
        }
        vm.submitReward = function () {
            let sendData = {
                platform: vm.selectedPlatform.id,
                type: vm.showRewardTypeData._id,
                condition: {},
                param: {}
            };

            if (vm.showRewardTypeData.isGrouped === true) {
                // Set condition
                Object.keys(vm.rewardMainCondition).forEach(e => {
                    if (vm.rewardMainCondition[e].value !== undefined) {
                        let condName = vm.rewardMainCondition[e].name;
                        let condType = vm.rewardMainCondition[e].type;
                        let condValue = vm.rewardMainCondition[e].value;
                        // Get time string in object type
                        if (condType == "date") {
                            if (condValue.find("input").val()) {
                                condValue = condValue.data('datetimepicker').getLocalDate();
                            } else {
                                condValue = null;
                            }
                        }

                        // Save name and code to outer level
                        if (condName == "name" || condName == "code" || condName == "canApplyFromClient" || condName == "validStartTime" || condName == "validEndTime") {
                            sendData[condName] = condValue;
                        }

                        // Interval type handling
                        if (condType == "interval") {
                            if (vm.rewardMainCondition[e].hasOwnProperty("value1")) {
                                condValue = [condValue, vm.rewardMainCondition[e].value1];

                                if (vm.rewardMainCondition[e].hasOwnProperty("value2")) {
                                    condValue.push(vm.rewardMainCondition[e].value2);
                                }
                            }
                        }

                        // Save reward condition
                        if ((condType == "date" && condValue) || condType != "date") {
                            sendData.condition[condName] = condValue;
                        }
                    }
                });

                // Set param
                Object.keys(vm.rewardMainParam).forEach(e => {
                    sendData.param[e] = vm.rewardMainParam[e].value;
                });

                sendData.param.rewardParam = [];

                // Set param table
                Object.keys(vm.rewardMainParamTable).forEach((e, idx) => {
                    let levelParam = {
                        levelId: vm.allPlayerLvl[idx]._id,
                        value: vm.rewardMainParamTable[e].value
                    };

                    sendData.param.rewardParam.push(levelParam);
                });

                if (vm.showReward && vm.showReward.display) {
                    for (let i=0; i < vm.showReward.display.length; i++) {
                        if (vm.showReward.display[i].displayId == "" && vm.showReward.display[i].displayTitle == "" && vm.showReward.display[i].displayTextContent == "") {
                            vm.showReward.display.splice(i, 1);
                        }
                    }

                    sendData.display = vm.showReward.display || [];
                }
            } else {
                sendData = vm.showReward;
                sendData.name = vm.showReward.name;
                sendData.platform = vm.selectedPlatform.id;
                sendData.description = vm.showReward.description;
                sendData.param = vm.rewardParams;
                sendData.condition = vm.rewardCondition;
                sendData.type = vm.showRewardTypeData._id;
                sendData.canApplyFromClient = vm.showReward.canApplyFromClient;
                sendData.validStartTime = vm.showReward.validStartTime || null;
                sendData.validEndTime = vm.showReward.validEndTime || null;

            }
            console.log('vm.showRewardTypeData', vm.showRewardTypeData);
            console.log('vm.rewardMainCondition', vm.rewardMainCondition);
            console.log("newReward", sendData);
            console.log("newReward2", vm.showReward.validStartTime);
            socketService.$socket($scope.AppSocket, 'createRewardEvent', sendData, function (data) {
                //vm.allGameProvider = data.data;
                vm.rewardTabClicked();
                vm.rewardEventClicked(0, data.data);
                vm.platformRewardPageName = 'showReward';
                $scope.safeApply();
            }, function (data) {
                console.log("created not", data);
            });
        };

        // platform-reward end =============================================================================

        // player level codes==============start===============================
        vm.keywordFilterTypeChange = (type) => {
            vm.keywordFilterType = type;

            vm.updateCurrentKeywords();
        };

        vm.updateCurrentKeywords = () => {
            vm.keywordRemoveList = [];
            vm.currentKeywords = [];
            for (let i = 0; i < vm.filteredKeywordList.length; i++) {
                if (vm.filteredKeywordList[i].type === vm.keywordFilterType) {
                    if (vm.keywordFilterType === 'sms' && vm.filteredKeywordList[i].smsChannel != vm.keywordFilterChannel) {
                        continue;
                    }

                    vm.currentKeywords = vm.filteredKeywordList[i].keywords;
                    break;
                }
            }

            $scope.safeApply();
            setTimeout(vm.setupMultiSelect, 0);
        };


        vm.getAllFilteredKeywords = () => {
            vm.filteredKeywordList = [];
            socketService.$socket($scope.AppSocket, 'getAllFilteredKeyword', {
                platformObjId: vm.selectedPlatform.id
            }, function (data) {
                console.log('getAllFilteredKeyword', data);
                vm.filteredKeywordList = data.data;

                vm.updateCurrentKeywords();
            });
        };

        vm.addFilterKeywords = () => {
            let keywordArr = [];
            if (vm.keywordFilterNew) {
                let keywords = vm.keywordFilterNew.split(/\r?\n/);
                for (let i = 0, len = keywords.length; i < len; i++) {
                    let keyword = keywords[i].trim();
                    if (keyword) keywordArr.push(keyword);
                }
            }

            socketService.$socket($scope.AppSocket, 'setFilteredKeywords', {
                keywords: keywordArr,
                smsChannel: vm.keywordFilterChannel || $scope.channelList && $scope.channelList[0] || "0",
                type: vm.keywordFilterType,
                platformObjId: vm.selectedPlatform.id
            }, function (data) {
                console.log('setFilteredKeywords', data);
                if (data && data.data) {
                    vm.keywordFilterNew = "";
                    vm.getAllFilteredKeywords();
                }
            });

        };

        vm.setupMultiSelect = () => {
            $('#keywordFilterSelect option').mousedown(function(e) {
                e.preventDefault();
                var originalScrollTop = $(this).parent().scrollTop();
                $(this).prop('selected', $(this).prop('selected') ? false : true);
                var self = this;
                $(this).parent().focus();
                setTimeout(function() {
                    $(self).parent().scrollTop(originalScrollTop);
                }, 0);
                if ($(this).prop('selected')) {
                    vm.keywordRemoveList.push($(this).html());
                }
                else {
                    vm.keywordRemoveList = vm.keywordRemoveList.filter( val => val != $(this).html() );
                }

                return false;
            });

        };

        vm.removeKeywordsFromFilter = () => {
            socketService.$socket($scope.AppSocket, 'removeFilteredKeywords', {
                keywords: vm.keywordRemoveList,
                smsChannel: vm.keywordFilterChannel || $scope.channelList && $scope.channelList[0] || "0",
                type: vm.keywordFilterType,
                platformObjId: vm.selectedPlatform.id
            }, function (data) {
                console.log('removeFilteredKeywords', data);
                if (data && data.data) {
                    vm.keywordRemoveList = [];
                    vm.getAllFilteredKeywords();
                }
            });
        };

        vm.getNoInGroupSmsSetting = () => {
            vm.noGroupSmsSetting = [];
            for (let messageType in vm.allMessageTypes) {
                let isInGroup = false;
                vm.smsGroups.forEach((smsGroup) => {
                    if ((smsGroup.smsParentSmsId !== -1 && vm.allMessageTypes[messageType].name === smsGroup.smsName) || vm.allMessageTypes[messageType].name === 'smsVerificationCode') {
                        isInGroup = true;
                    }
                });

                if (!isInGroup)
                    vm.noGroupSmsSetting.push(vm.allMessageTypes[messageType]);
            }
            $scope.safeApply();
        };

        function updateSmsGroup() {
            socketService.$socket($scope.AppSocket, 'updatePlatformSmsGroups', {
                smsGroups: vm.smsGroups,
                platformObjId: vm.selectedPlatform.data._id
            }, function (data) {
                vm.configTabClicked("smsGroup")
            });
        };

        vm.addSmsSettingToGroup = (smsSetting, index) => {
            if (!smsSetting.group) return;
            vm.smsGroups.push({
                smsName: smsSetting.name,
                smsParentSmsId: smsSetting.group,
                platformObjId: vm.selectedPlatform.data._id
            });
            vm.noGroupSmsSetting.splice(index, 1);
        };

        vm.filterSmsSettingGroup = (parentSmsId) => {
            return (smsSettingGroup) => {
                return smsSettingGroup.smsParentSmsId == parentSmsId;
            }
        };

        vm.addNewSmsGroup = () => {
            socketService.$socket($scope.AppSocket, 'addNewSmsGroup', {platformObjId: vm.selectedPlatform.data._id}, function (data) {
                vm.smsGroups.push(data.data)
                $scope.safeApply();
            });
        };

        vm.removeSmsSettingFromGroup = (smsSettingGroup) => {
            vm.smsGroups = vm.smsGroups.filter(smsGroup => smsGroup.smsName !== smsSettingGroup.smsName && smsSettingGroup.smsParentSmsId !== -1);
            vm.getNoInGroupSmsSetting();
            $scope.safeApply();
        };

        vm.getPlatformSmsGroups = () => {
            return $scope.$socketPromise('getPlatformSmsGroups', {platformObjId: vm.selectedPlatform.data._id}).then(function (data) {
                vm.smsGroups = data.data;
                console.log('vm.smsGroups', vm.smsGroups);
                vm.getNoInGroupSmsSetting();
                $scope.safeApply();
            });
        };

        vm.deleteSmsGroup = (smsGroup) => {
            return $scope.$socketPromise('deletePlatformSmsGroup', {_id: smsGroup._id}).then(function (data) {
                vm.getPlatformSmsGroups();
            });
        };

        vm.rewardPointsTabClicked = function (choice) {
            vm.selectedRewardPointTab = choice;
            vm.rewardPointsEvent = [];
            vm.rewardPointsEventOld = [];
            vm.deletingRewardPointsEvent = null;
            vm.rewardPointsEventUpdateAll = false;
            switch (choice) {
                case 'rewardPointsRule':
                    vm.isRewardPointsLvlConfigEditing = false;
                    vm.rewardPointsLvlConfig = {};
                    vm.oldRewardPointsLvlConfigPeriod = null;
                    vm.oldRewardPointsLvlConfigCustomPeriodEndTime = null;
                    Q.all([vm.getRewardPointsLvlConfig(), vm.getAllPlayerLevels(), vm.getPlatformProviderGroup(), vm.getAllPlayerLevelByAllPlatform()]).then(
                        (data) => {
                            // Check is all player level already set rewardPointsLvlConfig
                            vm.allPlayerLvl.forEach((playerLvl) => {
                                let isPlayerLvlSet = false;
                                vm.rewardPointsLvlConfig = vm.rewardPointsLvlConfig ? vm.rewardPointsLvlConfig : {};
                                vm.rewardPointsLvlConfig.params = vm.rewardPointsLvlConfig.params ? vm.rewardPointsLvlConfig.params : [];
                                vm.rewardPointsLvlConfig.params.forEach((param) => {
                                    if (param.levelObjId == playerLvl._id) {
                                        isPlayerLvlSet = true;
                                    }
                                });
                                if (!isPlayerLvlSet) {
                                    vm.rewardPointsLvlConfig.params.push({'levelObjId': playerLvl._id});
                                }
                            });
                            vm.oldRewardPointsLvlConfigPeriod = vm.rewardPointsLvlConfig.intervalPeriod;
                            vm.oldRewardPointsLvlConfigCustomPeriodEndTime = vm.rewardPointsLvlConfig.customPeriodEndTime;
                            vm.rewardPointsLvlConfigPeriodChange();
                            vm.rewardPointsLvlConfigSetDisable(true);
                            $scope.safeApply();
                        }
                    );
                    break;
                case 'loginRewardPoints':
                    vm.userAgentWithSelectAll = $.extend({}, {'-1': 'All Selected'}, $scope.constPlayerRegistrationInterface);
                    // [vm.allGameProviders, vm.gameProvidersList] = vm.getAllGameProviders(vm.selectedPlatform.id);
                    vm.getRewardPointsEventByCategory($scope.constRewardPointsTaskCategory.LOGIN_REWARD_POINTS);
                    break;
                case 'topupRewardPoints':
                    vm.topupRewardPoints = [];
                    vm.userAgentTypeWithSelectAll = $.extend({}, {'-1': 'All Selected'}, $scope.userAgentType);
                    vm.topupTypeListWithSelectAll = $.extend({}, {'-1': 'All Selected'}, $scope.topUpTypeList);
                    // vm.getAllGameProviders(vm.selectedPlatform.id);
                    vm.getRewardPointsEventByCategory($scope.constRewardPointsTaskCategory.TOPUP_REWARD_POINTS);
                    break;
                case 'gameRewardPoints':
                    vm.allGameType = [];
                    vm.allGameBetType = [];
                    //Todo get all game type
                    //Todo get all game bet type
                    // vm.getAllGameProviders(vm.selectedPlatform.id);
                    vm.getGameProviderToManuallyInsertGameId();
                    vm.getRewardPointsEventByCategory($scope.constRewardPointsTaskCategory.GAME_REWARD_POINTS);
                    break;
                case 'rewardPointsRanking':
                    vm.editFakeAcc = false;
                    vm.playerRankingRandom = [{}];
                    vm.playerRankingRandomClone = [{}];
                    vm.isEditRandomData = false;
                    vm.playerRewardRanking = {totalCount: 0};
                    vm.playerRewardRankingRandom = {totalCount: 0};
                    utilService.actionAfterLoaded("#rewardRankingRandomTablePage", function () {
                        vm.playerRewardRanking.pageObj = utilService.createPageForPagingTable("#rewardRankingTablePage", {}, $translate, function (curP, pageSize) {
                            vm.commonPageChangeHandler(curP, pageSize, "playerRewardRanking", vm.getPlayerRewardPointsRanking)
                        });
                        vm.playerRewardRankingRandom.pageObj = utilService.createPageForPagingTable("#rewardRankingRandomTablePage", {}, $translate, function (curP, pageSize) {
                            vm.commonPageChangeHandler(curP, pageSize, "playerRewardRankingRandom", vm.getPlayerRewardPointsRankingRandom)
                        });
                        $scope.safeApply();
                        vm.getRankingRandomConfig();
                        vm.getPlayerRewardPointsRanking(true);
                        vm.getPlayerRewardPointsRankingRandom(true);
                    });
                    break;
                case 'rewardPointsLog':
                    vm.rewardPointsLogQuery = {};
                    vm.rewardPointsLogPageObjs = {};
                    vm.rewardPointsLogPageAASorting = [];
                    utilService.actionAfterLoaded("#allRewardPointsTablePage", function () {
                        vm.rewardPointsLogPageObjs.allRewardPoints = utilService.createPageForPagingTable("#allRewardPointsTablePage", {}, $translate, function (curP, pageSize) {
                            vm.commonPageChangeHandler(curP, pageSize, "rewardPointsLogPageAASorting", vm.submitRewardPointsLogQuery)
                        });
                        $scope.safeApply();
                        vm.submitRewardPointsLogQuery(true);
                    });
                    break;
            }
        };

        vm.getRandomInt = function (min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }

        vm.generateRandomName = function (length, isAlphabet, isDigit) {
            var mask = '';
            if (isAlphabet) mask += 'abcdefghijklmnopqrstuvwxyz';
            if (isDigit) mask += '0123456789';
            var result = '';
            for (var i = length; i > 0; --i) result += mask[Math.round(Math.random() * (mask.length - 1))];
            return result;
        }

        vm.generateRandomData = function (dataConfig) {
            let result = {};
            let minLvl;
            let maxLvl = vm.allPlayerLvl.length - 1;
            for (let i = 0; i < vm.allPlayerLvl.length; i++) {
                if (vm.allPlayerLvl[i]._id.toString() == dataConfig.lowestLevel.toString()) {
                    minLvl = i;
                    break;
                }
            }
            let prefixLength = dataConfig.prefix.length;
            result.playerName = dataConfig.prefix;
            result.playerName += vm.generateRandomName(vm.getRandomInt(dataConfig.minAccountLength - prefixLength, dataConfig.maxAccountLength - prefixLength), dataConfig.isRandomAlphabet, dataConfig.isRandomDigit);
            result.points = vm.getRandomInt(dataConfig.minRewardPoints, dataConfig.maxRewardPoints);
            result.playerLevel = vm.allPlayerLvl[vm.getRandomInt(minLvl, maxLvl)]._id;
            return result;
        }

        vm.insertRandomData = function () {
            vm.randomRewardPointsData = [];
            for (let i = 0; i < vm.playerRankingRandom.length; i++) {
                for (let j = 0; j < vm.playerRankingRandom[i].randomCount; j++) {
                    vm.randomRewardPointsData.push(vm.generateRandomData(vm.playerRankingRandom[i]));
                }
            }

            vm.randomRewardPointsData.map(item => {
                item.platformObjId = vm.selectedPlatform.id;
                return item;
            });

            socketService.$socket($scope.AppSocket, 'insertRewardPointsRandom', vm.randomRewardPointsData, function (data) {
                console.log('insertRewardPointsRandom', data);
                $scope.safeApply();
                vm.getPlayerRewardPointsRankingRandom(true);
            }, function (err) {
                console.error(err);
            }, true);
        }

        vm.getRankingRandomConfig = function () {
            socketService.$socket($scope.AppSocket, 'getRewardPointsRandomDataConfig', {platformObjId: vm.selectedPlatform.id}, function (data) {
                console.log('getRandomConfig', data.data);
                if (data && data.data) {
                    vm.playerRankingRandom = data.data.condition;
                    vm.playerRankingRandomClone = JSON.parse(JSON.stringify(data.data.condition));
                }
                $scope.safeApply();
            }, function (err) {
                console.error(err);
            }, true);
        }

        vm.submitRankingRandomConfig = function () {
            let sendData = {
                platformObjId: vm.selectedPlatform.id,
                condition: vm.playerRankingRandom
            }

            socketService.$socket($scope.AppSocket, 'upsertRewardPointsRandomDataConfig', sendData, function (data) {
                console.log('getRandomConfig', data);
                vm.playerRankingRandom = data.data.condition;
                vm.playerRankingRandomClone = JSON.parse(JSON.stringify(data.data.condition));
                $scope.safeApply();
            }, function (err) {
                vm.playerRankingRandom = JSON.parse(JSON.stringify(vm.playerRankingRandomClone));
                console.error(err);
                $scope.safeApply();
            }, true);
        }

        vm.deleteRankingRandomRow = function (idx) {
            vm.playerRankingRandom.splice(idx, 1);
            if (vm.playerRankingRandom.length < 1) {
                vm.playerRankingRandom.push({});
            }
        }

        vm.getPlayerRewardPointsRanking = function (isNewSearch) {
            vm.playerRewardRanking.index = isNewSearch ? 0 : (vm.playerRewardRanking.index || 0);

            if (!vm.playerRewardRanking.sortCol) {
                vm.playerRewardRanking.sortCol = {
                    points: -1,
                    lastUpdate: 1
                }
            } else {
                vm.playerRewardRanking.sortCol.lastUpdate = 1;
            }


            // show
            var sendData = {
                platformObjId: vm.selectedPlatform.id,
                index: isNewSearch ? 0 : vm.playerRewardRanking.index,
                limit: vm.playerRewardRanking.limit || 10,
                sortCol: vm.playerRewardRanking.sortCol || {}
            };

            socketService.$socket($scope.AppSocket, 'getRewardPoints', sendData, function (data) {
                console.log('getRewardPoints', data);
                vm.playerRewardRanking.totalCount = data.data.size;
                vm.drawPlayerRewardPointsTable(
                    data.data.data.map((item, index) => {
                        if (sendData.sortCol.points == -1) {
                            item.ranking = index + sendData.index + 1;
                        } else {
                            item.ranking = vm.playerRewardRanking.totalCount - index - sendData.index;
                        }
                        return item;
                    })
                    , vm.playerRewardRanking.totalCount, {}, isNewSearch)
                $scope.safeApply();
            }, function (err) {
                console.error(err);
            }, true);
        }

        vm.drawPlayerRewardPointsTable = function (data, size, summary, newSearch) {
            var tableOptions = {
                data: data,
                "order": vm.playerRewardRanking.aaSorting || [[3, 'desc']],
                aoColumnDefs: [
                    {'sortCol': 'points', 'aTargets': [3], bSortable: true},
                    // {'sortCol': 'playerName', 'aTargets': [1], bSortable: true},
                    {targets: '_all', defaultContent: ' ', bSortable: false}
                ],
                columns: [
                    {title: $translate('REWARD_POINTS_RANKING'), data: "ranking"},
                    {title: $translate('PLAYER_NAME'), data: "playerName"},
                    {title: $translate('LEVEL'), data: "playerLevel.name"},
                    {title: $translate('REWARD_POINTS_CURRENT'), data: "points"},
                ],
                "paging": false,
            }
            tableOptions = $.extend(true, {}, vm.generalDataTableOptions, tableOptions);
            vm.playerRewardRanking.pageObj.init({maxCount: size}, newSearch);
            var rankingTbl = utilService.createDatatableWithFooter('#rewardRankingTable', tableOptions, {});
            // utilService.setDataTablePageInput('rewardRankingTable', rankingTbl, $translate);

            $('#rewardRankingTable').off('order.dt');
            // $('#rewardRankingTable').off();
            $('#rewardRankingTable').on('order.dt', function (event, a, b) {
                vm.commonSortChangeHandler(a, 'playerRewardRanking', vm.getPlayerRewardPointsRanking);
            });
            $('#rewardRankingTable').resize();
        }

        vm.getPlayerRewardPointsRankingRandom = function (isNewSearch) {
            vm.playerRewardRankingRandom.index = isNewSearch ? 0 : (vm.playerRewardRankingRandom.index || 0);

            if (!vm.playerRewardRankingRandom.sortCol) {
                vm.playerRewardRankingRandom.sortCol = {
                    points: -1,
                    lastUpdate: 1
                }
            } else {
                vm.playerRewardRankingRandom.sortCol.lastUpdate = 1;
            }


            // show
            var sendData = {
                platformObjId: vm.selectedPlatform.id,
                index: isNewSearch ? 0 : vm.playerRewardRankingRandom.index,
                limit: vm.playerRewardRankingRandom.limit || 10,
                sortCol: vm.playerRewardRankingRandom.sortCol || {}
            };

            socketService.$socket($scope.AppSocket, 'getRewardPointsRandom', sendData, function (data) {
                console.log('getRewardPointsRandom', data);
                vm.playerRewardRankingRandom.totalCount = data.data.size;
                vm.playerRandomRankingData = data.data.data;
                vm.drawPlayerRewardPointsRandomTable(
                    data.data.data.map((item, index) => {
                        if (sendData.sortCol.points == -1) {
                            item.ranking = index + sendData.index + 1;
                        } else {
                            item.ranking = vm.playerRewardRankingRandom.totalCount - index - sendData.index;
                        }
                        item.lastUpdate = vm.dateReformat(item.lastUpdate);
                        return item;
                    })
                    , vm.playerRewardRankingRandom.totalCount, {}, isNewSearch)
                $scope.safeApply();
            }, function (err) {
                console.error(err);
            }, true);
        }

        vm.toggleDeleteFakeAcc = function (flag) {
            vm.editFakeAcc = flag;
            vm.drawPlayerRewardPointsRandomTable(
                vm.playerRandomRankingData
                , vm.playerRewardRankingRandom.totalCount, {}, false);
            $scope.safeApply();
        }

        vm.drawPlayerRewardPointsRandomTable = function (data, size, summary, newSearch) {
            var tableOptions = {
                data: data,
                "order": vm.playerRewardRankingRandom.aaSorting || [[4, 'desc']],
                aoColumnDefs: [
                    {'sortCol': 'points', 'aTargets': [4], bSortable: true},
                    // {'sortCol': 'playerName', 'aTargets': [1], bSortable: true},
                    {targets: '_all', defaultContent: ' ', bSortable: false}
                ],
                columns: [
                    {
                        "title": $translate('Multiselect'),
                        bSortable: false,
                        sClass: "randomRankingSelected",
                        render: function (data, type, row) {
                            if (!row.playerObjId) {
                                var link = $('<input>', {
                                    type: 'checkbox',
                                    "data-proposalId": row._id,
                                    class: "transform150"
                                })
                                return link.prop('outerHTML');
                            } else return null;
                        },
                        visible: vm.editFakeAcc
                    },
                    {
                        title: $translate('REWARD_POINTS_RANKING'),
                        data: "ranking",
                        render: function (data, type, row) {
                            var link = $('<p>', {
                                'class': (row.playerObjId ? "" : "text-danger")
                            }).text(data);
                            return link.prop('outerHTML');

                        }
                    },
                    {
                        title: $translate('PLAYER_NAME'),
                        data: "playerName",
                        render: function (data, type, row) {
                            // let perm = (row && row.permission) ? row.permission : {};
                            // var link = $('<a>', {
                            //     'class': (perm.forbidPlayerFromLogin === true ? "text-danger" : "text-primary"),
                            //     'ng-click': 'vm.showPlayerInfoModal("' + data + '")'
                            // }).text(data);
                            var link = $('<p>', {
                                'class': (row.playerObjId ? "" : "text-danger")
                            }).text(data);
                            return link.prop('outerHTML');

                        }
                    },
                    {
                        title: $translate('LEVEL'),
                        data: "playerLevel.name",
                        render: function (data, type, row) {
                            var link = $('<p>', {
                                'class': (row.playerObjId ? "" : "text-danger")
                            }).text(data);
                            return link.prop('outerHTML');

                        }
                    },
                    {
                        title: $translate('REWARD_POINTS_CURRENT'),
                        data: "points",
                        render: function (data, type, row) {
                            var link = $('<p>', {
                                'class': (row.playerObjId ? "" : "text-danger")
                            }).text(data);
                            return link.prop('outerHTML');

                        }
                    },
                    {
                        title: $translate('ACTION_BUTTON'),
                        render: function (data, type, row) {
                            if (!row.playerObjId) {
                                if ($scope.checkViewPermission('Platform', 'rewardPoints', 'Update')) {
                                    var link = $('<a>', {
                                        'ng-click': 'vm.showModalEditRanking(' + JSON.stringify(row) + ')',
                                    }).text($translate('EDIT'));
                                }
                                if ($scope.checkViewPermission('Platform', 'rewardPoints', 'Delete')) {
                                    let link2 = $('<a>', {
                                        'ng-click': 'vm.showModalDeleteRanking(' + JSON.stringify(row) + ')',
                                    }).text($translate('DELETE'));
                                    if (link) {
                                        link.append($('<span>').text(' / '));
                                        link.append(link2);
                                    } else {
                                        var link = link2;
                                    }
                                }
                            } else {
                                var link = $('<a>').text('-');
                            }
                            return link.prop('outerHTML');
                        }
                    },
                    {
                        title: $translate('REMARK'),
                        data: "lastUpdate",
                        render: function (data, type, row) {
                            if (!row.playerObjId) {
                                var link = $('<p>').text($translate(data));
                            } else {
                                var link = $('<p>').text('-');
                            }
                            return link.prop('outerHTML');
                        }
                    },
                ],
                "paging": false,
                dom: "Z<'row'<'col-sm-12'tr>>",
                fnRowCallback: vm.rewardRankingRandomRecord
            }
            tableOptions = $.extend(true, {}, vm.generalDataTableOptions, tableOptions);
            vm.playerRewardRankingRandom.pageObj.init({maxCount: size}, newSearch);
            var rankingTbl = utilService.createDatatableWithFooter('#rewardRankingRandomTable', tableOptions, {});
            // utilService.setDataTablePageInput('rewardRankingTable', rankingTbl, $translate);

            var $checkAll = $(".dataTables_scrollHead thead .randomRankingSelected");
            if ($checkAll.length == 1) {
                var $showBtn = $('<input>', {
                    type: 'checkbox',
                    class: "randomRankingSelected transform150 checkAllRandomData"
                });
                $checkAll.html($showBtn);
                $('.randomRankingSelected.checkAllRandomData').on('click', function () {
                    var $checkAll = $(this) && $(this).length == 1 ? $(this)[0] : null;
                    setCheckAllRandomData($checkAll.checked);
                })
            }

            function setCheckAllRandomData(flag) {
                var s = $("#rewardRankingRandomTable tbody td.randomRankingSelected input").each(function () {
                    $(this).prop("checked", flag);
                });
                vm.updateMultiselectRanking();
            }

            function tableRowClicked(event) {
                if (event.target.tagName == "INPUT" && event.target.type == 'checkbox') {
                    var flagAllChecked = $("#rewardRankingRandomTable tbody td.randomRankingSelected input[type='checkbox']:not(:checked)");
                    $('.randomRankingSelected.checkAllRandomData').prop('checked', flagAllChecked.length == 0);
                    vm.updateMultiselectRanking();
                }
            }

            $('#rewardRankingRandomTable tbody').off('click', "**");
            $('#rewardRankingRandomTable tbody').on('click', 'tr', tableRowClicked);
            $('#rewardRankingRandomTable').off('order.dt');
            // $('#rewardRankingTable').off();
            $('#rewardRankingRandomTable').on('order.dt', function (event, a, b) {
                vm.commonSortChangeHandler(a, 'playerRewardRankingRandom', vm.getPlayerRewardPointsRankingRandom);
            });
            $('#rewardRankingRandomTable').resize();
        }

        vm.updateMultiselectRanking = function () {
            var allClicked = $("#rewardRankingRandomTable tr input:checked[type='checkbox']");
            vm.multiRandomRankingSelected = [];
            if (allClicked.length > 0) {
                allClicked.each(function () {
                    var id = $(this)[0].dataset.proposalid;
                    if (id) {
                        vm.multiRandomRankingSelected.push(id);
                    }
                })
            }
            console.log(vm.multiRandomRankingSelected);
            $scope.safeApply();
        };


        vm.rewardRankingRandomRecord = function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
            $compile(nRow)($scope);
            // $(nRow).on('click', function () {
            // });
        }

        vm.showModalDeleteRanking = function (rowData) {
            vm.selectedRandomRanking = rowData;
            $('#modalDeleteRewardPointsRandom').modal('show');
            $('#modalDeleteRewardPointsRandom').on('shown.bs.modal', function (e) {
                $scope.safeApply();
            });
        }

        vm.deleteRandomRanking = function () {
            let sendData = {
                _id: vm.selectedRandomRanking._id,
                platformObjId: vm.selectedRandomRanking.platformObjId
            }
            socketService.$socket($scope.AppSocket, 'deleteRewardPointsRankingRandom', sendData, function (data) {
                console.log('deleteRandomRanking', data);
                $scope.safeApply();
                vm.getPlayerRewardPointsRankingRandom(true);
            }, function (err) {
                console.error(err);
            }, true);
        }

        vm.deleteMultipleRandomRanking = function () {
            let sendData = {
                playerObjIds: vm.multiRandomRankingSelected
            }
            socketService.$socket($scope.AppSocket, 'deleteMultipleRewardPointsRankingRandom', sendData, function (data) {
                console.log('deleteMultipleRandomRanking', data);
                $scope.safeApply();
                vm.getPlayerRewardPointsRankingRandom(true);
            }, function (err) {
                console.error(err);
            }, true);
        }

        vm.showModalEditRanking = function (rowData) {
            vm.selectedRandomRanking = rowData;
            $('#modalEditRewardPointsRandom').modal('show');
            $('#modalEditRewardPointsRandom').on('shown.bs.modal', function (e) {
                $scope.safeApply();
            });
        }

        vm.editRandomRanking = function () {
            let sendData = {
                _id: vm.selectedRandomRanking._id,
                platformObjId: vm.selectedRandomRanking.platformObjId,
                points: vm.selectedRandomRanking.points,
                playerName: vm.selectedRandomRanking.playerName,
                lastUpdate: Date.now(),
                playerLevel: vm.selectedRandomRanking.playerLevel._id
            }
            socketService.$socket($scope.AppSocket, 'updateRewardPointsRankingRandom', sendData, function (data) {
                console.log('updateRandomRanking', data);
                $scope.safeApply();
                vm.getPlayerRewardPointsRankingRandom(true);
            }, function (err) {
                console.error(err);
            }, true);
        }


        vm.getRewardPointsLvlConfig = () => {
            return $scope.$socketPromise('getRewardPointsLvlConfig', {platformObjId: vm.selectedPlatform.id}).then((data) => {
                vm.rewardPointsLvlConfig = data.data;
                $scope.safeApply();
            });
        };

        vm.rewardPointsLvlConfigSubmit = () => {
            vm.rewardPointsLvlConfig.platformObjId = vm.rewardPointsLvlConfig.platformObjId ? vm.rewardPointsLvlConfig.platformObjId : vm.selectedPlatform.id;
            if (vm.rewardPointsLvlConfig.intervalPeriod == 6) {
                vm.rewardPointsLvlConfig.customPeriodStartTime = vm.rewardPointsLvlConfig.customPeriodStartTime.data('datetimepicker').getLocalDate();
                vm.rewardPointsLvlConfig.customPeriodEndTime = vm.rewardPointsLvlConfig.customPeriodEndTime.data('datetimepicker').getLocalDate();
            } else {
                vm.rewardPointsLvlConfig.customPeriodStartTime = null;
                vm.rewardPointsLvlConfig.customPeriodEndTime = null;
            }
            //if make changes to customPeriodEndTime then set lastRunAutoPeriodTime null
            // OR original rewardPointsLvlConfigPeriod is not custom(6) and changes interval Period to custom
            // FOR auto scheduler determines is it need to run this custom interval period rewardPointsLvlConfig.
            if (vm.oldRewardPointsLvlConfigCustomPeriodEndTime != vm.rewardPointsLvlConfig.customPeriodEndTime ||
                (vm.oldRewardPointsLvlConfigPeriod != 6 && vm.rewardPointsLvlConfig.intervalPeriod == 6)) {
                vm.rewardPointsLvlConfig.lastRunAutoPeriodTime = null;
            }
            $scope.$socketPromise('upsertRewardPointsLvlConfig', {rewardPointsLvlConfig: vm.rewardPointsLvlConfig}).then((data) => {
                vm.rewardPointsLvlConfigPeriodChange();
                vm.rewardPointsLvlConfigSetDisable(true);
                $scope.safeApply();
            });
        };

        vm.rewardPointsLvlConfigPeriodChange = () => {
            if (vm.rewardPointsLvlConfig.intervalPeriod == 6) {
                let startDateId = "#rewardPointsLvlConfigStartDate";
                utilService.actionAfterLoaded(startDateId, function () {

                    let dateValue = vm.rewardPointsLvlConfig.customPeriodStartTime;

                    vm.rewardPointsLvlConfig.customPeriodStartTime = utilService.createDatePicker(startDateId, {
                        language: 'en',
                        format: 'yyyy/MM/dd hh:mm:ss'
                    });
                    vm.rewardPointsLvlConfig.customPeriodStartTime.data('datetimepicker').setDate(utilService.setLocalDayEndTime(new Date()));

                    if (dateValue) {
                        vm.rewardPointsLvlConfig.customPeriodStartTime.data('datetimepicker').setDate(utilService.getLocalTime(new Date(dateValue)));
                    }
                });

                let endDateId = "#rewardPointsLvlConfigEndDate";
                utilService.actionAfterLoaded(endDateId, function () {
                    let dateValue = vm.rewardPointsLvlConfig.customPeriodEndTime;

                    vm.rewardPointsLvlConfig.customPeriodEndTime = utilService.createDatePicker(endDateId, {
                        language: 'en',
                        format: 'yyyy/MM/dd hh:mm:ss'
                    });
                    vm.rewardPointsLvlConfig.customPeriodEndTime.data('datetimepicker').setDate(utilService.setLocalDayEndTime(new Date()));

                    if (dateValue) {
                        vm.rewardPointsLvlConfig.customPeriodEndTime.data('datetimepicker').setDate(utilService.getLocalTime(new Date(dateValue)));
                    }
                });
            }
        };

        vm.rewardPointsLvlConfigSetDisable = (isDisable) => {
            vm.isRewardPointsLvlConfigEditing = !isDisable;
            let startDateId = "#rewardPointsLvlConfigStartDate";
            let endDateId = "#rewardPointsLvlConfigEndDate";
            vm.datetimePickerSetDisable(startDateId, isDisable);
            vm.datetimePickerSetDisable(endDateId, isDisable);
            $scope.safeApply();
            vm.endLoadWeekDay();
        };

        // get id for game provider that are required to manually insert game id in game reward points
        vm.getGameProviderToManuallyInsertGameId = () => {
            let gameProviders = vm.allGameProviders;
            vm.gameProviderManuallyInsertGameId = [];

            gameProviders.forEach(provider => {
                if ((provider.code === 'PTOTHS' && provider.providerId === '18') || (provider.code === 'MGEBET' && provider.providerId === '41') ||
                    (provider.code === 'DTOTHS' && provider.providerId === '45') || (provider.code === 'QTOTHS' && provider.providerId === '46') ||
                    (provider.code === 'BYOTHS' && provider.providerId === '47') || (provider.code === 'ISBSLOTS' && provider.providerId === '57')) {
                    vm.gameProviderManuallyInsertGameId.push(provider._id);
                }
            });
        };

        vm.getRewardPointsEventByCategory = (category) => {
            vm.rewardPointsEvent = [];
            $scope.safeApply();
            return $scope.$socketPromise('getRewardPointsEventByCategory', {
                platformObjId: vm.selectedPlatform.id,
                category: category
            }).then((data) => {
                console.log('getRewardPointsEventByCategory', data.data);
                vm.rewardPointsEvent = data.data;
                $.each(vm.rewardPointsEvent, function (idx, val) {
                    vm.rewardPointsEventPeriodChange(idx, val);
                    vm.rewardPointsEventSetDisable(idx, val, true, true);
                    vm.rewardPointsEventOld.push($.extend(true, {}, val));
                    vm.refreshSPicker();
                });
                $scope.safeApply();
                vm.endLoadWeekDay();
            });
        };

        vm.createRewardPointsEvent = (rewardPointsEvent) => {
            delete rewardPointsEvent.isEditing;
            rewardPointsEvent.platformObjId = vm.selectedPlatform.id;
            if (rewardPointsEvent.period == 6) {
                rewardPointsEvent.customPeriodStartTime = rewardPointsEvent.customPeriodStartTime.data('datetimepicker').getLocalDate();
                rewardPointsEvent.customPeriodEndTime = rewardPointsEvent.customPeriodEndTime.data('datetimepicker').getLocalDate();
            } else {
                delete rewardPointsEvent.customPeriodStartTime;
                delete rewardPointsEvent.customPeriodEndTime;
            }
            console.log(rewardPointsEvent);
            $scope.$socketPromise('createRewardPointsEvent', {rewardPointsEvent: rewardPointsEvent}).then((data) => {
                rewardPointsEvent._id = data.data._id;
            });

        };

        vm.updateRewardPointsEvent = (idx, rewardPointsEvent) => {
            if (rewardPointsEvent.target && !rewardPointsEvent.target.bankType) {
                delete rewardPointsEvent.target.bankType;
            }
            if (rewardPointsEvent.target && !rewardPointsEvent.target.merchantTopupType) {
                delete rewardPointsEvent.target.merchantTopupType;
            }
            if (rewardPointsEvent.target && !rewardPointsEvent.target.depositMethod) {
                delete rewardPointsEvent.target.depositMethod;
            }
            delete rewardPointsEvent.isEditing;
            if (rewardPointsEvent.period == 6) {
                rewardPointsEvent.customPeriodStartTime = rewardPointsEvent.customPeriodStartTime.data('datetimepicker').getLocalDate();
                rewardPointsEvent.customPeriodEndTime = rewardPointsEvent.customPeriodEndTime.data('datetimepicker').getLocalDate();
            } else {
                rewardPointsEvent.customPeriodStartTime = null;
                rewardPointsEvent.customPeriodEndTime = null;
            }
            //Use Object.assign instead of directly use rewardPointsEvent, because datetimePicker input will disappear when add new event to vm.rewardPointsEvent
            $scope.$socketPromise('updateRewardPointsEvent', {rewardPointsEvent: Object.assign({}, rewardPointsEvent)}).then((data) => {
                vm.rewardPointsEventPeriodChange(idx, rewardPointsEvent);
                vm.rewardPointsEventSetDisable(idx, rewardPointsEvent, true, true);
                $scope.safeApply();
                vm.endLoadWeekDay();
            });
        };

        vm.deleteRewardPointsEvent = (rewardPointsEvent) => {
            $scope.$socketPromise('deleteRewardPointsEventById', {_id: rewardPointsEvent._id, category: rewardPointsEvent.category}).then((data) => {
                vm.getRewardPointsEventByCategory(rewardPointsEvent.category);
                $scope.safeApply();
            });
        };

        vm.rewardPointsEventPeriodChange = (idx, rewardPointsEvent) => {
            if (rewardPointsEvent.period == 6) {
                let startDateId = "#rewardPointsEventStartDate-" + idx;
                utilService.actionAfterLoaded(startDateId, function () {

                    let dateValue = rewardPointsEvent.customPeriodStartTime;

                    rewardPointsEvent.customPeriodStartTime = utilService.createDatePicker(startDateId, {
                        language: 'en',
                        format: 'yyyy/MM/dd hh:mm:ss'
                    });
                    rewardPointsEvent.customPeriodStartTime.data('datetimepicker').setDate(utilService.setLocalDayEndTime(new Date()));

                    if (dateValue) {
                        rewardPointsEvent.customPeriodStartTime.data('datetimepicker').setDate(utilService.getLocalTime(new Date(dateValue)));
                    }
                });

                let endDateId = "#rewardPointsEventEndDate-" + idx;
                utilService.actionAfterLoaded(endDateId, function () {
                    let dateValue = rewardPointsEvent.customPeriodEndTime;

                    rewardPointsEvent.customPeriodEndTime = utilService.createDatePicker(endDateId, {
                        language: 'en',
                        format: 'yyyy/MM/dd hh:mm:ss'
                    });
                    rewardPointsEvent.customPeriodEndTime.data('datetimepicker').setDate(utilService.setLocalDayEndTime(new Date()));

                    if (dateValue) {
                        rewardPointsEvent.customPeriodEndTime.data('datetimepicker').setDate(utilService.getLocalTime(new Date(dateValue)));
                    }
                });
            }
        };

        vm.rewardPointsEventSetEditStatusAll = () => {
            for (let x in vm.rewardPointsEvent) {
                vm.rewardPointsEventSetDisable(x, vm.rewardPointsEvent[x], false, true);
            }

            if (vm.rewardPointsEvent.filter(a => a.isEditing == true).length > 0) {
                vm.rewardPointsEventUpdateAll = true;
            } else {
                vm.rewardPointsEventUpdateAll = false;
            }
            vm.refreshSPicker();
        };

        vm.updateAllRewardPointsEvent = () => {
            for (let x in vm.rewardPointsEvent) {
                vm.updateRewardPointsEvent(x, vm.rewardPointsEvent[x]);
                vm.rewardPointsEventSetDisable(x, vm.rewardPointsEvent[x], true, true);
            }

            vm.rewardPointsEventUpdateAll = false;
            $scope.safeApply();
        }

        vm.rewardPointsEventReset = (idx) => {
            console.log(vm.rewardPointsEventOld[idx]);
            vm.rewardPointsEvent[idx] = Object.assign({}, vm.rewardPointsEventOld[idx]);
            vm.refreshSPicker();
        };

        vm.rewardPointsEventSetDisable = (idx, rewardPointsEvent, isDisable, isMultiple) => {
            rewardPointsEvent.isEditing = !isDisable;
            if (rewardPointsEvent.period == 6) {
                let startDateId = "#rewardPointsEventStartDate-" + idx;
                let endDateId = "#rewardPointsEventEndDate-" + idx;
                vm.datetimePickerSetDisable(startDateId, isDisable);
                vm.datetimePickerSetDisable(endDateId, isDisable);
            }
            if (!isMultiple) {
                $scope.safeApply();
                vm.refreshSPicker();
            }
        };

        vm.rewardPointsEventAddNewRow = (rewardPointsEventCategory, otherEventParam = {}) => {
            // userAgent -1 means accept all userAgent
            let defaultEvent = {
                category: rewardPointsEventCategory,
                isEditing: true,
                userAgent: -1,
                level: vm.allPlayerLvl.sort((a, b) => a.value > b.value)[0]._id
            };
            vm.rewardPointsEvent.push(Object.assign(defaultEvent, otherEventParam));
        };

        vm.submitRewardPointsLogQuery = function (newSearch) {
            $('#loadRewardPointsLogIcon').show();
            vm.searchRewardPointsLog(newSearch ? 0 : vm.rewardPointsLogPageAASorting.index, vm.rewardPointsLogPageAASorting.limit).then(
                (data) => {
                    $scope.safeApply();
                    vm.allRewardPointsLog = data;
                    console.log('vm.allRewardPointsLog', vm.allRewardPointsLog);
                    vm.drawRewardPointsLogTable(vm.allRewardPointsLog.data, vm.allRewardPointsLog.size, newSearch, {});
                    $('#loadRewardPointsLogIcon').hide();
                }
            )
        };

        vm.searchRewardPointsLog = (index, limit) => {
            var sendQuery = {
                query: {
                    platformId: vm.selectedPlatform.id
                },
                index: index,
                limit: limit || 10,
                sort: vm.rewardPointsLogPageAASorting.sortCol || {'createTime': -1}
            };
            $.each(vm.rewardPointsLogQuery, function (idx, val) {
                if (val && val != '' && val != 'all') {
                    sendQuery.query[idx] = val;
                }
            });
            delete sendQuery.query.rewardPointsOperator;
            delete sendQuery.query.rewardPointsAmountOne;
            delete sendQuery.query.rewardPointsAmountTwo;
            var rewardPointsOperator = vm.rewardPointsLogQuery.rewardPointsOperator;
            var rewardPointsAmountOne = vm.rewardPointsLogQuery.rewardPointsAmountOne ? vm.rewardPointsLogQuery.rewardPointsAmountOne : 0;
            var rewardPointsAmountTwo = vm.rewardPointsLogQuery.rewardPointsAmountTwo ? vm.rewardPointsLogQuery.rewardPointsAmountTwo : 0;
            if (rewardPointsOperator && $.isNumeric(rewardPointsAmountOne)) {
                switch (rewardPointsOperator) {
                    case '<=':
                        sendQuery.query.amount = {$lte: rewardPointsAmountOne};
                        break;
                    case '>=':
                        sendQuery.query.amount = {$gte: rewardPointsAmountOne};
                        break;
                    case '=':
                        sendQuery.query.amount = rewardPointsAmountOne;
                        break;
                    case 'range':
                        if ($.isNumeric(rewardPointsAmountTwo)) sendQuery.query.amount = {
                            $gte: rewardPointsAmountOne,
                            $lte: rewardPointsAmountTwo
                        };
                        break;
                }
            }

            console.log("rewardPointsLogQuery", sendQuery);
            return $scope.$socketPromise('getRewardPointsLogsQuery', sendQuery).then(
                (data) => data.data
            );

        };

        vm.drawRewardPointsLogTable = function (data, size, newSearch, summary) {
            var showData = [];
            $.each(data, function (i, j) {
                j.createTime$ = utilService.getFormatTime(j.createTime);
                showData.push(j);
            });
            var tableOptions = $.extend({}, vm.generalDataTableOptions, {
                data: showData,
                order: vm.rewardPointsLogPageAASorting || [[11, 'desc']],
                aoColumnDefs: [
                    {'sortCol': 'createTime', bSortable: true, 'aTargets': [11]},
                    {'sortCol': 'amount', bSortable: true, 'aTargets': [9]},
                    {targets: '_all', defaultContent: ' ', bSortable: false}
                ],
                columns: [
                    {title: $translate('Reward Point ID'), data: "pointLogId"},
                    {title: $translate('Proposal Creator'), data: "creator"},
                    {
                        title: $translate('Reward Points Type'), data: "category",
                        render: function (data, type, row) {
                            return $translate($scope.constRewardPointsLogCategory[row.category]);
                        }
                    },
                    {
                        title: $translate('Reward Title'), data: "rewardTitle",
                        render: function (data, type, row) {
                            return row.rewardTitle ? row.rewardTitle : "-";
                        }
                    },
                    {
                        title: $translate('userAgent'), data: "userAgent",
                        render: function (data, type, row) {
                            return $translate($scope.constPlayerRegistrationInterface[row.userAgent]);
                        }
                    },
                    {
                        title: $translate('Proposal Status'), data: "status",
                        render: function (data, type, row) {
                            return $translate($scope.constRewardPointsLogStatus[row.status]);
                        }
                    },
                    {title: $translate('Member Account'), data: "playerName"},
                    {title: $translate('beforeChangeRewardPoint'), data: "oldPoints"},
                    {title: $translate('afterChangeRewardPoint'), data: "newPoints"},
                    {title: $translate('Reward Point Variable'), data: "amount", bSortable: true},
                    {
                        title: $translate('dailyMaxRewardPoint'), data: "maxDayApplyAmount",
                        render: function (data, type, row) {
                            return row.currentDayAppliedAmount != null && row.maxDayApplyAmount ? row.currentDayAppliedAmount + "/" + row.maxDayApplyAmount : "-";
                        }
                    },
                    {title: $translate('createTime'), data: "createTime$", bSortable: true},
                    {
                        title: $translate('playerLevelName'), data: "playerLevelName",
                        render: function (data, type, row) {
                            return $translate(row.playerLevelName);
                        }
                    },
                    {
                        title: $translate('remark'), data: "remark",
                        render: function (data, type, row) {
                            return row.remark.replace('Proposal No', $translate('Proposal No'));
                        }
                    },
                    {
                        title: $translate('detail'),
                        render: function (data, type, row) {
                            var $a = $('<a>', {
                                'ng-click': "vm.prepareShowRewardPointsLogDetail(" + JSON.stringify(row) + ")"
                            }).text($translate('detail'));
                            // $compile($a.prop('outerHTML'))($scope);
                            return $a.prop('outerHTML');
                        },
                        "fnCreatedCell": function (nTd, sData, oData, iRow, iCol) {
                            $compile(nTd)($scope)
                        }
                    },
                ],
                "paging": false,
            });
            var aTable = utilService.createDatatableWithFooter("#allRewardPointsTable", tableOptions, summary, true);
            vm.rewardPointsLogPageObjs.allRewardPoints.init({maxCount: size}, newSearch);
            $("#allRewardPointsTable").off('order.dt');
            $("#allRewardPointsTable").on('order.dt', function (event, a, b) {
                vm.commonSortChangeHandler(a, 'rewardPointsLogPageAASorting', vm.submitRewardPointsLogQuery);
            });

            $scope.safeApply();
            aTable.columns.adjust().draw();
            $("#allRewardPointsTable").resize();
        };

        vm.prepareShowRewardPointsLogDetail = (rewardPointsLog) => {
            rewardPointsLog.category = $scope.constRewardPointsLogCategory[rewardPointsLog.category];
            rewardPointsLog.status = $scope.constRewardPointsLogStatus[rewardPointsLog.status];
            rewardPointsLog.remark = rewardPointsLog.remark.replace('Proposal No', $translate('Proposal No'));
            $scope.$socketPromise('getProposal', {'proposalId': rewardPointsLog.proposalId}).then(
                (data) => {
                    rewardPointsLog.proposal = data.data;
                    vm.rewardPointsLogDetail = rewardPointsLog;
                    console.log(rewardPointsLog);
                    $('#modalRewardPointsLogDetail').modal();
                    $scope.safeApply();
                }
            );
        };

        vm.datetimePickerSetDisable = (eleId, isDisable) => {
            utilService.actionAfterLoaded(eleId, () => {
                $(eleId + " :input").prop("disabled", isDisable);
                //fix disable datetimepicker, calendar icon still clickable
                $(eleId + " :input~*").toggle(!isDisable);
            });
        };

        vm.convertPlayerRewardPoints = () => {
            var sendData = {
                playerId: vm.isOneSelectedPlayer().playerId,
                convertRewardPointsAmount: vm.rewardPointsConvert.updateAmount,
                remark: vm.rewardPointsConvert.remark
            };
            socketService.$socket($scope.AppSocket, 'convertRewardPointsToCredit', sendData, function (data) {
                console.log('convertRewardPointsToCredit', data.data);
                vm.getPlatformPlayersData();
                $scope.safeApply();
            });
        };

        function loadDelayDurationGroup() {
            vm.selectedDelayDurationGroup = null;

            vm.getDelayDurationGroup();
        }

        vm.showProposalModalNoObjId = function (proposalId, templateNo) {
            socketService.$socket($scope.AppSocket, 'getPlatformProposal', {
                platformId: vm.selectedPlatform.id,
                proposalId: proposalId
            }, function (data) {
                vm.selectedProposal = data.data;
                vm.proposalDetailStyle = {};

                vm.selectedProposal.data = commonService.setFixedPropDetail($scope, $translate, $noRoundTwoDecimalPlaces, vm);

                if (vm.selectedProposal.data.inputData) {
                    if (vm.selectedProposal.data.inputData.provinceId) {
                        // vm.getProvinceName(vm.selectedProposal.data.inputData.provinceId)
                        commonService.getProvinceName($scope, vm.selectedProposal.data.inputData.provinceId).catch(err => Promise.resolve('')).then(data => {
                            vm.selectedProposal.data.provinceName = data;
                        });
                    }
                    if (vm.selectedProposal.data.inputData.cityId) {
                        // vm.getCityName(vm.selectedProposal.data.inputData.cityId)
                        commonService.getCityName($scope, vm.selectedProposal.data.inputData.cityId).catch(err => Promise.resolve('')).then(data => {
                            vm.selectedProposal.data.cityName = data;
                        });
                    }
                } else {
                    if (vm.selectedProposal.data["RECEIVE_BANK_ACC_PROVINCE"]) {
                        // vm.getProvinceName(vm.selectedProposal.data["RECEIVE_BANK_ACC_PROVINCE"], "RECEIVE_BANK_ACC_PROVINCE")
                        commonService.getProvinceName($scope, vm.selectedProposal.data["RECEIVE_BANK_ACC_PROVINCE"]).catch(err => Promise.resolve('')).then(data => {
                            vm.selectedProposal.data["RECEIVE_BANK_ACC_PROVINCE" ] = data ? data : vm.selectedProposal.data["RECEIVE_BANK_ACC_PROVINCE" ];
                        });
                    }
                    if (vm.selectedProposal.data["RECEIVE_BANK_ACC_CITY"]) {
                        // vm.getCityName(vm.selectedProposal.data["RECEIVE_BANK_ACC_CITY"], "RECEIVE_BANK_ACC_CITY")
                        commonService.getCityName($scope, vm.selectedProposal.data["RECEIVE_BANK_ACC_CITY"]).catch(err => Promise.resolve('')).then(data => {
                            vm.selectedProposal.data["RECEIVE_BANK_ACC_CITY"] = data ? data : vm.selectedProposal.data["RECEIVE_BANK_ACC_CITY"];
                        });
                    }
                }

                if ( vm.selectedProposal.mainType && vm.selectedProposal.mainType == "PlayerBonus" && vm.selectedProposal.status && vm.selectedProposal.status == 'Approved' ) {
                    vm.selectedProposal.status = 'approved';
                }

                let proposalDetail = $.extend({}, vm.selectedProposal.data);
                let checkForHexRegExp = new RegExp("^[0-9a-fA-F]{24}$");
                for (let i in proposalDetail) {
                    if (checkForHexRegExp.test(proposalDetail[i])) {
                        delete proposalDetail[i];
                    }
                }
                vm.selectedProposal.data = $.extend({}, proposalDetail);
                let tmpt = vm.proposalTemplate[templateNo];
                $(tmpt).modal('show');
                if (templateNo == 1) {
                    $(tmpt).css('z-Index', 1051).modal();
                }

                $(tmpt).on('shown.bs.modal', function (e) {
                    $scope.safeApply();
                })
            })
        };

        vm.copyTopUpProposal = function () {
            if (vm.selectedProposal && vm.selectedProposal.data) {
                commonService.copyObjToText($translate, vm.selectedProposal.data, "REMARKS","modalProposal");
            }
        }

        vm.showCopyProposal = function () {
            if (vm.selectedProposal && vm.selectedProposal.mainType && vm.selectedProposal.mainType == "TopUp" && vm.selectedProposal.data) {
                return true;
            };
            return false;
        }

        vm.showProposalModal = function (proposalId, templateNo) {
            socketService.$socket($scope.AppSocket, 'getPlatformProposal', {
                platformId: vm.selectedPlatform.id,
                proposalId: proposalId
            }, function (data) {
                vm.selectedProposal = data.data;
                vm.proposalDetailStyle = {};

                vm.selectedProposal.data = commonService.setFixedPropDetail($scope, $translate, $noRoundTwoDecimalPlaces, vm);

                if (vm.selectedProposal && vm.selectedProposal.data) {
                    delete vm.selectedProposal.data.betAmount;
                    delete vm.selectedProposal.data.betTime;
                    delete vm.selectedProposal.data.winAmount;
                    delete vm.selectedProposal.data.winTimes;
                }

                if (vm.selectedProposal.data.inputData) {
                    if (vm.selectedProposal.data.inputData.provinceId) {
                        //vm.getProvinceName(vm.selectedProposal.data.inputData.provinceId)
                        commonService.getProvinceName($scope, vm.selectedProposal.data.inputData.provinceId).catch(err => Promise.resolve('')).then(data => {
                            vm.selectedProposal.data.provinceName = data;
                        });
                    }
                    if (vm.selectedProposal.data.inputData.cityId) {
                        //vm.getCityName(vm.selectedProposal.data.inputData.cityId)
                        commonService.getCityName($scope, vm.selectedProposal.data.inputData.cityId).catch(err => Promise.resolve('')).then(data => {
                            vm.selectedProposal.data.cityName = data;
                        });
                    }
                } else {
                    if (vm.selectedProposal.data["RECEIVE_BANK_ACC_PROVINCE"]) {
                        //vm.getProvinceName(vm.selectedProposal.data["RECEIVE_BANK_ACC_PROVINCE"], "RECEIVE_BANK_ACC_PROVINCE")
                        commonService.getProvinceName($scope, vm.selectedProposal.data["RECEIVE_BANK_ACC_PROVINCE"]).catch(err => Promise.resolve('')).then(data => {
                            vm.selectedProposal.data["RECEIVE_BANK_ACC_PROVINCE" ] = data ? data : vm.selectedProposal.data["RECEIVE_BANK_ACC_PROVINCE" ];
                        });
                    }
                    if (vm.selectedProposal.data["RECEIVE_BANK_ACC_CITY"]) {
                        //vm.getCityName(vm.selectedProposal.data["RECEIVE_BANK_ACC_CITY"], "RECEIVE_BANK_ACC_CITY")
                        commonService.getCityName($scope, vm.selectedProposal.data["RECEIVE_BANK_ACC_CITY"]).catch(err => Promise.resolve('')).then(data => {
                            vm.selectedProposal.data["RECEIVE_BANK_ACC_CITY"] = data ? data : vm.selectedProposal.data["RECEIVE_BANK_ACC_CITY"];
                        });
                    }
                }

                if ( vm.selectedProposal.mainType && vm.selectedProposal.mainType == "PlayerBonus" && vm.selectedProposal.status && vm.selectedProposal.status == 'Approved' ) {
                    vm.selectedProposal.status = 'approved';
                }

                let tmpt = vm.proposalTemplate[templateNo];
                $(tmpt).modal('show');
                if (templateNo == 1) {
                    $(tmpt).css('z-Index', 1051).modal();
                }

                $(tmpt).on('shown.bs.modal', function (e) {
                    $scope.safeApply();
                })


            })
        };

        vm.getProvinceName = function (provinceId, fieldName) {
            socketService.$socket($scope.AppSocket, "getProvince", {provinceId: provinceId}, function (data) {
                let text = data.data.province ? data.data.province.name : '';
                if (text) {
                    if (fieldName) {
                        vm.selectedProposal.data[fieldName] = text;
                    } else {
                        vm.selectedProposal.data.provinceName = text;
                    }
                }
            });
        }

        vm.getCityName = function (cityId, fieldName) {
            socketService.$socket($scope.AppSocket, "getCity", {cityId: cityId}, function (data) {
                let text = data.data.city ? data.data.city.name : '';
                if (text) {
                    if (fieldName) {
                        vm.selectedProposal.data[fieldName] = text;
                    } else {
                        vm.selectedProposal.data.cityName = text;
                    }
                }
            });
        }

        vm.showNewPlayerModal = function (data, templateNo) {
            vm.newPlayerProposal = data;

            if (vm.newPlayerProposal.status === "Success" || vm.newPlayerProposal.status === "Manual" || vm.newPlayerProposal.status === "NoVerify") {
                if (vm.newPlayerProposal.data && vm.newPlayerProposal.data.phoneNumber) {
                    let str = vm.newPlayerProposal.data.phoneNumber;
                    vm.newPlayerProposal.data.phoneNumber = str.substring(0, 3) + "******" + str.slice(-4);
                }
            }

            // requirement by echo
            // 1.同账号 不同手机号尝试开户；
            // 2.同账号 同一手机号，
            // 3. 不同账号 同一手机号
            // 这三种情况，只要开户成功了，之前的历史记录都隐藏
            // need to encode phone num for older proposal with attempt (pending) status, if this new player has already successful open account
            if (vm.newPlayerProposal.status === "Pending" && (vm.newPlayerRecordsSuccessNames.includes(vm.newPlayerProposal.name) || vm.newPlayerRecordsSuccessPhone.includes(vm.newPlayerProposal.data.phoneNumber))) {
                if (vm.newPlayerProposal.data && vm.newPlayerProposal.data.phoneNumber) {
                    let str = vm.newPlayerProposal.data.phoneNumber;
                    vm.newPlayerProposal.data.phoneNumber = str.substring(0, 3) + "******" + str.slice(-4);
                }
            }
            let tmpt = vm.proposalTemplate[templateNo];
            $(tmpt).modal('show');
        };

        vm.telToPlayer = function (data) {
            $scope.$evalAsync(() => {
                let phoneCall = {
                    playerId: data.data.playerId || '',
                    name: data.data.playerName || '',
                    toText: data.data.playerName || '',
                    platform: "jinshihao",
                    loadingNumber: true,
                }

                $scope.initPhoneCall(phoneCall);
                $scope.phoneCall.phone = data.data.updateData.phoneNumber;
                $scope.phoneCall.loadingNumber = false;
                $scope.makePhoneCall(vm.selectedPlatform.data.platformId);
            });
        };

        // display  proposal detail
        vm.showProposalDetailField = function (obj, fieldName, val) {
            if (!obj) return '';
            var result = val || val === false ? val.toString() : (val === 0) ? "0" : "";
            if (obj.type.name === "UpdatePlayerPhone" && (fieldName === "updateData" || fieldName === "curData")) {
                var str = val.phoneNumber
                if (obj && obj.status && obj.status == 'Pending' && fieldName == 'updateData') {
                    var $link = $('<a>', {
                        class: 'a telToPlayerBtn',
                        text: val.phoneNumber,
                        'data-proposal': JSON.stringify(obj),
                    });
                    utilService.actionAfterLoaded(".telToPlayerBtn", function () {
                        $('#ProposalDetail .telToPlayerBtn').off('click');
                        $('#ProposalDetail .telToPlayerBtn').on('click', function () {
                            var $tr = $(this).closest('tr');
                            vm.telToPlayer(obj);
                        })
                    });

                    result = $link.prop('outerHTML');
                } else {
                    result = val.phoneNumber; //str.substring(0, 3) + "******" + str.slice(-4);
                }
            } else if (obj.status === "Expired" && fieldName === "validTime") {
                var $time = $('<div>', {
                    class: 'inlineBlk margin-right-5'
                }).text(utilService.getFormatTime(val));
                var $btn = $('<button>', {
                    class: 'btn common-button btn-primary delayTopupExpireDate',
                    text: $translate('Delay'),
                    'data-proposal': JSON.stringify(obj),
                });
                utilService.actionAfterLoaded(".delayTopupExpireDate", function () {
                    $('#ProposalDetail .delayTopupExpireDate').off('click');
                    $('#ProposalDetail .delayTopupExpireDate').on('click', function () {
                        var $tr = $(this).closest('tr');
                        vm.delayTopupExpirDate(obj, function (newData) {
                            $tr.find('td:nth-child(2)').first().text(utilService.getFormatTime(newData.newValidTime));
                            vm.needRefreshTable = true;
                            $scope.safeApply();
                        });
                    })
                });
                result = $time.prop('outerHTML') + $btn.prop('outerHTML');
            } else if (fieldName.indexOf('providerId') > -1 || fieldName.indexOf('targetProviders') > -1) {
                result = val ? val.map(item => {
                    return vm.getProviderText(item);
                }) : '';
                result = result.join(',');
            } else if (fieldName.indexOf('providerGroup') > -1) {
                result = vm.getProviderGroupNameById(val);
            } else if ((fieldName.indexOf('time') > -1 || fieldName.indexOf('Time') > -1) && val) {
                result = utilService.getFormatTime(val);
            } else if ((fieldName.indexOf('amount') > -1 || fieldName.indexOf('Amount') > -1) && val) {
                result = Number.isFinite(parseFloat(val)) ? $noRoundTwoDecimalPlaces(parseFloat(val)).toString() : val;
            } else if (fieldName == 'bankAccountType') {
                switch (parseInt(val)) {
                    case 1:
                        result = $translate('Credit Card');
                        break;
                    case 2:
                        result = $translate('Debit Card');
                        break;
                    case 3:
                        result = "储存卡";
                        break;
                    case 4:
                        result = "储蓄卡";
                        break;
                    case 5:
                        result = "商务理财卡";
                        break;
                    case 6:
                        result = "工商银行一卡通";
                        break;
                    default:
                        result = val;
                        break;
                }
            } else if (fieldName == 'clientType') {
                result = $translate($scope.merchantTargetDeviceJson[val]);
            } else if (fieldName == 'merchantUseType') {
                result = $translate($scope.merchantUseTypeJson[val])
            } else if (fieldName == 'topupType') {
                result = $translate($scope.merchantTopupTypeJson[val])
            } else if (fieldName == 'periodType') {
                result = $translate(firstTopUpPeriodTypeJson[val])
            } else if (fieldName == 'playerId' && val && val.playerId && val.name) {
                result = val.playerId;
                vm.selectedProposalDetailForDisplay.playerName = val.name;
            } else if (fieldName == 'bankTypeId' || fieldName == 'bankCardType' || fieldName == 'bankName') {
                result = vm.allBankTypeList[val] || (val + " ! " + $translate("not in bank type list"));
            } else if (fieldName == 'depositMethod') {
                result = $translate(vm.getDepositMethodbyId[val])
            } else if (fieldName === 'playerStatus') {
                result = $translate($scope.constPlayerStatus[val]);

            } else if (fieldName == 'allowedProviders') {

                let providerName = '';
                for (var v in val) {
                    providerName += val[v].name + ', ';
                }
                result = providerName;
            } else if (fieldName === 'proposalPlayerLevel') {
                result = $translate(val);
            } else if (fieldName === 'applyForDate') {
                result = new Date(val).toLocaleDateString("en-US", {timeZone: "Asia/Singapore"});
            } else if (fieldName === 'DOB') {
                result = commonService.convertDOBDateFormat(val);
            } else if (fieldName === 'returnDetail') {
                // Example data structure : {"GameType:9" : {"ratio" : 0.01, "consumeValidAmount" : 6000}}
                let newReturnDetail = {};
                Object.keys(val).forEach(
                    key => {
                        if (key && key.indexOf(':') != -1) {
                            let splitGameTypeIdArr = key.split(':');
                            let gameTypeId = splitGameTypeIdArr[1];
                            newReturnDetail[splitGameTypeIdArr[0] + ':' + vm.allGameTypes[gameTypeId]] = val[key];
                        }
                    });
                result = JSON.stringify(newReturnDetail || val)
                    .replace(new RegExp('GameType', "gm"), $translate('GameType'))
                    .replace(new RegExp('ratio', 'gm'), $translate('RATIO'))
                    .replace(new RegExp('consumeValidAmount', "gm"), $translate('consumeValidAmount'));
            } else if (fieldName === 'nonXIMADetail') {
                let newNonXIMADetail = {};
                Object.keys(val).forEach(
                    key => {
                        if (key && key.indexOf(':') != -1) {
                            let splitGameTypeIdArr = key.split(':');
                            let gameTypeId = splitGameTypeIdArr[1];
                            newNonXIMADetail[splitGameTypeIdArr[0] + ':' + vm.allGameTypes[gameTypeId]] = val[key];
                        }
                    });
                result = JSON.stringify(newNonXIMADetail || val)
                    .replace(new RegExp('GameType', "gm"), $translate('GameType'))
                    .replace(new RegExp('nonXIMAAmt', "gm"), $translate('totalNonXIMAAmt'));
            } else if (typeof(val) == 'object') {
                result = JSON.stringify(val);
            } else if (fieldName === "upOrDown") {
                result = $translate(val);
            } else if (fieldName === 'definePlayerLoginMode') {
                result = $translate($scope.playerLoginMode[val]);
            } else if (fieldName === 'rewardInterval') {
                result = $translate($scope.rewardInterval[val]);
            } else if (fieldName === 'gameProviderInEvent') {
                let index = vm.allGameProviders.findIndex(p => p._id.toString() == val.toString());
                if (index != -1){
                    result =  vm.allGameProviders[index].name;
                }
            }

            return $sce.trustAsHtml(result);
        };
        // end iof proposal detail

        // If any of the levels are holding the old data structure, migrate them to the new data structure.
        // (This code can be removed in the future.)
        function migratePlayerLevels() {
            var aLevelWasChanged = false;

            vm.allPlayerLvl.forEach(function (playerLevel) {
                if (!playerLevel.levelUpConfig || playerLevel.levelUpConfig.length === 0) {
                    console.log('Migrating playerLevel to new structure:', JSON.stringify(playerLevel));
                    // Provide a default levelUpConfig, otherwise the level will not appear in the list!
                    playerLevel.levelUpConfig = [
                        {
                            topupLimit: playerLevel.topupLimit,
                            topupPeriod: playerLevel.topupPeriod || 'NONE',
                            consumptionLimit: playerLevel.consumptionLimit,
                            consumptionPeriod: playerLevel.consumptionPeriod || 'NONE',
                        }
                    ];
                    delete playerLevel.topUpLimit;
                    delete playerLevel.topupPeriod;
                    delete playerLevel.consumptionLimit;
                    delete playerLevel.consumptionPeriod;
                    aLevelWasChanged = true;
                }
                if (!playerLevel.levelDownConfig || playerLevel.levelDownConfig.length === 0) {
                    playerLevel.levelDownConfig = [
                        {
                            topupMinimum: 0,
                            topupPeriod: 'NONE',
                            consumptionMinimum: 0,
                            consumptionPeriod: 'NONE',
                        }
                    ];
                    aLevelWasChanged = true;
                    console.log('Done migration:', JSON.stringify(playerLevel));
                }
            });
        };

        vm.saveDelayDurationGroup = function (isDelete, index) {
            console.log('durationGroupConfig', vm.durationGroupConfig);

            let sendData = {
                platformObjId: vm.selectedPlatform.id,
                groupData: vm.durationGroupConfig
            };

            socketService.$socket($scope.AppSocket, 'saveDelayDurationGroup', sendData);
        };

        vm.getDelayDurationGroup = function () {
            socketService.$socket($scope.AppSocket, 'getDelayDurationGroup', {platformObjId: vm.selectedPlatform.id}, function (data) {
                console.log('getDelayDurationGroup', data);

                if (data.data[0].consumptionTimeConfig) {
                    vm.durationGroupConfig = data.data[0].consumptionTimeConfig;
                    $scope.safeApply();
                }

            });
        }

        vm.getAllPartnerLevels = function () {
            if (!authService.checkViewPermission('Partner', 'Partner', 'Read')) {
                return;
            }
            return $scope.$socketPromise(commonAPIs.partnerLevel.getByPlatform, {platformId: vm.selectedPlatform.id})
                .then(function (data) {
                    vm.allPartnerLevels = data.data;
                    vm.allPartnerLevels.sort(function (a, b) {
                        return a.value > b.value;
                    });
                    vm.allPartnerLevelsByName = Lodash.keyBy(vm.allPartnerLevels, 'name');
                });
        };

        vm.getProviderNameById = function (providerObjIdArr) {
            let providerString = "";
            for (let i = 0; i < providerObjIdArr.length; i++) {
                vm.allProviders.forEach(provider => {
                    if (providerObjIdArr[i].toString() == provider._id.toString()) {
                        if (providerString) {
                            providerString += ", ";
                        }
                        providerString += provider.name;
                    }
                })
            }
            if (!providerString) {
                providerString = $translate("EMPTY_SELECT");
            }
            return providerString;
        }

        vm.getAllPlayerLevels = function () {
            vm.playerIDArr = [];
            vm.autoCheckPlayerLevelUp = null;
            vm.manualPlayerLevelUp = null;
            return $scope.$socketPromise('getPlayerLevelByPlatformId', {platformId: vm.selectedPlatform.id})
                .then(function (data) {
                    $scope.$evalAsync(() => {
                        vm.playerLevelPeriod = {};
                        vm.allPlayerLvl = data.data;
                        vm.platformBatchLevelUp = true;
                        vm.autoCheckPlayerLevelUp = vm.selectedPlatform.data.autoCheckPlayerLevelUp;
                        vm.manualPlayerLevelUp = vm.selectedPlatform.data.manualPlayerLevelUp;
                        vm.playerLevelPeriod.playerLevelUpPeriod = vm.selectedPlatform.data.playerLevelUpPeriod ? vm.selectedPlatform.data.playerLevelUpPeriod : vm.allPlayerLevelUpPeriod.MONTH;
                        vm.playerLevelPeriod.playerLevelDownPeriod = vm.selectedPlatform.data.playerLevelDownPeriod ? vm.selectedPlatform.data.playerLevelDownPeriod : vm.allPlayerLevelUpPeriod.MONTH;
                        vm.allPlayerLvlReordered = false;
                        vm.sortPlayerLevels();
                        console.log("vm.allPlayerLvl", data.data);
                        vm.playerLvlData = {};
                        if (vm.allPlayerLvl) {
                            $.each(vm.allPlayerLvl, function (i, v) {
                                vm.playerIDArr.push(v._id);
                                vm.playerLvlData[v._id] = v;
                            })
                        }
                        vm.playerLevelPeriod.levelUpPeriodName = vm.getPlayerLevelUpPeriodName(vm.playerLevelPeriod.playerLevelUpPeriod);
                        vm.playerLevelPeriod.levelDownPeriodName = vm.getPlayerLevelUpPeriodName(vm.playerLevelPeriod.playerLevelDownPeriod);
                        vm.initiateLevelDownPeriodAllField();
                    })
                });
        };

        vm.getAllPlayerLevelByAllPlatform = function() {
            return $scope.$socketPromise('getPlayerLevelByAllPlatforms', {}).then(
                data => {
                    $scope.$evalAsync(() => {
                        if(data && data.data){
                            vm.playerLevelByAllPlatform = data.data;
                        }
                    });
                }
            )
        };

        vm.getPlayerLevelUpPeriodName = function (value) {
            let name = '';
            for (let i = 0; i < Object.keys(vm.allPlayerLevelUpPeriod).length; i++) {
                if (vm.allPlayerLevelUpPeriod[Object.keys(vm.allPlayerLevelUpPeriod)[i]] == value) {
                    name = Object.keys(vm.allPlayerLevelUpPeriod)[i];
                    break;
                }
            }
            return name;
        }

        //force change all field (follow period setting)
        vm.changeLevelPeriodAllField = function () {
            for (let i = 0; i < vm.allPlayerLvl.length; i++) {
                for (let j = 0; j < vm.allPlayerLvl[i].levelDownConfig.length; j++) {
                    vm.allPlayerLvl[i].levelDownConfig[j].consumptionPeriod = vm.playerLevelPeriod.levelDownPeriodName;
                    vm.allPlayerLvl[i].levelDownConfig[j].topupPeriod = vm.playerLevelPeriod.levelDownPeriodName;
                }
                for (let k = 0; k < vm.allPlayerLvl[i].levelUpConfig.length; k++) {
                    vm.allPlayerLvl[i].levelUpConfig[k].consumptionPeriod = vm.playerLevelPeriod.levelUpPeriodName;
                    vm.allPlayerLvl[i].levelUpConfig[k].topupPeriod = vm.playerLevelPeriod.levelUpPeriodName;
                }
            }
        }

        //initiate level down period field
        vm.initiateLevelDownPeriodAllField = function () {
            for (let i = 0; i < vm.allPlayerLvl.length; i++) {
                for (let j = 0; j < vm.allPlayerLvl[i].levelDownConfig.length; j++) {
                    vm.allPlayerLvl[i].levelDownConfig[j].consumptionPeriod = vm.playerLevelPeriod.levelDownPeriodName;
                    vm.allPlayerLvl[i].levelDownConfig[j].topupPeriod = vm.playerLevelPeriod.levelDownPeriodName;
                }
            }
        }

        vm.sortPlayerLevels = function () {
            vm.allPlayerLvl.sort((a, b) => a.value - b.value);
        };

        vm.getPartnerLevelConfig = function () {
            return $scope.$socketPromise('getPartnerLevelConfig', {platform: vm.selectedPlatform.id})
                .then(function (data) {
                    vm.partnerLevelConfig = data.data[0];
                    console.log("vm.partnerLevelConfig", data.data[0]);
                    $scope.safeApply();
                });
        };

        vm.initNewPlayerLvl = function () {
            var period = vm.playerLvlPeriod.NONE;
            vm.newPlayerLevelUpConfig = [{
                topupLimit: 1,
                topupPeriod: vm.playerLevelPeriod.levelUpPeriodName,
                consumptionLimit: 1,
                consumptionPeriod: vm.playerLevelPeriod.levelUpPeriodName,
                andConditions: true,
                consumptionSourceProviderId: []
            }];

            vm.newPlayerLvl = {
                name: "请更改名称",
                value: vm.allPlayerLvl.length,
                levelUpConfig: vm.newPlayerLevelUpConfig,
                levelDownConfig: [{
                    // topupMinimum: 1,
                    // topupPeriod: period,
                    topupPeriod: vm.playerLevelPeriod.levelDownPeriodName,
                    // consumptionMinimum: 1,
                    // consumptionPeriod: period,
                    consumptionPeriod: vm.playerLevelPeriod.levelDownPeriodName
                }]
            };
        }
        vm.configAddPlayerLevelValid = function () {
            //up level condition check
            var upLevelConditionValid = true;
            var obj = vm.newPlayerLvl.levelUpConfig[0];
            if (obj.topupLimit == undefined) {
                upLevelConditionValid = false;
            } else if (obj.consumptionLimit == undefined) {
                upLevelConditionValid = false;
            }
            //down level condition check
            var downLevelConditionValid = true;
            var obj = vm.newPlayerLvl.levelDownConfig[0];
            if (obj.topupMinimum && (!obj.topupPeriod || obj.topupPeriod == "NONE")) {
                downLevelConditionValid = false;
            } else if (obj.consumptionMinimum && (!obj.consumptionPeriod || obj.consumptionPeriod == "NONE")) {
                downLevelConditionValid = false;
            }
            return upLevelConditionValid && downLevelConditionValid;
        }
        vm.configPlayerLevelTableIsValid = function () {
            var hasDefaultLevel = vm.configPlayerLevelTableHasDefaultLevel();
            var downLevelConditionValid = true;
            vm.allPlayerLvl.forEach(level => {
                if (level.levelDownConfig) {
                    level.levelDownConfig.forEach(oneConfig => {
                        if (oneConfig.topupMinimum && (!oneConfig.topupPeriod || oneConfig.topupPeriod == "NONE")) {
                            downLevelConditionValid = false;
                        } else if (oneConfig.consumptionMinimum && (!oneConfig.consumptionPeriod || oneConfig.consumptionPeriod == "NONE")) {
                            downLevelConditionValid = false;
                        }
                    });
                }
            })

            // TAG_MIX_PERIOD_OR_TOO_COMPLEX
            var hasBadLevelDownCondition = vm.allPlayerLvl.some(
                level => level.levelDownConfig.some(vm.levelDownConditionIsTooComplex)
            );

            return hasDefaultLevel && !hasBadLevelDownCondition && downLevelConditionValid;
        };
        vm.configPlayerLevelTableHasDefaultLevel = function () {
            return vm.allPlayerLvl.some(lvl => lvl.value === 0);
        };
        // TAG_MIX_PERIOD_OR_TOO_COMPLEX
        vm.levelDownConditionIsTooComplex = function (conditionSet) {
            const topupPeriod = conditionSet.topupPeriod;
            const consumptionPeriod = conditionSet.consumptionPeriod;
            return !conditionSet.andConditions && (topupPeriod + consumptionPeriod === "DAYWEEK" || topupPeriod + consumptionPeriod === "WEEKDAY");
        };

        vm.focusNewPlayerLevelUI = function () {
            $scope.safeApply();
            setTimeout(function () {
                $('#newPlayerLevelFirstInput').focus();
            }, 1);
        };

        vm.initPlayerLevelPeriod = function () {
            if (vm.playerLevelPeriod && vm.playerLevelPeriod.playerLevelUpPeriod) {
                vm.playerLevelByMaxPeriod = {};

                switch (vm.playerLevelPeriod.playerLevelUpPeriod) {
                    case 1:
                        vm.playerLevelByMaxPeriod.DAY = "DAY";
                        break;
                    case 2:
                        vm.playerLevelByMaxPeriod.DAY = "DAY";
                        vm.playerLevelByMaxPeriod.WEEK = "WEEK";
                        break;
                    case 3:
                        vm.playerLevelByMaxPeriod.DAY = "DAY";
                        vm.playerLevelByMaxPeriod.WEEK = "WEEK";
                        vm.playerLevelByMaxPeriod.MONTH = "MONTH";
                        break;
                }

            }
        };
        // player level codes==============end===============================

        vm.downloadTranslationCSV = function () {
            vm.prepareTranslationCSV = false;
            let platformId = vm.selectedPlatform.data.platformId;

            socketService.$socket($scope.AppSocket, 'downloadTranslationCSV', {platformId: platformId}, function (data) {
                vm.fileNameCSV = "ch_SP" + "_" + platformId;
                vm.prepareTranslationCSV = true;
                vm.exportTranslationCSV = data.data;
                $scope.safeApply();
            });
        };

        vm.validateNumber = function (value, fieldName, idx) {
            var rgx = /^[0-9]*\.?[0-9]*$/;

            if(value.match(rgx)) {
                return value.match(rgx);
            } else {
                if (fieldName = 'rateAfterRebateGameProviderGroup') {
                    vm[fieldName][idx].rate = '';
                } else {
                    vm[fieldName] = '';
                }
            }

        }
        // partner commission config end

        // announcement codes==============start===============================
        vm.getAllPlatformAnnouncements = function () {
            vm.allPlatformAnnouncements = [];
            $scope.$socketPromise('getPlatformAnnouncements', {platform: vm.selectedPlatform.id})
                .done(function (data) {
                    vm.allPlatformAnnouncements = data.data;
                    $scope.safeApply();
                });
        };

        vm.initCreatePlatform = function () {
            vm.configTableAdd = true;
            vm.newAnn = {};
            vm.currentlyFocusedAnnouncement = vm.newAnn;
            vm.newAnn.date = new Date();
        };

        // announcement codes==============end===============================

        vm.getBulkCallBasic = () => {
            vm.bulkCallBasic = vm.bulkCallBasic || {};
            vm.bulkCallBasic.maxRingTime = vm.selectedPlatform.data.maxRingTime || 30;
            vm.bulkCallBasic.redialTimes = vm.selectedPlatform.data.redialTimes || 3;
            vm.bulkCallBasic.minRedialInterval = vm.selectedPlatform.data.minRedialInterval || 10;
            vm.bulkCallBasic.idleAgentMultiple = vm.selectedPlatform.data.idleAgentMultiple || 2.0;
            $scope.safeApply();
        };

        vm.getPlatformBasic = function () {
            vm.platformBasic = vm.platformBasic || {};
            vm.platformBasic.playerNameMaxLength = vm.selectedPlatform.data.playerNameMaxLength;
            vm.platformBasic.playerNameMinLength = vm.selectedPlatform.data.playerNameMinLength;
            vm.platformBasic.samePhoneNumberRegisterCount = vm.selectedPlatform.data.samePhoneNumberRegisterCount;
            vm.platformBasic.showMinTopupAmount = vm.selectedPlatform.data.minTopUpAmount;
            vm.platformBasic.showAllowSameRealNameToRegister = vm.selectedPlatform.data.allowSameRealNameToRegister;
            vm.platformBasic.showAllowSamePhoneNumberToRegister = vm.selectedPlatform.data.allowSamePhoneNumberToRegister;
            vm.platformBasic.demoPlayerValidDays = vm.selectedPlatform.data.demoPlayerValidDays;
            vm.platformBasic.canMultiReward = vm.selectedPlatform.data.canMultiReward;
            vm.platformBasic.requireLogInCaptcha = vm.selectedPlatform.data.requireLogInCaptcha;
            vm.platformBasic.requireCaptchaInSMS = vm.selectedPlatform.data.requireCaptchaInSMS;
            vm.platformBasic.onlyNewCanLogin = vm.selectedPlatform.data.onlyNewCanLogin;
            vm.platformBasic.useLockedCredit = vm.selectedPlatform.data.useLockedCredit;
            vm.platformBasic.requireSMSVerification = vm.selectedPlatform.data.requireSMSVerification;
            vm.platformBasic.requireSMSVerificationForDemoPlayer = vm.selectedPlatform.data.requireSMSVerificationForDemoPlayer;
            vm.platformBasic.requireSMSVerificationForPasswordUpdate = vm.selectedPlatform.data.requireSMSVerificationForPasswordUpdate;
            vm.platformBasic.requireSMSVerificationForPaymentUpdate = vm.selectedPlatform.data.requireSMSVerificationForPaymentUpdate;
            vm.platformBasic.useProviderGroup = vm.selectedPlatform.data.useProviderGroup;
            vm.platformBasic.smsVerificationExpireTime = vm.selectedPlatform.data.smsVerificationExpireTime;
            vm.platformBasic.usePointSystem = vm.selectedPlatform.data.usePointSystem;
            vm.platformBasic.usePhoneNumberTwoStepsVerification = vm.selectedPlatform.data.usePhoneNumberTwoStepsVerification;
            vm.platformBasic.whiteListingPhoneNumbers$ = "";
            vm.platformBasic.blackListingPhoneNumbers$ = "";
            vm.platformBasic.playerForbidApplyBonusNeedCsApproval = vm.selectedPlatform.data.playerForbidApplyBonusNeedCsApproval;
            vm.platformBasic.unreadMailMaxDuration = vm.selectedPlatform.data.unreadMailMaxDuration;
            vm.platformBasic.manualRewardSkipAuditAmount = vm.selectedPlatform.data.manualRewardSkipAuditAmount || 0;

            if (vm.selectedPlatform.data.whiteListingPhoneNumbers && vm.selectedPlatform.data.whiteListingPhoneNumbers.length > 0) {
                let phones = vm.selectedPlatform.data.whiteListingPhoneNumbers;
                for (let i = 0, len = phones.length; i < len; i++) {
                    let phone = phones[i];
                    vm.platformBasic.whiteListingPhoneNumbers$ += phone;
                    i !== (len - 1) ? vm.platformBasic.whiteListingPhoneNumbers$ += "\n" : "";
                }
            }

            if (vm.selectedPlatform.data.blackListingPhoneNumbers && vm.selectedPlatform.data.blackListingPhoneNumbers.length > 0) {
                let phones = vm.selectedPlatform.data.blackListingPhoneNumbers;
                for (let i = 0, len = phones.length; i < len; i++) {
                    let phone = phones[i];
                    vm.platformBasic.blackListingPhoneNumbers$ += phone;
                    i !== (len - 1) ? vm.platformBasic.blackListingPhoneNumbers$ += "\n" : "";
                }
            }

            $scope.safeApply();
        };

        vm.getPartnerBasic = function () {
            vm.partnerBasic = vm.partnerBasic || {};
            vm.partnerBasic.partnerNameMaxLength = vm.selectedPlatform.data.partnerNameMaxLength;
            vm.partnerBasic.partnerNameMinLength = vm.selectedPlatform.data.partnerNameMinLength;
            vm.partnerBasic.partnerAllowSamePhoneNumberToRegister = vm.selectedPlatform.data.partnerAllowSamePhoneNumberToRegister;
            vm.partnerBasic.partnerSamePhoneNumberRegisterCount = vm.selectedPlatform.data.partnerSamePhoneNumberRegisterCount;
            vm.partnerBasic.partnerAllowSameRealNameToRegister = vm.selectedPlatform.data.partnerAllowSameRealNameToRegister;
            vm.partnerBasic.whiteListingPhoneNumbers = "";
            vm.partnerBasic.blackListingPhoneNumbers = "";
            vm.partnerBasic.partnerRequireSMSVerification = vm.selectedPlatform.data.partnerRequireSMSVerification;
            vm.partnerBasic.partnerRequireSMSVerificationForPasswordUpdate = vm.selectedPlatform.data.partnerRequireSMSVerificationForPasswordUpdate;
            vm.partnerBasic.partnerRequireSMSVerificationForPaymentUpdate = vm.selectedPlatform.data.partnerRequireSMSVerificationForPaymentUpdate;
            vm.partnerBasic.partnerSmsVerificationExpireTime = vm.selectedPlatform.data.partnerSmsVerificationExpireTime;
            vm.partnerBasic.partnerRequireLogInCaptcha = vm.selectedPlatform.data.partnerRequireLogInCaptcha;
            vm.partnerBasic.partnerRequireCaptchaInSMS = vm.selectedPlatform.data.partnerRequireCaptchaInSMS;
            vm.partnerBasic.partnerUsePhoneNumberTwoStepsVerification = vm.selectedPlatform.data.partnerUsePhoneNumberTwoStepsVerification;
            vm.partnerBasic.partnerUnreadMailMaxDuration = vm.selectedPlatform.data.partnerUnreadMailMaxDuration;
            vm.partnerBasic.partnerDefaultCommissionGroup = vm.selectedPlatform.data.partnerDefaultCommissionGroup.toString();

            if (vm.selectedPlatform.data.whiteListingPhoneNumbers && vm.selectedPlatform.data.whiteListingPhoneNumbers.length > 0) {
                let phones = vm.selectedPlatform.data.whiteListingPhoneNumbers;
                for (let i = 0, len = phones.length; i < len; i++) {
                    let phone = phones[i];
                    vm.partnerBasic.whiteListingPhoneNumbers += phone;
                    i !== (len - 1) ? vm.partnerBasic.whiteListingPhoneNumbers += "\n" : "";
                }
            }

            if (vm.selectedPlatform.data.blackListingPhoneNumbers && vm.selectedPlatform.data.blackListingPhoneNumbers.length > 0) {
                let phones = vm.selectedPlatform.data.blackListingPhoneNumbers;
                for (let i = 0, len = phones.length; i < len; i++) {
                    let phone = phones[i];
                    vm.partnerBasic.blackListingPhoneNumbers += phone;
                    i !== (len - 1) ? vm.partnerBasic.blackListingPhoneNumbers += "\n" : "";
                }
            }
            $scope.safeApply();
        }

        vm.getBlacklistIpConfig = function () {
            vm.blacklistIpConfig = vm.blacklistIpConfig || [];

            socketService.$socket($scope.AppSocket, 'getBlacklistIpConfig', {}, function (data) {
                $scope.$evalAsync(() => {
                    vm.blacklistIpConfig = data.data;
                    vm.blacklistIpList = [];

                    if (data && data.data && data.data.length > 0) {
                        for (let x = 0; x < data.data.length; x++) {
                            if (data.data[x].ip && data.data[x].isEffective) {
                                vm.blacklistIpList.push(data.data[x].ip);
                            }
                        }
                    }
                });
            }, function (data) {
                console.log("cannot get blacklist ip config", data);
                vm.blacklistIpConfig = [];
            });
        };

        vm.getBonusBasic = () => {

            vm.getAllPlayerLevels().done(
                function (data) {
                    if (vm.selectedPlatform.data.bonusSetting) {
                        vm.bonusSetting = vm.selectedPlatform.data.bonusSetting;
                    } else {
                        vm.bonusSetting = {};
                    }
                    vm.constructBonusSetting();

                }
            );
        };

        vm.constructBonusSetting = (bonusSetting) => {

            for (var d in vm.allPlayerLvl) {
                let val = Object.keys(vm.allPlayerLvl)[d];

                if (Object.keys(vm.bonusSetting).length <= d) {

                    vm.bonusSetting[d] = {};
                    vm.bonusSetting[d].platform = vm.allPlayerLvl[d].platform;
                    vm.bonusSetting[d].value = vm.allPlayerLvl[d].value;
                    vm.bonusSetting[d].name = vm.allPlayerLvl[d].name;
                    vm.bonusSetting[d].bonusPercentageCharges = 0;
                    vm.bonusSetting[d].bonusCharges = 0;
                } else {

                    if (vm.allPlayerLvl[d].name) {
                        vm.bonusSetting[d].name = vm.allPlayerLvl[d].name;
                    }
                    let setting = vm.getValueByKey(val, vm.bonusSetting);
                    if (!setting) {
                        vm.bonusSetting[d] = {};
                        vm.bonusSetting[d].platform = vm.allPlayerLvl[d].platform;
                        vm.bonusSetting[d].value = vm.allPlayerLvl[d].value;
                        vm.bonusSetting[d].name = vm.allPlayerLvl[d].name;
                        vm.bonusSetting[d].bonusPercentageCharges = 0;
                        vm.bonusSetting[d].bonusCharges = 0;
                    }
                }
            }
            vm.bonusBasic = {'bonusSetting': vm.bonusSetting}
            $scope.safeApply();
        }
        vm.getValueByKey = (val, bonusSettings) => {
            var result = 0;
            var len = Object.keys(vm.bonusSetting).length;
            for (var i = 0; i < len; i++) {
                if (Object.keys(vm.bonusSetting)[i] == val) {
                    result += 1;
                }
            }
            return result;
        }

        vm.getMonitorBasic = () => {
            vm.monitorBasic = vm.monitorBasic || {};
            vm.monitorBasic.monitorMerchantCount = vm.selectedPlatform.data.monitorMerchantCount;
            vm.monitorBasic.monitorPlayerCount = vm.selectedPlatform.data.monitorPlayerCount;
            vm.monitorBasic.monitorMerchantUseSound = vm.selectedPlatform.data.monitorMerchantUseSound;
            vm.monitorBasic.monitorPlayerUseSound = vm.selectedPlatform.data.monitorPlayerUseSound;
            vm.monitorBasic.monitorMerchantSoundChoice = vm.selectedPlatform.data.monitorMerchantSoundChoice;
            vm.monitorBasic.monitorPlayerSoundChoice = vm.selectedPlatform.data.monitorPlayerSoundChoice;
            $scope.safeApply();
        };

        vm.getPlayerValueBasic = () => {
            vm.playerValueBasic = vm.playerValueBasic || {};
            vm.playerValueBasic.criteriaScoreRatio = vm.selectedPlatform.data.playerValueConfig.criteriaScoreRatio;
            vm.playerValueBasic.topUpTimesScores = vm.selectedPlatform.data.playerValueConfig.topUpTimesScores;
            vm.playerValueBasic.gameTypeCountScores = vm.selectedPlatform.data.playerValueConfig.gameTypeCountScores;
            vm.playerValueBasic.winRatioScores = vm.selectedPlatform.data.playerValueConfig.winRatioScores;
            vm.playerValueBasic.credibilityScoreDefault = vm.selectedPlatform.data.playerValueConfig.credibilityScoreDefault;
            $scope.safeApply();
        };

        vm.getCallRequestConfig = () => {
            vm.callRequestConfig = {};
            vm.callRequestConfig.callRequestUrlConfig = vm.selectedPlatform.data.callRequestUrlConfig? vm.selectedPlatform.data.callRequestUrlConfig: "";
            vm.callRequestConfig.callRequestLineConfig = vm.selectedPlatform.data.callRequestLineConfig && vm.selectedPlatform.data.callRequestLineConfig.length?
                vm.selectedPlatform.data.callRequestLineConfig: [];

            // $scope.safeApply();
        };

        vm.prepareCredibilityConfig = () => {
            vm.removedRemarkId = [];
            return vm.getCredibilityRemarks(true).then(
                () => {
                    $scope.$evalAsync(() => {
                        let cloneRemarks = vm.credibilityRemarks.slice(0);
                        vm.positiveRemarks = [];
                        vm.negativeRemarks = [];
                        vm.neutralRemarks = [];

                        let len = cloneRemarks.length;

                        for (let i = 0; i < len; i++) {
                            let remark = cloneRemarks[i];
                            if (remark.score > 0) {
                                vm.positiveRemarks.push(remark);
                            }
                            else if (remark.score < 0) {
                                vm.negativeRemarks.push(remark);
                            }
                            else {
                                vm.neutralRemarks.push(remark);
                            }
                        }

                        vm.positiveRemarks.sort((a, b) => {
                            return b.score - a.score;
                        });

                        vm.negativeRemarks.sort((a, b) => {
                            return a.score - b.score;
                        });
                    });
                }
            );
        };

        vm.updateRemarkInEdit = (type, action, data) => {
            let remarks;
            switch (type) {
                case "positive":
                    remarks = vm.positiveRemarks;
                    break;
                case "negative":
                    remarks = vm.negativeRemarks;
                    break;
                default:
                    remarks = vm.neutralRemarks;
            }

            switch (action) {
                case "add":
                    remarks.push(data);
                    break;
                case "update":
                    remarks.map(remark => {
                        if (remark._id === data) {
                            remark["changed"] = true;
                        }
                    });
                    break;
                case "remove":
                    for (let i = 0; i < remarks.length; i++) {
                        if (remarks[i]._id === data) {
                            remarks.splice(i, 1);
                        }
                    }
                    vm.removedRemarkId.push(data);
                    break;
            }
            $scope.safeApply();
        };

        vm.getCredibilityRemarks = (forbidUIRenderTwice) => {
            return new Promise((resolve, reject) => {
                socketService.$socket($scope.AppSocket, 'getCredibilityRemarks', {platformObjId: vm.selectedPlatform.data._id}, function (data) {
                    vm.credibilityRemarks = data.data;
                    vm.filterCredibilityRemarks = data.data ? JSON.parse(JSON.stringify(data.data)) : [];
                    vm.filterCredibilityRemarks.push({'_id':'', 'name':'N/A'});
                    if(!forbidUIRenderTwice){
                        vm.setupRemarksMultiInput();
                        vm.setupRemarksMultiInputFeedback();
                    }
                    resolve();
                }, function (err) {
                    reject(err);
                });
            });
        };

        vm.getAllCredibilityRemarks = () => {
            return new Promise((resolve, reject) => {
                socketService.$socket($scope.AppSocket, 'getAllCredibilityRemarks', {}, function (data) {
                    console.log('all credibilityRemarks', data);
                    vm.allCredibilityRemarks = data.data;
                    vm.getPlatformCredibilityRemarks();
                    resolve();
                }, function (err) {
                    reject(err);
                });
            });
        };

        vm.getPlatformCredibilityRemarks = (platformList) => {
            if (vm.allCredibilityRemarks) {
                vm.platformCredibilityRemarks = vm.allCredibilityRemarks;
                if (platformList && platformList.length) {
                    vm.platformCredibilityRemarks = vm.allCredibilityRemarks.filter(remark => { return platformList.includes(remark.platform) });
                }
                vm.platformCredibilityRemarks.map(remark => {
                    if (vm.allPlatformData && vm.allPlatformData.length) {
                        vm.allPlatformData.forEach(platform => {
                            if (remark && remark.platform && platform && platform._id && platform.name) {
                                if (remark.platform.toString() === platform._id.toString()) {
                                    remark.platformName = platform.name;
                                }
                            }
                        })
                    }
                });
            }
        };

        vm.getPlatformProviderGroup = () => {
            return $scope.$socketPromise('getPlatformProviderGroup', {platformObjId: vm.selectedPlatform.data._id}).then(
                data => {
                    if (data) {
                        $scope.$evalAsync(() => {
                            vm.gameProviderGroup = data.data;
                            vm.gameProviderGroupNames = {};
                            for (let i = 0; i < vm.gameProviderGroup.length; i++) {
                                let providerGroup = vm.gameProviderGroup[i];
                                vm.gameProviderGroupNames[providerGroup._id] = providerGroup.name;
                            }
                            // vm.endLoadWeekDay();
                        });
                    }
                }
            );
        };

        vm.submitAddPlayerLvl = function () {
            var sendData = vm.newPlayerLvl;
            vm.newPlayerLvl.platform = vm.selectedPlatform.id;
            let levelUpConfig = vm.newPlayerLvl.levelUpConfig;
            for (let j = 0; j < levelUpConfig.length; j++) {
                if (vm.allPlayerLevelUpPeriod[levelUpConfig[j].topupPeriod] != vm.playerLevelPeriod.playerLevelUpPeriod
                    || vm.allPlayerLevelUpPeriod[levelUpConfig[j].consumptionPeriod] != vm.playerLevelPeriod.playerLevelUpPeriod) {
                    vm.platformBatchLevelUp = false;
                    break;
                } else if (vm.isDiffConsumptionProvider(levelUpConfig[j].consumptionSourceProviderId)) {
                    vm.platformBatchLevelUp = false;
                    break;
                }
            }
            $scope.$socketPromise('createPlayerLevel', sendData)
                .done(function (data) {
                    if (!vm.platformBatchLevelUp) {
                        let updateData = {
                            query: {_id: vm.selectedPlatform.id},
                            updateData: {
                                platformBatchLevelUp: vm.platformBatchLevelUp,
                                autoCheckPlayerLevelUp: vm.autoCheckPlayerLevelUp
                            }
                        }
                        socketService.$socket($scope.AppSocket, 'updatePlatform', updateData, function (data) {
                            loadPlatformData({loadAll: false});
                            vm.configTabClicked('player');

                        });
                    } else {
                        vm.configTabClicked('player');
                    }
                });
        }
        vm.submitAddPartnerLvl = function () {
            var sendData = vm.newPartnerLvl;
            vm.newPartnerLvl.platform = vm.selectedPlatform.id;
            $scope.$socketPromise('createPartnerLevel', sendData)
                .done(function (data) {
                    vm.configTabClicked('partner');
                });
        }
        vm.submitAddAnnouncement = function () {
            var sendData = vm.newAnn;
            vm.newAnn.platform = vm.selectedPlatform.id;
            $scope.$socketPromise('createPlatformAnnouncement', sendData)
                .done(function (data) {
                    vm.configTabClicked('announcement');
                });
        }
        vm.configStartEdit = function (choice) {
            switch (choice) {
                case 'player':
                    vm.allPlayerLvlBeforeEdit = Lodash.cloneDeep(vm.allPlayerLvl);
                    break;
                case 'announcement':
                    vm.allPlatformAnnouncementsBeforeEdit = Lodash.cloneDeep(vm.allPlatformAnnouncements);
                    break;
            }
            vm.configTableEdit = true;
        }
        vm.playerLvlDownChange = function (i, j, which) {
            var obj;
            if (i != "-1") {
                obj = vm.allPlayerLvl[i].levelDownConfig[j];
            } else {
                obj = vm.newPlayerLvl.levelDownConfig[0];
            }
            if (which == 'topupMinimum' && obj.topupMinimum) {
                obj.consumptionMinimum = 0;
                obj.consumptionPeriod = "NONE";
            } else if (which == 'consumptionMinimum' && obj.consumptionMinimum) {
                obj.topupMinimum = 0;
                obj.topupPeriod = "NONE";
            }
            $scope.safeApply();
        }
        vm.movePlayerLevel = function (levelIndex, direction) {
            var clickedLevel = vm.allPlayerLvl[levelIndex];
            var otherLevel = vm.allPlayerLvl[levelIndex + direction];
            clickedLevel.value += direction;
            otherLevel.value -= direction;
            vm.sortPlayerLevels();
            vm.allPlayerLvlReordered = true;
        }
        vm.configCancelEditOrAdd = function (choice) {
            switch (choice) {
                case 'player':
                    // If cancelling an edit, we should restore the state before the edit
                    if (vm.configTableEdit) {
                        vm.allPlayerLvl = vm.allPlayerLvlBeforeEdit;
                    }
                    vm.autoCheckPlayerLevelUp = vm.selectedPlatform.data.autoCheckPlayerLevelUp;
                    break;
                case 'announcement':
                    // If cancelling an edit, we should restore the state before the edit
                    if (vm.configTableEdit) {
                        vm.allPlatformAnnouncements = vm.allPlatformAnnouncementsBeforeEdit;
                    }
                    break;
            }
            vm.configTableEdit = false;
            vm.configTableAdd = false;
        }

        function updatePlayerLevels(arr, index, deltaValue, callback) {
            if (index >= arr.length) {
                done();
                return;
            }

            var curId = arr[index];
            var updateData = Lodash.cloneDeep(vm.playerLvlData[curId]);
            delete updateData._id;
            delete updateData.$$hashKey;
            delete updateData.__v;
            if (deltaValue) {
                updateData.value += deltaValue;
            }
            var sendData = {query: {_id: curId}, updateData: updateData};
            console.log('sendData', sendData);
            socketService.$socket($scope.AppSocket, 'updatePlayerLevel', sendData, next, next);

            function next() {
                updatePlayerLevels(arr, ++index, deltaValue, callback);
            }

            function done() {
                if (!deltaValue) {
                    //vm.ConfigPlayerClicked();
                    vm.configTabClicked("player");
                }
                if (callback) {
                    callback();
                }
                $scope.safeApply();
            }
        }

        function updatePartnerLevels(arr, index) {
            if (index >= arr.length) {
                done();
                return;
            }

            var curId = arr[index];
            console.log('vm.allPartner', vm.allPartner);
            console.log('curId', curId);
            var updateData = Lodash.cloneDeep(vm.allPartner[index]);
            delete updateData._id;
            delete updateData.$$hashKey;
            delete updateData.__v;
            var sendData = {query: {_id: curId}, updateData: updateData};
            console.log("sendData", sendData);
            socketService.$socket($scope.AppSocket, commonAPIs.partnerLevel.update, sendData, next, next);

            function next() {
                updatePartnerLevels(arr, ++index);
            }

            function done() {
                $scope.safeApply();
                //vm.ConfigPartnerClicked();
                vm.configTabClicked("partner");
            }
        }

        function updatePlatformAnnouncements(arr, index) {
            if (index >= arr.length) {
                done();
                return;
            }

            var updateData = Lodash.cloneDeep(arr[index]);
            var curId = updateData._id;
            delete updateData._id;
            delete updateData.$$hashKey;
            delete updateData.__v;
            var sendData = {query: {_id: curId}, updateData: updateData};
            console.log('sendData', sendData);
            socketService.$socket($scope.AppSocket, 'updatePlatformAnnouncement', sendData, next, next);

            function next() {
                updatePlatformAnnouncements(arr, ++index);
            }

            function done() {
                //vm.ConfigAnnouncementClicked();
                vm.configTabClicked("announcement");
                $scope.safeApply();
            }
        }

        function updatePartnerLevelConfig() {
            delete vm.partnerLevelConfigEdit._id;
            var sendData = {
                query: {platform: vm.selectedPlatform.id},
                updateData: vm.partnerLevelConfigEdit
            };
            socketService.$socket($scope.AppSocket, 'updatePartnerLevelConfig', sendData, function (data) {
                vm.partnerLevelConfig = vm.partnerLevelConfigEdit;
                vm.configTabClicked("validActive");
                $scope.safeApply();
            });
        }

        function updateBulkCallBasic(srcData) {
            let sendData = {
                query: {_id: vm.selectedPlatform.id},
                updateData: {
                    maxRingTime: srcData.maxRingTime,
                    redialTimes: srcData.redialTimes,
                    minRedialInterval: srcData.minRedialInterval,
                    idleAgentMultiple: srcData.idleAgentMultiple,
                }
            };

            socketService.$socket($scope.AppSocket, 'updatePlatform', sendData, function (data) {
                loadPlatformData({loadAll: false});
            });
        }

        function updateCallRequestConfig(srcData) {
            let sendData = {
                query: {_id: vm.selectedPlatform.id},
                updateData: {
                    callRequestUrlConfig: srcData.callRequestUrlConfig,
                    callRequestLineConfig: srcData.callRequestLineConfig
                }
            };

            socketService.$socket($scope.AppSocket, 'updatePlatform', sendData, function (data) {
                loadPlatformData({loadAll: false});
            });
        }

        function updatePlatformBasic(srcData) {
            let whiteListingPhoneNumbers = [];
            let blackListingPhoneNumbers = [];

            if (srcData.whiteListingPhoneNumbers$) {
                let phones = srcData.whiteListingPhoneNumbers$.split(/\r?\n/);
                for (let i = 0, len = phones.length; i < len; i++) {
                    let phone = phones[i].trim();
                    if (phone) whiteListingPhoneNumbers.push(phone);
                }
            }

            if (srcData.blackListingPhoneNumbers$) {
                let phones = srcData.blackListingPhoneNumbers$.split(/\r?\n/);
                for (let i = 0, len = phones.length; i < len; i++) {
                    let phone = phones[i].trim();
                    if (phone) blackListingPhoneNumbers.push(phone);
                }
            }

            let sendData = {
                query: {_id: vm.selectedPlatform.id},
                updateData: {
                    minTopUpAmount: srcData.showMinTopupAmount,
                    allowSameRealNameToRegister: srcData.showAllowSameRealNameToRegister,
                    allowSamePhoneNumberToRegister: srcData.showAllowSamePhoneNumberToRegister,
                    demoPlayerValidDays: srcData.demoPlayerValidDays,
                    samePhoneNumberRegisterCount: srcData.samePhoneNumberRegisterCount,
                    canMultiReward: srcData.canMultiReward,
                    autoCheckPlayerLevelUp: srcData.autoCheckPlayerLevelUp,
                    manualPlayerLevelUp: srcData.manualPlayerLevelUp,
                    platformBatchLevelUp: srcData.platformBatchLevelUp,
                    playerLevelUpPeriod: srcData.playerLevelUpPeriod,
                    playerLevelDownPeriod: srcData.playerLevelDownPeriod,
                    requireLogInCaptcha: srcData.requireLogInCaptcha,
                    requireCaptchaInSMS: srcData.requireCaptchaInSMS,
                    onlyNewCanLogin: srcData.onlyNewCanLogin,
                    useLockedCredit: srcData.useLockedCredit,
                    playerNameMaxLength: srcData.playerNameMaxLength,
                    playerNameMinLength: srcData.playerNameMinLength,
                    bonusSetting: srcData.bonusSetting,
                    requireSMSVerification: srcData.requireSMSVerification,
                    requireSMSVerificationForDemoPlayer: srcData.requireSMSVerificationForDemoPlayer,
                    requireSMSVerificationForPasswordUpdate: srcData.requireSMSVerificationForPasswordUpdate,
                    requireSMSVerificationForPaymentUpdate: srcData.requireSMSVerificationForPaymentUpdate,
                    smsVerificationExpireTime: srcData.smsVerificationExpireTime,
                    useProviderGroup: srcData.useProviderGroup,
                    whiteListingPhoneNumbers: whiteListingPhoneNumbers,
                    blackListingPhoneNumbers: blackListingPhoneNumbers,
                    usePointSystem: srcData.usePointSystem,
                    usePhoneNumberTwoStepsVerification: srcData.usePhoneNumberTwoStepsVerification,
                    playerForbidApplyBonusNeedCsApproval: srcData.playerForbidApplyBonusNeedCsApproval,
                    unreadMailMaxDuration: srcData.unreadMailMaxDuration,
                    manualRewardSkipAuditAmount: srcData.manualRewardSkipAuditAmount,
                }
            };
            let isProviderGroupOn = false;
            if (vm.selectedPlatform.data.useProviderGroup && !srcData.useProviderGroup) {
                isProviderGroupOn = true;
            }
            socketService.$socket($scope.AppSocket, 'updatePlatform', sendData, function (data) {
                loadPlatformData({loadAll: false});
                if (isProviderGroupOn) {
                    vm.unlockPlatformProviderGroup()
                }

            });
        }

        vm.partnerCommissionName = function getPartnerCommisionName() {
            if (vm.partnerBasic.partnerDefaultCommissionGroup) {
                return Object.keys(vm.constPartnerCommisionType)[vm.partnerBasic.partnerDefaultCommissionGroup];
            } else {
                return "CLOSED_COMMISSION";
            }
        }

        function updatePartnerBasic(srcData) {
            let whiteListingPhoneNumbers = [];
            let blackListingPhoneNumbers = [];

            if (srcData.whiteListingPhoneNumbers) {
                let phones = srcData.whiteListingPhoneNumbers.split(/\r?\n/);
                for (let i = 0, len = phones.length; i < len; i++) {
                    let phone = phones[i].trim();
                    if (phone) whiteListingPhoneNumbers.push(phone);
                }
            }

            if (srcData.blackListingPhoneNumbers) {
                let phones = srcData.blackListingPhoneNumbers.split(/\r?\n/);
                for (let i = 0, len = phones.length; i < len; i++) {
                    let phone = phones[i].trim();
                    if (phone) blackListingPhoneNumbers.push(phone);
                }
            }
            let sendData = {
                query: {_id: vm.selectedPlatform.id},
                updateData: {
                    partnerNameMaxLength: srcData.partnerNameMaxLength,
                    partnerNameMinLength: srcData.partnerNameMinLength,
                    partnerAllowSamePhoneNumberToRegister: srcData.partnerAllowSamePhoneNumberToRegister,
                    partnerSamePhoneNumberRegisterCount: srcData.partnerSamePhoneNumberRegisterCount,
                    partnerAllowSameRealNameToRegister: srcData.partnerAllowSameRealNameToRegister,
                    whiteListingPhoneNumbers: whiteListingPhoneNumbers,
                    blackListingPhoneNumbers: blackListingPhoneNumbers,
                    partnerRequireSMSVerification: srcData.partnerRequireSMSVerification,
                    partnerRequireSMSVerificationForPasswordUpdate: srcData.partnerRequireSMSVerificationForPasswordUpdate,
                    partnerRequireSMSVerificationForPaymentUpdate: srcData.partnerRequireSMSVerificationForPaymentUpdate,
                    partnerSmsVerificationExpireTime: srcData.partnerSmsVerificationExpireTime,
                    partnerRequireLogInCaptcha: srcData.partnerRequireLogInCaptcha,
                    partnerRequireCaptchaInSMS: srcData.partnerRequireCaptchaInSMS,
                    partnerUsePhoneNumberTwoStepsVerification: srcData.partnerUsePhoneNumberTwoStepsVerification,
                    partnerUnreadMailMaxDuration: srcData.partnerUnreadMailMaxDuration,
                    partnerDefaultCommissionGroup: srcData.partnerDefaultCommissionGroup
                }
            };
            socketService.$socket($scope.AppSocket, 'updatePlatform', sendData, function (data) {
                loadPlatformData({loadAll: false});
            });
        }

        function updateMonitorBasic(srcData) {
            let sendData = {
                query: {_id: vm.selectedPlatform.id},
                updateData: {
                    monitorMerchantCount: srcData.monitorMerchantCount,
                    monitorPlayerCount: srcData.monitorPlayerCount,
                    monitorMerchantUseSound: srcData.monitorMerchantUseSound,
                    monitorPlayerUseSound: srcData.monitorPlayerUseSound,
                    monitorMerchantSoundChoice: srcData.monitorMerchantSoundChoice,
                    monitorPlayerSoundChoice: srcData.monitorPlayerSoundChoice
                }
            };
            socketService.$socket($scope.AppSocket, 'updatePlatform', sendData, function (data) {
                loadPlatformData({loadAll: false});
            });
        }

        function updatePlayerValueConfig(srcData) {
            let sendData = {
                platformObjId: vm.selectedPlatform.id,
                playerValueConfig: srcData
            };
            socketService.$socket($scope.AppSocket, 'updatePlayerValueConfig', sendData, function (data) {
                loadPlatformData({loadAll: false});
            });
        }

        function updatePlayerLevelScore() {
            let sendData = {
                platformObjId: vm.selectedPlatform.id,
                playerLevel: vm.allPlayerLvl
            };
            socketService.$socket($scope.AppSocket, 'updatePlayerLevelScores', sendData, function (data) {
                // do nothing
            });
        }

        function updateCredibilityRemark() {
            let updatedRemarks = vm.neutralRemarks.concat(vm.positiveRemarks, vm.negativeRemarks);
            let addRemarks = [];
            let updateRemarks = [];
            let deleteRemarks = [];

            for (let i = 0; i < updatedRemarks.length; i++) {
                let updatedRemark = updatedRemarks[i];

                if (!updatedRemark._id) {
                    addRemarks.push(updatedRemark);
                    continue;
                }
                if (updatedRemark.changed) {
                    updateRemarks.push(updatedRemark);
                }
            }

            for (let i = 0; i < vm.removedRemarkId.length; i++) {
                deleteRemarks.push({_id: vm.removedRemarkId[i]});
            }

            $scope.$socketPromise('updateCredibilityRemarksInBulk', {
                platformObjId: vm.selectedPlatform.data._id,
                addRemarks: addRemarks,
                updateRemarks: updateRemarks,
                deleteRemarks: deleteRemarks
            }).then(
                data => {
                    vm.prepareCredibilityConfig();
                }
            );
        }

        function updateProviderGroup() {
            let totalProviderCount = vm.platformProviderList.length;
            let localProviderCount = vm.gameProviderGroup.reduce(
                (a, b) => {
                    let legnthB = b.providers && b.providers.length || 0;
                    return a + legnthB;
                }, 0
            );

            if (totalProviderCount > localProviderCount) {
                vm.providerGroupConfig.showWarning = true;
            }
            else {
                vm.providerGroupConfig.showWarning = false;
                vm.configTableEdit = false;

                vm.removeProviderGroup();

                let sendData = {
                    platformObjId: vm.selectedPlatform.id,
                    gameProviderGroup: vm.gameProviderGroup.map(e => {
                        return {
                            providerGroupId: e.providerGroupId,
                            name: e.name,
                            providers: e.providers
                        };
                    })
                };

                console.log('sendData2', sendData);

                socketService.$socket($scope.AppSocket, 'updatePlatformProviderGroup', sendData, function (data) {
                    console.log('updatePlatformProviderGroup', data);
                });
            }
        }

        vm.removeProviderGroup = () => {
            if (vm.prepareToBeDeletedProviderGroupId && vm.prepareToBeDeletedProviderGroupId.length > 0) {
                let sendObj = {
                    gameProviderGroupObjId: vm.prepareToBeDeletedProviderGroupId
                };

                socketService.$socket($scope.AppSocket, 'deletePlatformProviderGroup', sendObj, function (data) {
                    vm.getPlatformProviderGroup();
                })
            }
        }

        vm.checkProviderGrouped = (providerId, curCollection) => {
            let isUsed = false;

            vm.gameProviderGroup.map((e) => {
                if (e.providers && e.providers.indexOf(String(providerId)) > -1 && (!curCollection || curCollection.indexOf(String(providerId)) < 0)) {
                    isUsed = true;
                }
            });
            vm.refreshDropDown();
            return isUsed;
        };

        vm.refreshDropDown = () => {
            $('.spicker').selectpicker('refresh');
        }

        vm.ensurePlayerLevelOrder = function () {
            vm.sortPlayerLevels();
            vm.allPlayerLvl.forEach((lvl, i) => lvl.value = i);
            // If the player values have changed, their values may collide when we save them one-by-one (violating the schema's uniqueness constraint).
            // To avoid this, we first save with a different set of values (desired value + 1000), and then save again with the normal values.
            var submitWithoutCollision = (callback) => updatePlayerLevels(vm.playerIDArr, 0, +1000, callback);
            var submitNormally = (callback) => updatePlayerLevels(vm.playerIDArr, 0, +0, callback);
            submitWithoutCollision(submitNormally);
        };

        vm.playerLevelChangeIsRewardTask = level => {
            if (level && level.reward) {
                if (level.reward.requiredUnlockTimes) {
                    level.reward.isRewardTask = true;
                }
                else {
                    level.reward.isRewardTask = false;
                }
            }
        };

        vm.configTableDeleteLevelConfirm = function (choice, level) {
            switch (choice) {
                case 'player':
                    var str = $translate("Delete") + " " + level.name + "(" + level.value + "). " + $translate("Are you sure") + "?";
                    GeneralModal.confirm(str).then(function () {
                        socketService.$socket($scope.AppSocket, 'deletePlayerLevel', {_id: level._id}, function (data) {
                            // Reload the server data and refresh UI:
                            //vm.configTabClicked("player");

                            // Ensure level values are in continuous sequence, refresh UI at the end.
                            vm.getAllPlayerLevels().done(
                                () => {
                                    vm.ensurePlayerLevelOrder();
                                    if (!vm.selectedPlatform.data.platformBatchLevelUp) {
                                        for (let i = 0; i < Object.keys(vm.playerLvlData).length; i++) {
                                            let levelUpConfig = vm.playerLvlData[Object.keys(vm.playerLvlData)[i]].levelUpConfig;
                                            for (let j = 0; j < levelUpConfig.length; j++) {
                                                if (vm.allPlayerLevelUpPeriod[levelUpConfig[j].topupPeriod] != vm.playerLevelPeriod.playerLevelUpPeriod
                                                    || vm.allPlayerLevelUpPeriod[levelUpConfig[j].consumptionPeriod] != vm.playerLevelPeriod.playerLevelUpPeriod) {
                                                    vm.platformBatchLevelUp = false;
                                                    break;
                                                } else if (vm.isDiffConsumptionProvider(levelUpConfig[j].consumptionSourceProviderId)) {
                                                    vm.platformBatchLevelUp = false;
                                                    break;
                                                }
                                            }
                                            if (vm.platformBatchLevelUp == false) {
                                                break;
                                            }
                                        }

                                        let updateData = {
                                            query: {_id: vm.selectedPlatform.id},
                                            updateData: {
                                                platformBatchLevelUp: vm.platformBatchLevelUp,
                                                autoCheckPlayerLevelUp: vm.autoCheckPlayerLevelUp
                                            }
                                        }
                                        socketService.$socket($scope.AppSocket, 'updatePlatform', updateData, function (data) {
                                            loadPlatformData({loadAll: false});
                                        });
                                    }
                                }
                            );
                            $scope.safeApply();
                        });
                    });
                    break;
            }
        };
        // partner level codes==============end===============================

        vm.getDepartmentUserIds = function (departmentId) {
            var userIds = [];

            if (!vm.departmentListObj) {
                vm.departmentListObj = {};
                for (let i = 0; i < vm.departments.length; i++) {
                    vm.departmentListObj[vm.departments[i]._id] = vm.departments[i];
                }
            }

            if (!vm.departmentListObj[departmentId]) {
                return [];
            }

            let currentDepartment = vm.departmentListObj[departmentId];
            userIds = userIds.concat(currentDepartment.users);
            if (currentDepartment.children && currentDepartment.children.length > 0) {
                for (let i = 0; i < currentDepartment.children.length; i++) {
                    let childDepartmentId = currentDepartment.children[i];
                    userIds = userIds.concat(vm.getDepartmentUserIds(childDepartmentId));
                }
            }

            return userIds;
        };

        vm.getPlatformAnnouncements = function () {
            if (!vm.selectedPlatform) return;
            $scope.$socketPromise('getPlatformAnnouncementsByPlatformId', {platformId: vm.selectedPlatform.data.platformId}).then(function (data) {
                vm.allPlatformAnnouncements = data.data;
                vm.allPlatformAnnouncements.sort((a, b) => a.order - b.order);
                $scope.safeApply();
            }).done();
        };

        vm.configTableDeleteSelectedPlatformAnnouncement = function () {
            var ann = vm.selectedPlatformAnnouncement;
            GeneralModal.confirm({
                title: "Delete Announcement",
                text: `Are you sure you want to delete the announcement "${ann.title}"?`
            }).then(function () {
                $scope.$socketPromise('deletePlatformAnnouncementByIds', {_ids: [ann._id]})
                    .done(function (data) {
                        vm.configTabClicked("announcement");
                    });
            });
        }

        vm.previewPlatformAnnouncement = function () {
            var announcementHTML = vm.currentlyFocusedAnnouncement && vm.currentlyFocusedAnnouncement.content || '';
            // We *could* use renderTemplate to convert '\n\n' into '<br>' but since it is clients (and not us) that
            // will be rendering the announcements, I think we should force the announcements to be pure HTML.
            // So we don't do: announcementHTML = renderTemplate(announcementHTML, {});
            // A middle compromise would be to allow editing with '\n\n' but actually *save* with '<br>'
            $('.announcementPreview').html(announcementHTML);
        };

        /////////////////////////////Mark::Proposal functions////////////////////////////
        //get All proposal list
        vm.loadProposalTypeData = function () {

            if (!authService.checkViewPermission('Platform', 'Proposal', 'Read')) {
                return;
            }
            socketService.$socket($scope.AppSocket, 'getProposalTypeByPlatformId', {platformId: vm.selectedPlatform.id}, function (data) {
                vm.buildProposalTypeList(data.data);
            });
        };
        vm.buildProposalTypeList = function (data, isRedraw) {
            vm.proposalTypeList = [];
            vm.selectedProposalType = {};
            if (data) {
                $.each(data, function (i, v) {
                    var obj = {
                        text: $translate(v.name),
                        data: v
                    }
                    vm.proposalTypeList.push(obj);
                });
            }
            $('#proposalTypeTree').treeview(
                {
                    data: vm.proposalTypeList,
                    highlightSearchResults: true
                }
            );
            //if (!isRedraw) {
            $('#searchProposalType').keyup(function () {
                $('#proposalTypeTree').treeview('search', [$(this).val(), {
                    ignoreCase: true,     // case insensitive
                    exactMatch: false,    // like or equals
                    revealResults: true,  // reveal matching nodes
                }]);

            });
            $('#proposalTypeTree').on('searchComplete', function (event, data) {
                var showAll = ($('#searchProposalType').val()) ? false : true;
                $('#proposalTypeTree li:not(.search-result)').each(function (i, o) {
                    if (showAll) {
                        $(o).show();
                    } else {
                        $(o).hide();
                    }
                });
                $('#proposalTypeTree li:has(.search-result)').each(function (i, o) {
                    $(o).show();
                });
            });
//}
            $('#proposalTypeTree').on('nodeSelected', function (event, data) {
                vm.selectedProposalType = data;
                //get process and steps data for selected proposal type
                vm.getProposalTypeProcessSteps();
                vm.getProposalTypeExpirationDuration();
                console.log("vm.selectedProposalType", vm.selectedProposalType);
                $scope.safeApply();
            });
        };
        vm.createProposalTypeForm = function () {
            vm.newProposal = {};

        }
        vm.createNewProposalType = function () {
            if (!vm.loadProposalTypeData) {
                return;
            }
            console.log(vm.newProposal);
            socketService.$socket($scope.AppSocket, 'createProposalType', vm.newProposal, success);

            function success(data) {
                //todo::store data to vm
                vm.loadProposalTypeData();
                $scope.$digest();
                if (typeof(callback) == 'function') {
                    callback(data.data);
                }
            }
        }
        vm.deleteProposalType = function () {
            console.log({_id: vm.selectedProposalType.data._id});
            socketService.$socket($scope.AppSocket, 'deleteProposalTypes', {_ids: [vm.selectedProposalType.data._id]}, success);

            function success(data) {
                //todo::store data to vm
                vm.loadProposalTypeData();
                $scope.$digest();
                if (typeof(callback) == 'function') {
                    callback(data.data);
                }
            }
        }
        vm.updateNewProposalType = function () {
            console.log({_id: vm.selectedProposalType.data._id});
            var sendData = {
                query: {_id: vm.selectedProposalType.data._id},
                updateData: vm.newProposal
            };
            socketService.$socket($scope.AppSocket, 'updateProposalType', sendData, success);

            function success(data) {
                //todo::store data to vm
                vm.loadProposalTypeData();
                $scope.$digest();
                if (typeof(callback) == 'function') {
                    callback(data.data);
                }
            }
        }

        // right panel required functions
        vm.loadAlldepartment = function () {

            if (!authService.checkViewPermission('Platform', 'Proposal', 'Create') && !authService.checkViewPermission('Platform', 'Proposal', 'Update')) {
                return;
            }
            socketService.$socket($scope.AppSocket, 'getDepartmentTreeById', {departmentId: authService.departmentId()}, success);

            function success(data) {
                $scope.$evalAsync(() => {
                    vm.departments = data.data;
                })
            }

            socketService.$socket($scope.AppSocket, 'getDepartmentDetailsByPlatformObjId', {platformObjId: vm.selectedPlatform.id},
                data => {
                    vm.currentPlatformDepartment = data.data;

                    if (vm.currentPlatformDepartment && vm.currentPlatformDepartment.length) {
                        vm.currentPlatformDepartment.map(department => {
                            if (department.departmentName == vm.selectedPlatform.data.name) {
                                vm.platformDepartmentObjId = department._id;
                            }
                        });

                        if (!vm.platformDepartmentObjId) {
                            vm.platformDepartmentObjId = vm.currentPlatformDepartment[0]._id;
                        }
                    }
                }
            );
        }

        vm.loadDepartmentRole = function (departmentNode) {
            vm.tempNewNodeDepartment = departmentNode;
            socketService.$socket($scope.AppSocket, 'getDepartment', {_id: departmentNode._id}, success);

            function success(data) {
                vm.tempDepartmentID = data.data._id;
                vm.tempDepartmentName = data.data.departmentName;
                vm.tempAllRoles = data.data.roles;
                $scope.safeApply();
            }
        }


        vm.clearData = function () {
            vm.loadAlldepartment();
            vm.tempNewNodeDepartment = {};
            if (vm.departments) {
                $.each(vm.departments, function (i, v) {
                    if (v.departmentName == vm.tempNodeDepartmentName) {
                        vm.tempEditDepartName = v.departmentName;
                        $scope.safeApply();
                        return true;
                    }
                })
                vm.StepDepartmentUpdated();
            }
        }

        vm.StepDepartmentUpdated = function () {
            $.each(vm.departments, function (i, v) {
                if (v.departmentName == vm.tempEditDepartName) {
                    vm.tempEditDepartID = v._id;
                    $scope.safeApply();
                    return true;
                }
            })

            socketService.$socket($scope.AppSocket, 'getDepartment', {_id: vm.tempEditDepartID}, success);

            function success(data) {
                vm.tempAllRoles = data.data.roles;
                $.each(vm.tempAllRoles, function (i, v) {
                    if (v.roleName == vm.tempNodeRoleName) {
                        vm.tempEditRoleName = v.roleName;
                        $scope.safeApply();
                        return true;
                    }
                })
                $scope.safeApply();
            }
        }
        vm.StepRoleUpdated = function () {
            $.each(vm.tempAllRoles, function (i, v) {
                if (v.roleName == vm.tempEditRoleName) {
                    //vm.tempEditRoleName = v.roleName;
                    vm.tempEditRoleID = v._id;
                    $scope.safeApply();
                    return true;
                }
            })
        }

        vm.updateProposalStepData = function () {
            var updateNode = {
                name: vm.tempNodeName,
                id: vm.curNodeID,
                departmentData: {id: vm.tempEditDepartID, name: vm.tempEditDepartName},
                roleData: {id: vm.tempEditRoleID, name: vm.tempEditRoleName}
            }
            vm.chartViewModel.updateNode(vm.curNodeID, updateNode);
            vm.tempNodeDepartmentName = vm.tempEditDepartName;
            vm.tempNodeRoleName = vm.tempEditRoleName;
            socketService.setProposalNodeData();
            $scope.safeApply();
        }

        ////////////////////////////////////flow chart code///////////////////////////////////////
        //
        // Code for the delete key.
        //
        var deleteKeyCode = 46;

        //
        // Code for control key.
        //
        var ctrlKeyCode = 17;

        //
        // Set to true when the ctrl key is down.
        //
        var ctrlDown = false;

        //
        // Code for A key.
        //
        var aKeyCode = 65;

        //
        // Code for esc key.
        //
        var escKeyCode = 27;

        //
        // Selects the next node id.
        //
        var nextNodeID = 10;

        //
        // Event handler for key-down on the flowchart.
        //
        vm.keyDown = function (evt) {

            if (evt.keyCode === ctrlKeyCode) {

                ctrlDown = true;
                evt.stopPropagation();
                evt.preventDefault();
            }
        };

        //
        // Event handler for key-up on the flowchart.
        //
        vm.keyUp = function (evt) {

            if (evt.keyCode === deleteKeyCode) {
                //
                // Delete key.
                //
                vm.chartViewModel.deleteSelected();
            }

            if (evt.keyCode == aKeyCode && ctrlDown) {
                //
                // Ctrl + A
                //
                vm.chartViewModel.selectAll();
            }

            if (evt.keyCode == escKeyCode) {
                // Escape.
                vm.chartViewModel.deselectAll();
            }

            if (evt.keyCode === ctrlKeyCode) {
                ctrlDown = false;

                evt.stopPropagation();
                evt.preventDefault();
            }
        };

        //
        // Add a new node to the chart.
        //
        vm.addNewNode = function () {
            //todo
            //var nodeName = prompt("Enter a node name:", "New node");
            //if (!nodeName) {
            //    return;
            //}

            //
            // Template for a new node.
            //
            var newNodeDataModel = {
                name: vm.tempNewNodeName,
                id: nextNodeID++,
                x: 150 + (nextNodeID % 3) * 10,
                y: 150 + (nextNodeID % 3) * 10,
                departmentData: {
                    id: vm.tempDepartmentID,
                    name: vm.tempDepartmentName,
                    label: $translate("DEPARTMENT")
                },
                //departmentName: vm.tempNewNodeDepartment.departmentName,
                roleData: {id: vm.tempRoleID, name: vm.tempRoleName, label: $translate("ROLE")},
                inputConnectors: [
                    {
                        name: "X"
                    }
                ],
                outputConnectors: [
                    {
                        name: "APPROVE",
                        color: "#00ff00"
                    },
                    {
                        name: "REJECT",
                        color: "red"
                    }
                ]
            };

            vm.chartViewModel.addNode(newNodeDataModel);
        };

        //
        // Add an input connector to selected nodes.
        //
        vm.addNewInputConnector = function () {
            var connectorName = prompt("Enter a connector name:", "New connector");
            if (!connectorName) {
                return;
            }

            var selectedNodes = vm.chartViewModel.getSelectedNodes();
            for (var i = 0; i < selectedNodes.length; ++i) {
                var node = selectedNodes[i];
                node.addInputConnector({
                    name: connectorName
                });
            }
        };

        //
        // Add an output connector to selected nodes.
        //
        vm.addNewOutputConnector = function () {
            var connectorName = prompt("Enter a connector name:", "New connector");
            if (!connectorName) {
                return;
            }

            var selectedNodes = vm.chartViewModel.getSelectedNodes();
            for (var i = 0; i < selectedNodes.length; ++i) {
                var node = selectedNodes[i];
                node.addOutputConnector({
                    name: connectorName
                });
            }
        };

        //
        // Delete selected nodes and connections.
        //
        vm.deleteSelected = function () {
            vm.chartViewModel.deleteSelected();
            vm.proposalChanged = true;
        };

        vm.saveProcess = function () {
            var isValid = true;
            console.log(vm.chartViewModel);
            var usedRoleId = [];
            if (vm.chartViewModel && vm.chartViewModel.nodes) {
                var steps = {};
                //build step data based on the node data
                for (var i = 0, leng = vm.chartViewModel.nodes.length; i < leng; i++) {
                    var node = vm.chartViewModel.nodes[i].data;
                    if (node.departmentData && node.roleData) {
                        steps[node.id] = {
                            title: node.name,
                            department: node.departmentData.id,
                            role: node.roleData.id
                        };
                        usedRoleId.push(node.roleData.id);
                    }
                    else {
                        isValid = false;
                        socketService.showErrorMessage("Incorrect work flow data! Missing department or role!");
                    }
                }
                //build link for next strep based on connection data
                var links = {};
                for (var j = 0, leng = vm.chartViewModel.connections.length; j < leng; j++) {
                    var con = vm.chartViewModel.connections[j];
                    if (con && con.data && con.data.dest && con.data.source
                        && con.data.dest.nodeID > flowchart.ChartViewModel.FAIL_POINT
                        && con.data.source.nodeID > flowchart.ChartViewModel.FAIL_POINT) {
                        links[con.data.source.nodeID] = con.data.dest.nodeID;
                    }
                }
                if (links.length < steps.length - 1) {
                    isValid = false;
                    socketService.showErrorMessage("Incorrect work flow data! Steps and links number doesn't match.");
                }
                if (usedRoleId.length !== new Set(usedRoleId).size) {
                    isValid = false;
                    socketService.showErrorMessage("There exists duplicate role in all steps! Process cannot be saved.");
                }
                console.log("steps", steps);
                console.log("links", links);
            } else {
                isValid = false;
                socketService.showErrorMessage("Incorrect work flow data! No steps added.");
            }
            if (isValid) {
                vm.updateProposalTypeProcessSteps(steps, links);
            }
        };

        vm.saveDateProcess = function () {
            //if (vm.selectedProposalType && vm.selectedProposalType.data && vm.selectedProposalType.data.process && dt) {
            if (vm.selectedProposalType && vm.selectedProposalType.data && vm.selectedProposalType.data.process && (vm.expDurationHour || vm.expDurationMin)) {
                vm.expShowSubmit = false;
                var hour = 0;
                var min = 0;

                if (!vm.expDurationHour) hour = 0;
                else hour = Number(vm.expDurationHour);

                if (!vm.expDurationMin) min = 0;
                else min = Number(vm.expDurationMin);

                var totalExpMinute = (hour * 60) + min;

                socketService.$socket($scope.AppSocket, 'updateProposalTypeExpiryDuration', {
                    query: {_id: vm.selectedProposalType.data._id},
                    expiryDuration: totalExpMinute
                }, function (data) {
                    vm.expResMsg = $translate('SUCCESS');
                    $scope.safeApply();

                }, function (err) {
                    vm.expResMsg = err.error.message || $translate('FAIL');
                    $scope.safeApply();
                });
            }
            else {
                socketService.showErrorMessage("Incorrect expiration duration!");
            }
        };

        vm.resetProcess = function () {
            vm.getProposalTypeProcessSteps();
            //vm.chartViewModel.resetToDefaultData()
        };

        vm.updateProposalTypeProcessSteps = function (steps, links) {
            if (vm.selectedProposalType && vm.selectedProposalType.data && vm.selectedProposalType.data.process) {
                socketService.$socket($scope.AppSocket, 'updateProposalTypeProcessSteps', {
                    processId: vm.selectedProposalType.data.process,
                    steps: steps,
                    links: links
                }, function (data) {
                    console.log("updateProposalTypeProcessSteps", data);
                });
            }
            else {
                socketService.showErrorMessage("Incorrect proposal type data!");
            }
        };

        //get steps info for proposal type process
        vm.getProposalTypeProcessSteps = function () {
            if (vm.selectedProposalType && vm.selectedProposalType.data && vm.selectedProposalType.data.process) {
                socketService.$socket($scope.AppSocket, 'getProposalTypeProcessSteps', {
                    processId: vm.selectedProposalType.data.process
                }, function (data) {
                    console.log("getProposalTypeProcess", data);
                    vm.drawProcessSteps(data.data);
                });
            }
        };

        //get expiration duration for proposal type
        vm.getProposalTypeExpirationDuration = function () {
            if (vm.selectedProposalType && vm.selectedProposalType.data) {
                socketService.$socket($scope.AppSocket, 'getProposalTypeExpirationDuration', {
                    query: {_id: vm.selectedProposalType.data._id},
                }, function (data) {
                    var hour = Math.floor(Number(data.data.expirationDuration) / 60);
                    var min = Number(data.data.expirationDuration) % 60;
                    hour = hour.toString();
                    min = min.toString();
                    vm.expDurationHour = hour;
                    vm.expDurationMin = min;
                });
            }
        };

        var startX = 40;
        var startY = 130;
        vm.drawProcessSteps = function (data) {
            startX = 40;
            startY = 60;
            vm.chartViewModel = new flowchart.ChartViewModel();
            if (data && data.process && data.steps && data.steps.length > 0 && data.process.steps.length > 0) {
                var steps = {};
                for (var i = 0; i < data.steps.length; i++) {
                    steps[data.steps[i]._id] = data.steps[i];
                }
                //draw node from the first step in the steps link list
                var nexStep = steps[data.process.steps[0]];
                while (nexStep) {
                    vm.addNodeFromStep(nexStep);
                    nexStep = steps[nexStep.nextStepWhenApprove];
                }
            } else {
                $('#flowChart').height(550);
            }
            vm.chartViewModel.deselectAll();
            $scope.safeApply();
        };

        vm.addNodeFromStep = function (data) {
            var newNodeDataModel = {
                name: data.title,
                id: nextNodeID++,
                x: startX,
                y: startY,
                departmentData: {
                    id: data.department._id,
                    name: data.department.departmentName,
                    label: $translate("DEPARTMENT")
                },
                roleData: {id: data.role._id, name: data.role.roleName, label: $translate("ROLE")},
                inputConnectors: [
                    {
                        name: "X"
                    }
                ],
                outputConnectors: [
                    {
                        name: "APPROVE",
                        color: "#00ff00"
                    },
                    {
                        name: "REJECT",
                        color: "red"
                    }
                ]
            };
            var newNode = vm.chartViewModel.addNode(newNodeDataModel);
            newNode.select();

            startY += 120;
            if (startY >= 550) {
                $('#flowChart').height(startY + 50);
                //console.log('vm.chartViewModel',vm.chartViewModel);
                vm.chartViewModel.points[1].data.y = startY;
            } else {
                $('#flowChart').height(550);
            }
        };

        ///////////////////////////////// common functions
        vm.dateReformat = function (data) {
            if (!data) return '';
            return utilService.getFormatTime(data);
        };

        //////////////////////////////////// Message templates ///////////////////////////////////////

        (function () {

            // A copy of constMessageTypes
            vm.allMessageTypes = {};

            // The currently selected template.  Or if a new template is being created, the previously selected template (we can return to this if they cancel).
            vm.selectedMessageTemplate = null;

            // When set, this will be a reference to the template we are editing, or a new object when creating a new template
            vm.editingMessageTemplate = null;

            // This is the model that will appear in the form.  It is set to selectedMessageTemplate when vieweing, or to editingMessageTemplate when editing.
            vm.displayedMessageTemplate = null;

            // Will be 'create' or 'edit' or 'view' depending which mode we are in
            vm.messageTemplateMode = 'view';


            vm.getAllMessageTypes = function () {
                return $scope.$socketPromise('getAllMessageTypes', '').then(function (data) {
                    vm.allMessageTypes = data.data;
                });
            };

            vm.getPlatformMessageTemplates = function () {

                if (!vm.selectedPlatform) return;
                $scope.$socketPromise('getMessageTemplatesForPlatform', {platform: vm.selectedPlatform.id}).then(function (data) {
                    vm.messageTemplatesForPlatform = data.data;
                    console.log("vm.messageTemplatesForPlatform", vm.messageTemplatesForPlatform);
                    // Because selectedMessageTemplate is a reference and not an _id, it is now not holding the correct object, because the list of objects has been re-created
                    var oldSelectedMessageTemplateId = vm.selectedMessageTemplate && vm.selectedMessageTemplate._id;
                    selectMessageWithId(oldSelectedMessageTemplateId);
                    $scope.safeApply();
                }).done();
            };

            vm.startCreateMessageTemplate = function () {
                vm.messageTemplateMode = 'create';
                vm.editingMessageTemplate = {};
                vm.displayedMessageTemplate = vm.editingMessageTemplate;
                $scope.safeApply();
                $('#message-templates-scrolling-panel').scrollTop(0);
            };

            vm.startEditMessageTemplate = function () {
                if (vm.selectedMessageTemplate) {
                    vm.messageTemplateMode = 'edit';
                    // We clone the model, so we won't modify the existing selected model, in case the user cancels the edit
                    vm.editingMessageTemplate = Lodash.cloneDeep(vm.selectedMessageTemplate);
                    vm.displayedMessageTemplate = vm.editingMessageTemplate;
                }
            };

            vm.startDeleteMessageTemplate = function () {
                GeneralModal.confirm({
                    title: "Delete Message Template",
                    text: `Are you sure you want to delete the message template ${vm.selectedMessageTemplate.type} (${vm.selectedMessageTemplate.format})?`
                }).then(
                    () => $scope.$socketPromise('deleteMessageTemplateByIds', {
                        _ids: [vm.selectedMessageTemplate._id]
                    })
                ).then(
                    () => vm.getPlatformMessageTemplates()
                ).done();
            };

            vm.createMessageTemplate = function () {

                if (vm.editingMessageTemplate.format == 'smstpl') {
                    vm.editingMessageTemplate.type = vm.smsTitle;
                }
                var templateData = vm.editingMessageTemplate;
                templateData.platform = vm.selectedPlatform.id;
                vm.resetToViewMessageTemplate();
                $scope.$socketPromise('createMessageTemplate', templateData).then(
                    () => vm.getPlatformMessageTemplates()
                ).done();
            };

            vm.saveMessageTemplate = function () {
                var query = {_id: vm.editingMessageTemplate._id};

                if (vm.editingMessageTemplate.format == 'smstpl') {
                    vm.editingMessageTemplate.type = vm.smsTitle;
                }
                var updateData = vm.editingMessageTemplate;
                vm.resetToViewMessageTemplate();
                $scope.$socketPromise('updateMessageTemplate', {
                        query: query,
                        updateData: updateData
                    }
                ).then(function (data) {
                    var savedTemplateId = data.data._id;
                    return vm.getPlatformMessageTemplates().then(
                        () => selectMessageWithId(savedTemplateId)
                    );
                }).done();
            };

            vm.setSelectedMessageTemplateTypeIndex = function () {
                for (let messageType in vm.allMessageTypes) {
                    if (vm.allMessageTypes[messageType].name == vm.displayedMessageTemplate.type) {
                        vm.displayedMessageTemplate.typeIndex = messageType;
                        break;
                    }
                }
            };

            vm.resetToViewMessageTemplate = function () {
                vm.editingMessageTemplate = null;
                vm.messageTemplateMode = 'view';
                vm.displayedMessageTemplate = vm.selectedMessageTemplate;
                vm.previewMessageTemplate();
            };

            function selectMessageWithId(targetId) {
                vm.selectedMessageTemplate = vm.messageTemplatesForPlatform.filter(t => t._id === targetId)[0];
                vm.resetToViewMessageTemplate();
            }

            // We should place here all the data that we think the admin might want to use in the template
            // It should match the data that is made available on the server in messageDispatcher.js
            var exampleMetaData = {
                rewardTask: {
                    status: 'Started',
                    data: null,
                    createTime: new Date(),
                    inProvider: false,
                    requiredUnlockAmount: 600,
                    unlockedAmount: 0,
                    currentAmount: 750,
                    initAmount: 750,
                    isUnlock: false,
                    rewardType: 'GameProviderReward',
                    type: 'GameProviderReward'
                },
                proposalData: {
                    creator: {type: "admin", name: authService.adminName, id: authService.adminId},
                    createTime: new Date(),
                    data: {games: [], spendingAmount: '600', rewardAmount: '750', applyAmount: '500'},
                    priority: '0',
                    entryType: '1',
                    userType: '2',
                    noSteps: false,
                    process: {steps: [], status: 'Pending', createTime: new Date(),},
                    mainType: 'Reward',
                    type: {
                        rejectionType: 'rejectGameProviderReward',
                        executionType: 'executeGameProviderReward',
                        name: 'GameProviderReward'
                    },
                    proposalId: '364'
                },
                player: {
                    email: 'user.name@example.com',
                    isTestPlayer: false,
                    isRealPlayer: true,
                    feedbackTimes: 0,
                    receiveSMS: true,
                    realName: '',
                    registrationTime: new Date(),
                    lastAccessTime: new Date(),
                    isLogin: false,
                    lastLoginIp: '',
                    trustLevel: '2',
                    badRecords: [],
                    status: 1,
                    forbidProviders: [],
                    exp: 0,
                    games: ['574be0015463047e7909fa6d', '574be0015463047e7909fa6b'],
                    creditBalance: 0,
                    validCredit: 500,
                    lockedCredit: 750,
                    dailyTopUpSum: 0,
                    weeklyTopUpSum: 0,
                    topUpSum: 0,
                    topUpTimes: 0,
                    dailyConsumptionSum: 0,
                    weeklyConsumptionSum: 0,
                    consumptionSum: 0,
                    consumptionDetail: {},
                    consumptionTimes: 0,
                    bFirstTopUpReward: false,
                    playerLevel: {
                        levelUpConfig: [],
                        levelDownConfig: [],
                        reward: [],
                        platform: '574be0005463047e7909fa32',
                        value: 0,
                        name: 'Normal',
                    },
                    name: 'ChuckNorris',
                    playerId: '217387'
                }
            };

            vm.messageTemplateAllParams = generateAllParams();

            /** Converts the exampleMetaData object into an array of [path, value] pairs, such as: ['rewardTask.status', 'Started'] */
            function generateAllParams() {
                var params = [];
                listAllChildPaths(params, '', exampleMetaData);
                return params;
            }

            function listAllChildPaths(params, path, obj) {
                if (obj && typeof obj === 'object') {
                    const childKeys = Object.keys(obj);
                    childKeys.sort();
                    childKeys.forEach(
                        key => listAllChildPaths(params, path + (path ? '.' : '') + key, obj[key])
                    );
                } else {
                    params.push([path, obj]);
                }
            }

            vm.messageTemplateInsertParameter = function (param) {
                var box = document.getElementById('messageTemplateEditBox');
                // var param = vm.messageTemplateParameterToInsert;
                insertTextAtCaret(box, '{{' + param + '}}');
            };

            function insertTextAtCaret(textbox, textToInsert) {
                var currentText = textbox.value;
                var selectionStart = textbox.selectionStart;
                var selectionEnd = textbox.selectionEnd;
                textbox.value = currentText.substring(0, selectionStart) + textToInsert + currentText.substring(selectionEnd);
                var finalCaretPosition = selectionStart + textToInsert.length;
                textbox.selectionStart = finalCaretPosition;
                textbox.selectionEnd = finalCaretPosition;
                textbox.focus();
                // Modifying the textarea DOM will not immediately update the angular model, until the textarea is edited by keyboard.
                // (This could be a problem if the user immediately submits the data without doing any more editing.)
                // Solution: This will trigger angular to sync up with the new textarea value.
                $(textbox).trigger('input');
            }

            vm.previewMessageTemplate = function () {
                var templateString = vm.displayedMessageTemplate && vm.displayedMessageTemplate.content || '';
                var renderedTemplate = renderTemplate(templateString, exampleMetaData);

                $('.messageTemplatePreview').hide();
                if (isHTML(templateString)) {
                    $('.messageTemplatePreview.html').html(renderedTemplate).show();
                } else {
                    $('.messageTemplatePreview.text').text(renderedTemplate).show();
                }
            };

        }());

        // Note that these functions are cloned from messageDispatcher.js
        // Please keep them in sync!
        function renderTemplate(templateString, metaData) {
            const inputIsHTML = isHTML(templateString);

            if (inputIsHTML) {
                templateString = templateString.replace(/\n\n/g, '<p>').replace(/\n/g, '<br>');
            }

            const renderedString = templateString.replace(
                /{{([^}]*)}}/g,
                function (match, expr) {
                    let value = lookupPath(metaData, expr);
                    if (value === null || value === undefined) {
                        value = '';
                    }
                    if (inputIsHTML) {
                        value = stringToHTML(value);
                    }
                    return '' + value;
                }
            );

            return renderedString;
        }

        function lookupPath(obj, path) {
            const parts = path.split('.');
            parts.forEach(part => obj = obj[part]);
            return obj;
        }

        function isHTML(str) {
            return str.match(/<\w*>/);
        }

        function stringToHTML(str) {
            return String(str)
                .replace(/&/g, '&amp;')
                .replace(/"/g, '&quot;')
                .replace(/'/g, '&#39;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;');
        }

        vm.commonPageChangeHandler = function (curP, pageSize, objKey, serchFunc) {
            var isChange = false;
            if (!curP) {
                curP = 1;
            }
            if (vm[objKey] && pageSize != vm[objKey].limit) {
                isChange = true;
                vm[objKey].limit = pageSize;
            }
            if (vm[objKey] && (curP - 1) * pageSize != vm[objKey].index) {
                isChange = true;
                vm[objKey].index = (curP - 1) * pageSize;
            }
            if (isChange) return serchFunc.call(this);
        }

        vm.commonSortChangeHandler = function (a, objName, searchFunc) {
            if (!a.aaSorting[0] || !objName || !vm[objName] || !searchFunc) return;
            var sortCol = a.aaSorting[0][0];
            var sortDire = a.aaSorting[0][1];
            var temp = a.aoColumns[sortCol];
            var sortKey = temp ? temp.sortCol : '';
            // console.log(a, sortCol, sortKey);
            vm[objName].aaSorting = a.aaSorting;
            if (sortKey) {
                vm[objName].sortCol = vm[objName].sortCol || {};
                var preVal = vm[objName].sortCol[sortKey];
                vm[objName].sortCol[sortKey] = sortDire == "asc" ? 1 : -1;
                if (vm[objName].sortCol[sortKey] != preVal) {
                    vm[objName].sortCol = {};
                    vm[objName].sortCol[sortKey] = sortDire == "asc" ? 1 : -1;
                    searchFunc.call(this);
                }
            }
        }

        vm.callPlayer = function (data) {
            var phoneCall = {
                playerId: data.playerId,
                name: data.name,
                toText: data.name,
                platform: "jinshihao",
                loadingNumber: true,
            }
            $scope.initPhoneCall(phoneCall);
            socketService.$socket($scope.AppSocket, 'getPlayerPhoneNumber', {playerObjId: data._id}, function (data) {
                $scope.phoneCall.phone = data.data;
                $scope.phoneCall.loadingNumber = false;
                $scope.safeApply();
                $scope.makePhoneCall(vm.selectedPlatform.data.platformId);
            }, function (err) {
                $scope.phoneCall.loadingNumber = false;
                $scope.phoneCall.err = err.error.message;
                alert($scope.phoneCall.err);
                $scope.safeApply();
            }, true);
        }

        //////////////////////////initial socket actions//////////////////////////////////
        vm.setValue = function (obj, key, val) {
            if (obj && key) {
                obj[key] = val;
            }
            return val;
        }
        vm.clearDatePicker = function (id) {
            utilService.clearDatePickerDate(id);
        }

        ////////////////Mark::$viewContentLoaded function//////////////////
        //##Mark content loaded function
        // $scope.$on('$viewContentLoaded', function () {
        var eventName = "$viewContentLoaded";
        if (!$scope.AppSocket) {
            eventName = "socketConnected";
            $scope.$emit('childControllerLoaded', 'dashboardControllerLoaded');
        }
        $scope.$on(eventName, () => {
            initPageParam();
            loadPlatformData({loadAll: true, noParallelTrigger: true});
        });

        function initPageParam() {
            vm.queryPara = {};
            vm.forbidGameAddList = [];
            vm.forbidGameRemoveList = [];
            vm.phonePattern = /^[0-9]{8,11}$/;
            vm.showPlatformList = true;
            vm.showPlatformDropDownList = false;
            vm.prepareDemoPlayerPrefix();
            vm.showPlatformDetailTab(null);
            vm.showRewardSettingsTab(null);
            vm.showReapplyLostOrderTab(null);
            vm.showPlayerAccountingDetailTab(null);
            vm.platformAction = null;
            vm.showTopupTab(null);
            vm.addPlayerFeedbackResultData = {};
            vm.deletePlayerFeedbackResultData = {};
            vm.addPlayerFeedbackTopicData = {};
            vm.deletePlayerFeedbackTopicData = {};
            // vm.allGameStatusString = {};
            vm.credibilityRemarks = [];
            vm.gameStatus = {};
            vm.gameSmallShow = {};
            vm.ctiData = {};
            vm.gameGroupClickable = {
                inGameLoaded: true,
                outGameLoaded: true,
            };
            vm.filterGameType = 'all';
            vm.filterPlayGameType = 'all';

            vm.playerTableQuery = {limit: 10};

            utilService.actionAfterLoaded("#playerTablePage", function () {
                vm.playerTableQuery.pageObj = utilService.createPageForPagingTable("#playerTablePage", {pageSize: 10}, $translate, function (curP, pageSize) {
                    var isChange = false;
                    if (pageSize != vm.playerTableQuery.limit) {
                        isChange = true;
                        vm.playerTableQuery.limit = pageSize;
                    }
                    if ((curP - 1) * pageSize != vm.playerTableQuery.index) {
                        isChange = true;
                        vm.playerTableQuery.index = (curP - 1) * pageSize;
                    }
                    if (isChange) return vm.advancedPlayerQuery();
                });
                $('#playerDataTable').on('order.dt', function (event, a, b) {
                    // console.log(event, a, b);
                    if (!a.aaSorting[0]) return;
                    let sortCol = 8; //registrationTime
                    let sortDire = 'desc';
                    let sortKey = a.aoColumns[sortCol].data;
                    // vm.playerTableQuery.aaSorting = a.aaSorting;

                    if (sortKey) {
                        vm.playerTableQuery.sortCol = vm.playerTableQuery.sortCol || {};
                        var preVal = vm.playerTableQuery.sortCol[sortKey];
                        vm.playerTableQuery.sortCol[sortKey] = sortDire == "asc" ? 1 : -1;
                        if (vm.playerTableQuery.sortCol[sortKey] != preVal) {
                            vm.playerTableQuery.sortCol = {};
                            vm.playerTableQuery.sortCol[sortKey] = sortDire == "asc" ? 1 : -1;
                            // vm.advancedPlayerQuery();
                        }
                    }
                });
            });
            vm.getAllMessageTypes();
            vm.linkProvider();
            $.getScript("dataSource/data.js").then(
                () => {
                    $scope.creditChangeTypeStrings = creditChangeTypeStrings.sort(function (a, b) {
                        return a < b;
                    })
                }
            );

            window.document.title = $translate("Website Business") + "->" + $translate(vm.platformPageName);
            var showLeft = $cookies.get("platformShowLeft");
            if (showLeft === 'false') {
                vm.toggleShowPlatformList(false)
            }

            // Create the view-model for the chart and attach to the scope.
            //
            vm.chartViewModel = new flowchart.ChartViewModel();
            vm.chartViewModel.setEditable(true);
            vm.proposalChanged = false;
            vm.advancedQueryObj = {};

            $scope.$watch(function () {
                return socketService.getProposalNodeData()
            }, function (newValue, oldValue) {
                if (vm.editingNode) return;
                if (newValue !== oldValue) {
                    if (!newValue) return;
                    vm.curNodeID = newValue.id;
                    vm.tempNodeName = newValue.name;
                    vm.tempNodeDepartmentName = newValue.departmentData.name;
                    vm.tempNodeDepartmentID = newValue.departmentData.id;
                    vm.tempNodeRoleName = newValue.roleData.name;
                    vm.tempNodeRoleID = newValue.roleData.id;
                    $scope.safeApply();
                }
            });

            socketService.$socket($scope.AppSocket, 'getRewardTypesConfig', {}, function (data) {
                vm.rewardAttrConst = data.data;
            })
            vm.generalDataTableOptions = {
                "paging": true,
                columnDefs: [{targets: '_all', defaultContent: ' '}],
                dom: 'tpl',
                "aaSorting": [],
                destroy: true,
                "scrollX": true,
                // sScrollY: 350,
                scrollCollapse: true,
                // order: [[0, "desc"]],
                lengthMenu: [
                    [10, 25, 50, -1],
                    ['10', '25', '50', $translate('Show All')]
                ],
                "language": {
                    "info": "",
                    "emptyTable": "",
                    "paginate": {
                        "previous": $translate("PREVIOUS_PAGE"),
                        "next": $translate("NEXT_PAGE"),
                    },
                    "lengthMenu": $translate("lengthMenuText"),
                    sZeroRecords: ""
                },
                "drawCallback": function (settings) {
                    setTimeout(function () {
                        $(window).trigger('resize');
                    }, 100)
                }
            }
        }

        vm.initPlatformOfficer = function () {
            vm.csUrlSearchQuery = {
                admin: "",
                promoteWay: "",
                url: ""
            };
            vm.platformOfficer = {};
            vm.officerPromoteMessage = "";
            vm.officerCreateMessage = "";
            vm.officerUrlMessage = "";
            vm.deletePromoteMessage = "";
            vm.deleteOfficer = {};
            vm.currentUrlEditSelect = {};
            vm.urlTableEdit = false;
            vm.getAllPromoteWay();
            vm.getAllUrl();
        };

        vm.initClearMessage = function () {
            vm.officerPromoteMessage = "";
            vm.deletePromoteMessage = "";
            vm.officerCreateMessage = "";
            vm.deleteOfficerMessage = "";
            vm.officerUrlMessage = "";
        };

        vm.initCreateUrl = function () {
            vm.urlTableAdd = true;
            vm.addOfficerUrl = {};
            vm.currentlyFocusedAnnouncement = vm.addOfficerUrl;
        };

        vm.urlCancelEditOrAdd = function () {
            vm.urlTableEdit = false;
            vm.urlTableAdd = false;
        };

        vm.addPromoteWay = function () {
            let officerPromoteMessageId = $("#officer-promote-message");
            vm.initClearMessage();
            let sendData = {
                platformId: vm.selectedPlatform.id,
                name: vm.platformOfficer.way
            };
            socketService.$socket($scope.AppSocket, 'addPromoteWay', sendData, function () {
                    console.log("PromoteWay created");
                    vm.platformOfficer.way = "";
                    vm.officerPromoteMessage = $translate('Approved');
                    officerPromoteMessageId.css("color", "green");
                    officerPromoteMessageId.css("font-weight", "bold");
                    vm.getAllPromoteWay();
                    $scope.safeApply();
                },
                function (err) {
                    officerPromoteMessageId.css("color", "red");
                    officerPromoteMessageId.css("font-weight", "normal");
                    vm.officerPromoteMessage = err.error.message;
                    console.log(err);
                    $scope.safeApply();
                });
        };

        vm.getAllPromoteWay = function () {
            vm.allPromoteWay = {};
            let query = {
                platformId: vm.selectedPlatform.id
            };
            socketService.$socket($scope.AppSocket, 'getAllPromoteWay', query, function (data) {
                $scope.$evalAsync(() => {
                    vm.allPromoteWay = data.data;
                    console.log("vm.allPromoteWay", vm.allPromoteWay);

                })
            },
            function (err) {
                console.log(err);
            });
        };

        vm.deletePromoteWay = function () {
            let deletePromoteMessageId = $("#delete-promote-message");
            vm.initClearMessage();
            let sendData = {
                platformId: vm.selectedPlatform.id,
                promoteWayId: vm.deleteOfficer.promoteWay
            };
            socketService.$socket($scope.AppSocket, 'deletePromoteWay', sendData, function () {
                    console.log("PromoteWay deleted");
                    vm.deleteOfficer.promoteWay = "";
                    vm.deletePromoteMessage = $translate('Approved');
                    deletePromoteMessageId.css("color", "green");
                    deletePromoteMessageId.css("font-weight", "bold");
                    $scope.safeApply();
                },
                function (err) {
                    deletePromoteMessageId.css("color", "red");
                    deletePromoteMessageId.css("font-weight", "normal");
                    vm.deletePromoteMessage = err.error.message;
                    console.log(err);
                    $scope.safeApply();
                });
        };

        vm.createOfficer = function () {
            vm.initClearMessage();
            let createOfficerId = $("#officer-message");
            let sendData = {
                platformId: vm.selectedPlatform.id,
                name: vm.platformOfficer.name
            };
            socketService.$socket($scope.AppSocket, 'createOfficer', sendData, function () {
                    console.log("Officer created");
                    vm.platformOfficer.name = "";
                    vm.officerCreateMessage = $translate('Approved');
                    createOfficerId.css("color", "green");
                    createOfficerId.css("font-weight", "bold");
                    $scope.safeApply();
                },
                function (err) {
                    createOfficerId.css("color", "red");
                    createOfficerId.css("font-weight", "normal");
                    vm.officerCreateMessage = err.error.message;
                    console.log(err);
                    $scope.safeApply();
                });
        };

        vm.deleteOfficerById = function () {
            let deleteOfficerMessageId = $("#delete-officer-message");
            vm.initClearMessage();
            let sendData = {
                officerId: vm.deleteOfficer.officerId
            };
            socketService.$socket($scope.AppSocket, 'deleteOfficer', sendData, function () {
                    console.log("Officer deleted");
                    vm.deleteOfficer.officerId = "";
                    vm.deleteOfficerMessage = $translate('Approved');
                    deleteOfficerMessageId.css("color", "green");
                    deleteOfficerMessageId.css("font-weight", "bold");
                    $scope.safeApply();
                },
                function (err) {
                    deleteOfficerMessageId.css("color", "red");
                    deleteOfficerMessageId.css("font-weight", "normal");
                    vm.deleteOfficerMessage = err.error.message;
                    console.log(err);
                    $scope.safeApply();
                });
        };

        vm.pickOfficer = function () {
            vm.platformOfficer.url = '';
            $scope.safeApply();
        };

        vm.addUrl = function () {
            let officeraddUrlMessageId = $("#officer-addUrl-message");
            vm.initClearMessage();
            let sendData = {
                platformId: vm.selectedPlatform.id,
                officerId: vm.addOfficerUrl.officer,
                domain: vm.addOfficerUrl.url,
                way: vm.addOfficerUrl.promoteWay
            };
            vm.selectedOfficerUrl = null;
            socketService.$socket($scope.AppSocket, 'addUrl', sendData, function () {
                    console.log("Officer Url created");
                    vm.getAllUrl();
                    vm.addOfficerUrl.url = "";
                    vm.addOfficerUrl.officer = '';
                    vm.addOfficerUrl.promoteWay = '';
                    vm.officerUrlMessage = $translate('Approved');
                    officeraddUrlMessageId.css("color", "green");
                    officeraddUrlMessageId.css("font-weight", "bold");
                    $scope.safeApply();
                },
                function (err) {
                    officeraddUrlMessageId.css("color", "red");
                    officeraddUrlMessageId.css("font-weight", "normal");
                    vm.officerUrlMessage = err.error.errorMessage;
                    console.log(err);
                    $scope.safeApply();
                });
        };

        vm.deleteUrl = function () {
            let officeraddUrlMessageId = $("#officer-addUrl-message");
            vm.initClearMessage();
            let sendData = {
                urlId: vm.currentUrlEditSelect._id,
            };
            vm.selectedOfficerUrl = null;
            socketService.$socket($scope.AppSocket, 'deleteUrl', sendData, function () {
                    console.log("Url deleted");
                    vm.getAllUrl();
                    vm.officerUrlMessage = $translate('Approved');
                    officeraddUrlMessageId.css("color", "green");
                    officeraddUrlMessageId.css("font-weight", "bold");
                    $scope.safeApply();
                },
                function (err) {
                    officeraddUrlMessageId.css("color", "red");
                    officeraddUrlMessageId.css("font-weight", "normal");
                    vm.officerUrlMessage = err.error.message;
                    console.log(err);
                    $scope.safeApply();
                });
        };

        vm.updateUrl = function () {
            let officeraddUrlMessageId = $("#officer-addUrl-message");
            vm.initClearMessage();
            let sendData = {
                urlId: vm.currentUrlEditSelect._id,
                domain: vm.currentUrlEditSelect.domain,
                officerId: vm.currentUrlEditSelect.admin,
                way: vm.currentUrlEditSelect.way,
            };
            console.log("sendData", sendData);
            vm.selectedOfficerUrl = null;
            socketService.$socket($scope.AppSocket, 'updateUrl', sendData, function () {
                    console.log("Url updated");
                    vm.getAllUrl();
                    vm.officerUrlMessage = $translate('Approved');
                    officeraddUrlMessageId.css("color", "green");
                    officeraddUrlMessageId.css("font-weight", "bold");
                    $scope.safeApply();
                },
                function (err) {
                    vm.getAllUrl();
                    officeraddUrlMessageId.css("color", "red");
                    officeraddUrlMessageId.css("font-weight", "normal");
                    vm.officerUrlMessage = err.error.message;
                    console.log(err);
                    $scope.safeApply();
                });
        }

        vm.getPlayerCredibilityComment = function (playerObjId) {
            playerObjId = playerObjId || vm.selectedSinglePlayer._id;
            vm.playerCredibilityComment = [];
            let query = {
                playerObjId: playerObjId
            };
            socketService.$socket($scope.AppSocket, 'getUpdateCredibilityLog', query, function (data) {
                    $scope.$evalAsync(() => {
                        vm.playerCredibilityComment = data.data;
                        for (let i = 0, len = vm.playerCredibilityComment.length; i < len; i++) {
                            let log = vm.playerCredibilityComment[i];
                            log.remarks$ = "";
                            for (let j = 0, len = log.credibilityRemarkNames.length; j < len; j++) {
                                log.remarks$ += log.credibilityRemarkNames[j];
                                j < (len - 1) ? log.remarks$ += ", " : null;
                            }
                            log.createTime = $scope.timeReformat(new Date(log.createTime));
                        }
                        console.log("vm.playerCredibilityComment", vm.playerCredibilityComment);
                    });
                },
                function (err) {
                    console.log(err);
                });
        };
        vm.setupRemarksMultiInputMultiMsg = function () {
            let remarkSelect = $('select#selectCredibilityRemarkMultiMsg');
            if (remarkSelect.css('display') && remarkSelect.css('display').toLowerCase() === "none") {
                return;
            }
            remarkSelect.multipleSelect({
                showCheckbox: true,
                allSelected: $translate("All Selected"),
                selectAllText: $translate("Select All"),
                displayValues: false,
                countSelected: $translate('# of % selected')
            });
        };

        vm.setupRemarksMultiInput = function () {
            let remarkSelect = $('select#selectCredibilityRemark');
            // if (remarkSelect.css('display') && remarkSelect.css('display').toLowerCase() === "none") {
            //     return;
            // }
            remarkSelect.multipleSelect({
                showCheckbox: true,
                allSelected: $translate("All Selected"),
                selectAllText: $translate("Select All"),
                displayValues: false,
                countSelected: $translate('# of % selected')
            });
            remarkSelect.multipleSelect('refresh');
        };

        utilService.actionAfterLoaded('#resetPlayerQuery', function () {
            if(!localStorage.getItem('custom_history')) {
                localStorage.setItem('custom_history', '');
            }

            $( "#playerTableNameSearch" ).autocomplete({
                source: function( req, resp ) {
                    var term = req.term;
                    var data = [];
                    var temp = localStorage.getItem('custom_history');
                    if (temp.length) {
                        temp = temp.split(",");
                        data = temp;
                    }

                    data = $.map(data,function(val){
                        if(val.indexOf(term) != -1)
                            return val;
                        else
                            return null;
                    });
                    resp( data );

                }
            });

            $('#playerTableNameSearch').on('blur', function() {
                var data = [];
                var temp = localStorage.getItem('custom_history');
                if (temp.length) {
                    temp = temp.split(",");
                    data = temp;
                }
                if ($.trim(this.value).length > 0) {
                    if(data.indexOf(this.value) != -1){
                        return;
                    }
                    data.push(this.value);
                    localStorage.setItem('custom_history', data);
                }
            });

            $('body .ui-autocomplete').css({
                "overflow-y": "scroll",
                "max-height": "200px",
            });

            $('#resetPlayerQuery').off('click');
            $('#resetPlayerQuery').click(function () {
                utilService.clearDatePickerDate('#regDateTimePicker');
                utilService.clearDatePickerDate('#regEndDateTimePicker');
                utilService.clearDatePickerDate('#lastAccessDateTimePicker');
                utilService.clearDatePickerDate('#lastAccessEndDateTimePicker');
                $("select#selectCredibilityRemark").multipleSelect("enable");
                $("select#selectCredibilityRemark").multipleSelect("uncheckAll");
                vm.playerAdvanceSearchQuery = {
                    creditOperator: ">=",
                    playerType: 'Real Player (all)',
                    platformList: []
                };
                setTimeout(function(){$("select#productName").selectpicker('refresh')},100);

                $scope.$evalAsync();
                vm.getPlayersByAdvanceQueryDebounced(function () {
                });
                vm.advancedQueryObj = {
                    creditOperator: ">=",
                    playerType: 'Real Player (all)'
                };
                vm.advancedPlayerQuery(true);
            })

        });

        vm.setupRemarksMultiInputFeedback = function () {
            let remarkSelect = $('select#selectCredibilityRemarkFeedback');
            // if (remarkSelect.css('display') && remarkSelect.css('display').toLowerCase() === "none") {
            //     return;
            // }
            remarkSelect.multipleSelect({
                showCheckbox: true,
                allSelected: $translate("All Selected"),
                selectAllText: $translate("Select All"),
                displayValues: false,
                countSelected: $translate('# of % selected')
            });
            remarkSelect.multipleSelect("uncheckAll");
        };
        vm.setupGameProviderMultiInputFeedback = function () {
            let gameProviderSelect = $('select#selectGameProvider');
            gameProviderSelect.multipleSelect({
                showCheckbox: true,
                allSelected: $translate("All Selected"),
                selectAllText: $translate("Select All"),
                displayValues: false,
                countSelected: $translate('# of % selected')
            });
            gameProviderSelect.multipleSelect("uncheckAll");
        };

        vm.updatePlayerQuery = function (playerQuery) {
            utilService.hideAllPopoversExcept();
            vm.advancedQueryObj = $.extend({}, vm.advancedQueryObj, playerQuery);
            for (let k in playerQuery) {
                if (!playerQuery[k] || $.isEmptyObject(playerQuery)) {
                    delete vm.advancedQueryObj[k];
                }
            }
        }

        vm.getPlayersByAdvanceQuery = function (playerQuery) {
            // NOTE: If the response is ignoring your field filter and returning all players, please check that the
            // field is whitelisted in buildPlayerQueryString() in encrypt.js
            utilService.hideAllPopoversExcept();
            vm.advancedQueryObj = $.extend({}, vm.advancedQueryObj, playerQuery);
            for (let k in playerQuery) {
                if (!playerQuery[k] || $.isEmptyObject(playerQuery)) {
                    delete vm.advancedQueryObj[k];
                }
            }

            if (playerQuery.playerId) {
                var te = $("#playerTable-search-filter > div").not(":nth-child(2)").find(".form-control");
                te.prop("disabled", true).css("background-color", "#eee");
                te.find("input").prop("disabled", true).css("background-color", "#eee");
                $("select#selectCredibilityRemark").multipleSelect("disable");
            } else if (playerQuery.name) {
                var te = $("#playerTable-search-filter > div").not(":nth-child(4)").not(":nth-child(1)").find(".form-control");
                te.prop("disabled", true).css("background-color", "#eee");
                te.find("input").prop("disabled", true).css("background-color", "#eee");
                $("select#selectCredibilityRemark").multipleSelect("disable");
            } else if (playerQuery.phoneNumber) {
                var te = $("#playerTable-search-filter > div").not(":nth-child(11)").find(".form-control");
                te.prop("disabled", true).css("background-color", "#eee");
                te.find("input").prop("disabled", true).css("background-color", "#eee");
                $("select#selectCredibilityRemark").multipleSelect("disable");
            } else if (playerQuery.bankAccount) {
                let te = $("#playerTable-search-filter > div").not(":nth-child(12)").find(".form-control");
                te.prop("disabled", true).css("background-color", "#eee");
                te.find("input").prop("disabled", true).css("background-color", "#eee");
                $("select#selectCredibilityRemark").multipleSelect("disable");
            } else if (playerQuery.email) {
                let te = $("#playerTable-search-filter > div").not(":nth-child(13)").find(".form-control");
                te.prop("disabled", true).css("background-color", "#eee");
                te.find("input").prop("disabled", true).css("background-color", "#eee");
                $("select#selectCredibilityRemark").multipleSelect("disable");
            } else {
                $("#playerTable-search-filter .form-control").prop("disabled", false).css("background-color", "#fff");
                $("#playerTable-search-filter .form-control input").prop("disabled", false).css("background-color", "#fff");
                $("select#selectCredibilityRemark").multipleSelect("enable");
            }
            if (playerQuery.playerId || playerQuery.name || playerQuery.phoneNumber || playerQuery.bankAccount || playerQuery.email) {
                let platformIdList;

                if(vm.playerAdvanceSearchQuery && vm.playerAdvanceSearchQuery.platformList && vm.playerAdvanceSearchQuery.platformList.length){
                    platformIdList = vm.playerAdvanceSearchQuery.platformList;
                }else{
                    platformIdList = vm.allPlatformData.map(a => a._id);
                }

                var sendQuery = {
                    platformId: platformIdList,
                    query: playerQuery,
                    index: 0,
                    limit: 100
                };
                socketService.$socket($scope.AppSocket, 'getPagePlayerByAdvanceQuery', sendQuery, function (data) {
                    $scope.$evalAsync(() => {
                        console.log('playerData', data);
                        let size = data.data.size || 0;
                        let result = data.data.data || [];
                        let found = false;

                        // if (size == 1) {
                        //     //search and append to player table
                        //     if (playerQuery.name) {
                        //         let sendQuery2 = {
                        //             platformId: platformIdList,
                        //             // query: {
                        //             //     "referral": data.data.data[0]._id
                        //             // },
                        //             index: 0,
                        //             limit: 100
                        //         };
                        //         socketService.$socket($scope.AppSocket, 'getPagePlayerByAdvanceQuery', sendQuery2, function (data2) {
                        //             size += data2.data.size || 0;
                        //             result = result.concat(data2.data.data);
                        //             vm.playerTable.context[0].aaSorting = [];
                        //
                        //             setPlayerTableData(result);
                        //             utilService.hideAllPopoversExcept();
                        //             vm.searchPlayerCount = size;
                        //             vm.playerTableQuery.pageObj.init({maxCount: size}, true);
                        //             vm.playerTable.rows(function (idx, rowData, node) {
                        //                 if (rowData._id == result[0]._id) {
                        //                     vm.playerTableRowClicked(rowData);
                        //                     vm.selectedPlayersCount = 1;
                        //                     $(node).addClass('selected');
                        //                     found = true;
                        //                 }
                        //             })
                        //         });
                        //     }
                        //     else {
                        //         setPlayerTableData(result);
                        //         utilService.hideAllPopoversExcept();
                        //         vm.searchPlayerCount = size;
                        //         vm.playerTableQuery.pageObj.init({maxCount: size}, true);
                        //         vm.playerTable.rows(function (idx, rowData, node) {
                        //             if (rowData._id == result[0]._id) {
                        //                 vm.playerTableRowClicked(rowData);
                        //                 vm.selectedPlayersCount = 1;
                        //                 $(node).addClass('selected');
                        //                 found = true;
                        //             }
                        //         })
                        //     }
                        // }
                        // else {
                        //     setPlayerTableData(result);
                        //     utilService.hideAllPopoversExcept();
                        //     vm.searchPlayerCount = size;
                        //     vm.playerTableQuery.pageObj.init({maxCount: size}, true);
                        // }

                        setPlayerTableData(result);
                        utilService.hideAllPopoversExcept();
                        vm.searchPlayerCount = size;
                        vm.playerTableQuery.pageObj.init({maxCount: size}, true);

                        if (!found) {
                            vm.selectedSinglePlayer = null;
                            vm.selectedPlayersCount = 0;
                        }
                    })
                });
            }
        };

        vm.isForbidChanged = function (newForbid, oldForbid) {
            var disableSubmit = true;
            if (!oldForbid) {
                oldForbid = [];
            }
            if (newForbid.length == oldForbid.length) {
                for (let i = 0; i < newForbid.length; i++) {
                    if (oldForbid.indexOf(newForbid[i]) > -1) {
                        disableSubmit = true;
                    } else {
                        return disableSubmit = false;
                    }
                }
            } else {
                disableSubmit = false;
            }
            return disableSubmit;
        }

        vm.findForbidCheckedName = function (forbidArray, forbidObj) {
            var forbidNames = [];
            for (let i = 0; i < forbidArray.length; i++) {
                for (let j = 0; j < forbidObj.length; j++) {
                    if (forbidArray[i] == forbidObj[j]._id) {
                        forbidNames[i] = forbidObj[j].name;
                        break;
                    }
                }
                if (!forbidNames[i]) {
                    forbidNames[i] = $translate(forbidArray[i]);
                }
            }
            return forbidNames;
        }

        vm.findForbidCheckedTitle = function (forbidArray, forbidObj) {
            var forbidNames = [];
            for (let i = 0; i < forbidArray.length; i++) {
                for (let j = 0; j < forbidObj.length; j++) {
                    if (forbidArray[i] == forbidObj[j]._id) {
                        forbidNames[i] = forbidObj[j].rewardTitle;
                        break;
                    }
                }
                if (!forbidNames[i]) {
                    forbidNames[i] = $translate(forbidArray[i]);
                }
            }
            return forbidNames;
        }

        //region forbidGame
        vm.updateForbidGameLog = function (playerId, forbidGame) {
            let queryData = {
                playerId: playerId,
                remark: vm.forbidGameRemark,
                adminId: authService.adminId,
                forbidGameNames: forbidGame
            };

            socketService.$socket($scope.AppSocket, 'createForbidGameLog', queryData, function (created) {
                vm.forbidGameRemark = '';
                console.log('Forbid game log created', created);
            });
        }

        vm.updateBatchForbidGameLog = function (data) {

            let proms = []
            data.data.forEach(item => {
                let prom = vm.updateForbidGameLog(item._id, vm.findForbidCheckedName(item.forbidProviders, vm.allGameProviders));
                proms.push(prom);
            });
            return Promise.all(proms).then(data => {
                vm.batchPermitModifySucc = true;
                return data;
            });
        }
        /*vm.updateForbidRewardPointsEventLog = function (playerId, forbidRewardPointsEvent) {
            let queryData = {
                playerId: playerId,
                // remark: vm.forbidGameRemark,
                adminId: authService.adminId,
                forbidRewardPointsEventName: forbidRewardPointEvent
            };

            socketService.$socket($scope.AppSocket, 'createForbidRewardPointsEventLog', queryData, function (created) {
                //vm.forbidGameRemark = '';
                console.log('Forbid RewardPointsEvent log created', created);
            });
        }*/

        $("button.forbidGameConfirm").on('click', function () {
            vm.getForbidGame();
        });
        vm.getForbidGame = function () {
            vm.forbidGameLog = {};
            utilService.actionAfterLoaded('#modalForbidGameLog.in #forbidGameSearch .endTime', function () {
                vm.forbidGameLog.startTime = utilService.createDatePicker('#forbidGameSearch .startTime');
                vm.forbidGameLog.endTime = utilService.createDatePicker('#forbidGameSearch .endTime');
                vm.forbidGameLog.startTime.data('datetimepicker').setDate(utilService.setLocalDayStartTime(utilService.setNDaysAgo(new Date(), 180)));
                vm.forbidGameLog.endTime.data('datetimepicker').setDate(utilService.setLocalDayEndTime(new Date()));
                vm.forbidGameLog.pageObj = utilService.createPageForPagingTable("#forbidGameTblPage", {}, $translate, function (curP, pageSize) {
                    vm.commonPageChangeHandler(curP, pageSize, "forbidGameLog", vm.getForbidGameLog)
                });
                vm.getForbidGameLog(true);
            });
        }
        vm.getForbidGameLog = function (newSearch) {
            var sendQuery = {
                startTime: vm.forbidGameLog.startTime.data('datetimepicker').getLocalDate(),
                endTime: vm.forbidGameLog.endTime.data('datetimepicker').getLocalDate(),
                playerId: vm.prohibitGamePopover._id,
                limit: newSearch ? 10 : vm.forbidGameLog.limit,
                index: newSearch ? 0 : vm.forbidGameLog.index,
                sortCol: vm.forbidGameLog.sortCol || undefined
            };
            if (vm.forbidGameLog.status) {
                sendQuery.status = vm.forbidGameLog.status;
            }
            vm.forbidGameLog.isSearching = true;
            console.log("Second:Query:", sendQuery);
            $scope.safeApply();
            socketService.$socket($scope.AppSocket, 'getForbidGameLog', sendQuery, function (data) {
                var showData = data.data ? data.data.data.map(item => {
                    item.createTime$ = vm.dateReformat(item.createTime);
                    item.curAmount$ = item.data && item.data.curAmount ? item.data.curAmount.toFixed(2) : 0;
                    for (let i = 0; i < item.forbidGameNames.length; i++) {
                        if (i > 0)
                            item.forbidGameNames[i] = " " + item.forbidGameNames[i];
                    }
                    return item;
                }) : [];
                vm.forbidGameLog.totalCount = data.data ? data.data.total : 0;
                let summary = data.data ? data.data.summary : {sumAmt: 0};
                console.log("ForbidGameLog:length:", showData);
                vm.drawForbidGameLogTbl(showData, vm.forbidGameLog.totalCount, newSearch, summary);
                vm.forbidGameLog.isSearching = false;
                $scope.safeApply();
            });
        }
        vm.drawForbidGameLogTbl = function (showData, size, newSearch, summary) {
            var tableOptions = $.extend({}, vm.generalDataTableOptions, {
                data: showData,
                "aaSorting": vm.forbidGameLog.aaSorting || [],
                aoColumnDefs: [
                    {'sortCol': 'createTime$', bSortable: true, 'aTargets': [0]},
                    {'sortCol': 'admin.adminName', bSortable: true, 'aTargets': [1]},
                    {targets: '_all', defaultContent: ' ', bSortable: false}
                ],
                columns: [
                    {title: $translate('date'), data: "createTime$"},
                    {title: $translate('OPERATOR_NAME'), data: "admin.adminName"},
                    {title: $translate('BANNED_FROM_THESE_PROVIDERS'), data: "forbidGameNames"},
                    {title: $translate('REMARK'), data: "remark"},
                ],
                "paging": false,
            });
            utilService.createDatatableWithFooter("#forbidGameTbl", tableOptions, {});

            // var aTable = $("#forbidRewardTbl").DataTable(tableOptions);
            vm.forbidGameLog.pageObj.init({maxCount: size}, newSearch);
            $("#forbidGameTbl").off('order.dt');
            $("#forbidGameTbl").on('order.dt', function (event, a, b) {
                vm.commonSortChangeHandler(a, 'forbidGameLog', vm.getForbidGameLog);
            });
            $('#forbidGameTbl').resize();
            $scope.safeApply();
        }
        //endregion

        //region forbidTopUp
        vm.updateForbidTopUpLog = function (playerId, forbidTopUp) {
            let queryData = {
                playerId: playerId,
                remark: vm.forbidTopUpRemark,
                adminId: authService.adminId,
                forbidTopUpNames: forbidTopUp
            };

            socketService.$socket($scope.AppSocket, 'createForbidTopUpLog', queryData, function (created) {
                vm.forbidTopUpRemark = '';
                console.log('Forbid topup log created', created);
            });
        }

        vm.updateBatchForbidTopUpLog = function (data) {
            let proms = [];

            data.data.forEach(item => {
                let forbidTopUpNames = [];
                for (let i = 0; i < item.forbidTopUpType.length; i++) {
                    forbidTopUpNames[i] = vm.merchantTopupTypeJson[item.forbidTopUpType[i]];
                }
                let prom = vm.updateForbidTopUpLog(item._id, forbidTopUpNames);
                proms.push(prom);
            })
            return Promise.all(proms).then(data => {
                vm.batchPermitModifySucc = true;
                return data;
            })
        }

        $("button.forbidTopUpConfirm").on('click', function () {
            vm.getForbidTopUp();
        });
        vm.getForbidTopUp = function () {
            vm.forbidTopUpLog = {};
            utilService.actionAfterLoaded('#modalForbidTopUpLog.in #forbidTopUpSearch .endTime', function () {
                vm.forbidTopUpLog.startTime = utilService.createDatePicker('#forbidTopUpSearch .startTime');
                vm.forbidTopUpLog.endTime = utilService.createDatePicker('#forbidTopUpSearch .endTime');
                vm.forbidTopUpLog.startTime.data('datetimepicker').setDate(utilService.setLocalDayStartTime(utilService.setNDaysAgo(new Date(), 180)));
                vm.forbidTopUpLog.endTime.data('datetimepicker').setDate(utilService.setLocalDayEndTime(new Date()));
                vm.forbidTopUpLog.pageObj = utilService.createPageForPagingTable("#forbidTopUpTblPage", {}, $translate, function (curP, pageSize) {
                    vm.commonPageChangeHandler(curP, pageSize, "forbidTopUpLog", vm.getForbidTopUpLog)
                });
                vm.getForbidTopUpLog(true);
            });
        }
        vm.getForbidTopUpLog = function (newSearch) {
            var sendQuery = {
                startTime: vm.forbidTopUpLog.startTime.data('datetimepicker').getLocalDate(),
                endTime: vm.forbidTopUpLog.endTime.data('datetimepicker').getLocalDate(),
                playerId: vm.forbidTopUpPopover._id,
                limit: newSearch ? 10 : vm.forbidTopUpLog.limit,
                index: newSearch ? 0 : vm.forbidTopUpLog.index,
                sortCol: vm.forbidTopUpLog.sortCol || undefined
            };
            if (vm.forbidTopUpLog.status) {
                sendQuery.status = vm.forbidTopUpLog.status;
            }
            vm.forbidTopUpLog.isSearching = true;
            console.log("Second:Query:", sendQuery);
            $scope.safeApply();
            socketService.$socket($scope.AppSocket, 'getForbidTopUpLog', sendQuery, function (data) {
                var showData = data.data ? data.data.data.map(item => {
                    item.createTime$ = vm.dateReformat(item.createTime);
                    item.curAmount$ = item.data && item.data.curAmount ? item.data.curAmount.toFixed(2) : 0;
                    for (let i = 0; i < item.forbidTopUpNames.length; i++) {
                        if (i > 0){

                            let key = commonService.getKeyFromValue(vm.merchantTopupTypeJson, item.forbidTopUpNames[i])
                            if (key) {
                                item.forbidTopUpNames[i] = " " + $translate(item.forbidTopUpNames[i]) + "(" + item.forbidTopUpNames[i] +")" + ": " + key;
                            }
                            else {
                                item.forbidTopUpNames[i] = " " + item.forbidTopUpNames[i];
                            }
                        }
                        else{

                            let key = commonService.getKeyFromValue(vm.merchantTopupTypeJson, item.forbidTopUpNames[0]);
                            if (key){
                                item.forbidTopUpNames[0] = $translate(item.forbidTopUpNames[0]) + "(" + item.forbidTopUpNames[0] +")" + ": " + key;
                            }
                        }
                    }
                    return item;
                }) : [];
                vm.forbidTopUpLog.totalCount = data.data ? data.data.total : 0;
                let summary = data.data ? data.data.summary : {sumAmt: 0};
                console.log("ForbidTopUpLog:length:", showData);
                vm.drawForbidTopUpLogTbl(showData, vm.forbidTopUpLog.totalCount, newSearch, summary);
                vm.forbidTopUpLog.isSearching = false;
                $scope.safeApply();
            });
        };

        vm.drawForbidTopUpLogTbl = function (showData, size, newSearch, summary) {
            var tableOptions = $.extend({}, vm.generalDataTableOptions, {
                data: showData,
                "aaSorting": vm.forbidTopUpLog.aaSorting || [],
                aoColumnDefs: [
                    {'sortCol': 'createTime$', bSortable: true, 'aTargets': [0]},
                    {'sortCol': 'admin.adminName', bSortable: true, 'aTargets': [1]},
                    {targets: '_all', defaultContent: ' ', bSortable: false}
                ],
                columns: [
                    {title: $translate('date'), data: "createTime$"},
                    {title: $translate('OPERATOR_NAME'), data: "admin.adminName"},
                    {title: $translate('ForbidTopupTypes'), data: "forbidTopUpNames"},
                    {title: $translate('REMARK'), data: "remark"},
                ],
                "paging": false,
            });
            utilService.createDatatableWithFooter("#forbidTopUpTbl", tableOptions, {});

            // var aTable = $("#forbidRewardTbl").DataTable(tableOptions);
            vm.forbidTopUpLog.pageObj.init({maxCount: size}, newSearch);
            $("#forbidTopUpTbl").off('order.dt');
            $("#forbidTopUpTbl").on('order.dt', function (event, a, b) {
                vm.commonSortChangeHandler(a, 'forbidTopUpLog', vm.getForbidTopUpLog);
            });
            $('#forbidTopUpTbl').resize();
            $scope.safeApply();
        }
        //endregion

        //region forbidReward
        vm.updateForbidRewardLog = function (playerId, forbidReward, playerObj) {
            if (playerObj && playerObj.forbidLevelUpReward) {
                forbidReward.push("系统升级优惠");
            }

            if (playerObj && playerObj.forbidLevelMaintainReward) {
                forbidReward.push("系统保级优惠");
            }

            let queryData = {
                playerId: playerId,
                remark: vm.forbidRewardRemark,
                adminId: authService.adminId,
                forbidRewardNames: forbidReward
            };
            socketService.$socket($scope.AppSocket, 'createForbidRewardLog', queryData, function (created) {
                vm.forbidRewardRemark = '';
                console.log('Forbid reward log created', created);
            });
        }

        vm.updateBatchForbidRewardLog = function (data) {
            let proms = [];

            data.data.forEach(player => {
                let prom = vm.updateForbidRewardLog(player._id, vm.findForbidCheckedName(player.forbidRewardEvents, vm.allRewardEvent), player);
                proms.push(prom);
            });

            return Promise.all(proms).then(data => {
                vm.batchPermitModifySucc = true;
                return data;
            })
        }

        $("button.forbidRewardEventConfirm").on('click', function () {
            vm.getForbidReward();
        });
        vm.getForbidReward = function () {
            vm.forbidRewardLog = {};
            utilService.actionAfterLoaded('#modalForbidRewardLog.in #forbidRewardSearch .endTime', function () {
                vm.forbidRewardLog.startTime = utilService.createDatePicker('#forbidRewardSearch .startTime');
                vm.forbidRewardLog.endTime = utilService.createDatePicker('#forbidRewardSearch .endTime');
                vm.forbidRewardLog.startTime.data('datetimepicker').setDate(utilService.setLocalDayStartTime(utilService.setNDaysAgo(new Date(), 180)));
                vm.forbidRewardLog.endTime.data('datetimepicker').setDate(utilService.setLocalDayEndTime(new Date()));
                vm.forbidRewardLog.pageObj = utilService.createPageForPagingTable("#forbidRewardTblPage", {}, $translate, function (curP, pageSize) {
                    vm.commonPageChangeHandler(curP, pageSize, "forbidRewardLog", vm.getForbidRewardLog)
                });
                vm.getForbidRewardLog(true);
            });
        }
        vm.getForbidRewardLog = function (newSearch) {
            var sendQuery = {
                startTime: vm.forbidRewardLog.startTime.data('datetimepicker').getLocalDate(),
                endTime: vm.forbidRewardLog.endTime.data('datetimepicker').getLocalDate(),
                playerId: vm.forbidRewardEventPopover._id,
                limit: newSearch ? 10 : vm.forbidRewardLog.limit,
                index: newSearch ? 0 : vm.forbidRewardLog.index,
                sortCol: vm.forbidRewardLog.sortCol || undefined
            };
            if (vm.forbidRewardLog.status) {
                sendQuery.status = vm.forbidRewardLog.status;
            }
            vm.forbidRewardLog.isSearching = true;
            console.log("Second:Query:", sendQuery);
            $scope.safeApply();
            socketService.$socket($scope.AppSocket, 'getForbidRewardLog', sendQuery, function (data) {
                var showData = data.data ? data.data.data.map(item => {
                    item.createTime$ = vm.dateReformat(item.createTime);
                    item.curAmount$ = item.data && item.data.curAmount ? item.data.curAmount.toFixed(2) : 0;
                    for (let i = 0; i < item.forbidRewardNames.length; i++) {
                        if (i > 0)
                            item.forbidRewardNames[i] = " " + item.forbidRewardNames[i];
                    }
                    return item;
                }) : [];
                vm.forbidRewardLog.totalCount = data.data ? data.data.total : 0;
                let summary = data.data ? data.data.summary : {sumAmt: 0};
                console.log("ForbidRewardLog:length:", showData);
                vm.drawForbidRewardLogTbl(showData, vm.forbidRewardLog.totalCount, newSearch, summary);
                vm.forbidRewardLog.isSearching = false;
                $scope.safeApply();
            });
        }
        vm.drawForbidRewardLogTbl = function (showData, size, newSearch, summary) {
            var tableOptions = $.extend({}, vm.generalDataTableOptions, {
                data: showData,
                "aaSorting": vm.forbidRewardLog.aaSorting || [],
                aoColumnDefs: [
                    {'sortCol': 'createTime$', bSortable: true, 'aTargets': [0]},
                    {'sortCol': 'admin.adminName', bSortable: true, 'aTargets': [1]},
                    {targets: '_all', defaultContent: ' ', bSortable: false}
                ],
                columns: [
                    {title: $translate('date'), data: "createTime$"},
                    {title: $translate('OPERATOR_NAME'), data: "admin.adminName"},
                    {title: $translate('FORBID_REWARD'), data: "forbidRewardNames"},
                    {title: $translate('REMARK'), data: "remark"},
                ],
                "paging": false,
            });
            utilService.createDatatableWithFooter("#forbidRewardTbl", tableOptions, {});

            // var aTable = $("#forbidRewardTbl").DataTable(tableOptions);
            vm.forbidRewardLog.pageObj.init({maxCount: size}, newSearch);
            $("#forbidRewardTbl").off('order.dt');
            $("#forbidRewardTbl").on('order.dt', function (event, a, b) {
                vm.commonSortChangeHandler(a, 'forbidRewardLog', vm.getForbidRewardLog);
            });
            $('#forbidRewardTbl').resize();
            $scope.safeApply();
        }
        //endregion here

        //Region for forbidRewardPointsEvent
        vm.updateForbidRewardPointsEventLog = function (playerId, forbidRewardPointsEvent) {
            let queryData = {
                playerId: playerId,
                remark: vm.forbidRewardPointsEventRemark,
                adminId: authService.adminId,
                forbidRewardPointsEventNames: forbidRewardPointsEvent
            };

            socketService.$socket($scope.AppSocket, 'createForbidRewardPointsEventLog', queryData, function (created) {
                vm.forbidRewardPointsEventRemark = '';
                console.log('Forbid reward points event log created', created);
            });
        }
        vm.updateBatchForbidRewardPointsEventLog = function (data) {
            let proms = [];

            data.data.forEach(player => {
                let prom = vm.updateForbidRewardPointsEventLog(player._id, vm.findForbidCheckedTitle(player.forbidRewardPointsEvent, vm.rewardPointsAllEvent));
                proms.push(prom);
            });
            return Promise.all(proms).then(data => {
                vm.batchPermitModifySucc = true;
                return data;
            })
        }

        $("button.forbidRewardPointsEventConfirm").on('click', function () {
            vm.getForbidRewardPointsEvent();
        });
        vm.getForbidRewardPointsEvent = function () {
            vm.forbidRewardPointsEventLog = {};
            utilService.actionAfterLoaded('#modalForbidRewardPointsEventLog.in #forbidRewardPointsEventSearch .endTime', function () {
                vm.forbidRewardPointsEventLog.startTime = utilService.createDatePicker('#forbidRewardPointsEventSearch .startTime');
                vm.forbidRewardPointsEventLog.endTime = utilService.createDatePicker('#forbidRewardPointsEventSearch .endTime');
                vm.forbidRewardPointsEventLog.startTime.data('datetimepicker').setDate(utilService.setLocalDayStartTime(utilService.setNDaysAgo(new Date(), 180)));
                vm.forbidRewardPointsEventLog.endTime.data('datetimepicker').setDate(utilService.setLocalDayEndTime(new Date()));
                vm.forbidRewardPointsEventLog.pageObj = utilService.createPageForPagingTable("#forbidRewardPointsEventTblPage", {}, $translate, function (curP, pageSize) {
                    vm.commonPageChangeHandler(curP, pageSize, "forbidRewardPointsEventLog", vm.getForbidRewardPointsEventLog)
                });
                vm.getForbidRewardPointsEventLog(true);
            });
        }
        vm.getForbidRewardPointsEventLog = function (newSearch) {
            var sendQuery = {
                startTime: vm.forbidRewardPointsEventLog.startTime.data('datetimepicker').getLocalDate(),
                endTime: vm.forbidRewardPointsEventLog.endTime.data('datetimepicker').getLocalDate(),
                playerId: vm.forbidRewardPointsEventPopover._id,
                limit: newSearch ? 10 : vm.forbidRewardPointsEventLog.limit,
                index: newSearch ? 0 : vm.forbidRewardPointsEventLog.index,
                sortCol: vm.forbidRewardPointsEventLog.sortCol || undefined
            };
            if (vm.forbidRewardPointsEventLog.status) {
                sendQuery.status = vm.forbidRewardPointsEventLog.status;
            }
            vm.forbidRewardPointsEventLog.isSearching = true;
            console.log("Second:Query:", sendQuery);
            $scope.safeApply();
            socketService.$socket($scope.AppSocket, 'getForbidRewardPointsEventLog', sendQuery, function (data) {
                var showData = data.data ? data.data.data.map(item => {
                    item.createTime$ = vm.dateReformat(item.createTime);
                    item.curAmount$ = item.data && item.data.curAmount ? item.data.curAmount.toFixed(2) : 0;
                    for (let i = 0; i < item.forbidRewardPointsEventNames.length; i++) {
                        if (i > 0)
                            item.forbidRewardPointsEventNames[i] = " " + item.forbidRewardPointsEventNames[i];
                    }
                    return item;
                }) : [];
                vm.forbidRewardPointsEventLog.totalCount = data.data ? data.data.total : 0;
                let summary = data.data ? data.data.summary : {sumAmt: 0};
                console.log("ForbidRewardPointsEventLog:length:", showData);
                vm.drawForbidRewardPointsEventLogTbl(showData, vm.forbidRewardPointsEventLog.totalCount, newSearch, summary);
                vm.forbidRewardPointsEventLog.isSearching = false;
                $scope.safeApply();
            });
        }
        vm.drawForbidRewardPointsEventLogTbl = function (showData, size, newSearch, summary) {
            var tableOptions = $.extend({}, vm.generalDataTableOptions, {
                data: showData,
                "aaSorting": vm.forbidRewardPointsEventLog.aaSorting || [],
                aoColumnDefs: [
                    {'sortCol': 'createTime$', bSortable: true, 'aTargets': [0]},
                    {'sortCol': 'admin.adminName', bSortable: true, 'aTargets': [1]},
                    {targets: '_all', defaultContent: ' ', bSortable: false}
                ],
                columns: [
                    {title: $translate('date'), data: "createTime$"},
                    {title: $translate('OPERATOR_NAME'), data: "admin.adminName"},
                    {title: $translate('FORBID_REWARDPOINTS'), data: "forbidRewardPointsEventNames"},
                    {title: $translate('REMARK'), data: "remark"},
                ],
                "paging": false,
            });
            utilService.createDatatableWithFooter("#forbidRewardPointsEventTbl", tableOptions, {});

            // var aTable = $("#forbidRewardTbl").DataTable(tableOptions);
            vm.forbidRewardPointsEventLog.pageObj.init({maxCount: size}, newSearch);
            $("#forbidRewardPointsEventTbl").off('order.dt');
            $("#forbidRewardPointsEventTbl").on('order.dt', function (event, a, b) {
                vm.commonSortChangeHandler(a, 'forbidRewardPointsEventLog', vm.getForbidRewardPointsEventLog);
            });
            $('#forbidRewardPointsEventTbl').resize();
            $scope.safeApply();
        }
        //endregion here


        vm.getProposalTypeOptionValue = function (proposalType) {
            var result = utilService.getProposalGroupValue(proposalType);
            return $translate(result);
        };

        //Player advertisement
        vm.addNewPlayerAdvertisementRecord = function () {
            if (!vm.duplicateOrderNo && !vm.duplicateAdCode) {
                if (vm.playerAdvertisementGroup) {
                    let query = {
                        platformId: vm.selectedPlatform.id,
                        orderNo: vm.playerAdvertisementGroup.orderNo ? vm.playerAdvertisementGroup.orderNo : 0,
                        advertisementCode: vm.playerAdvertisementGroup.advertisementCode ? vm.playerAdvertisementGroup.advertisementCode : "",
                        title: vm.playerAdvertisementTitle ? vm.playerAdvertisementTitle : [],
                        backgroundBannerImage: {
                            url: vm.playerAdvertisementGroup.backgroundUrl ? vm.playerAdvertisementGroup.backgroundUrl : "",
                            hyperLink: vm.playerAdvertisementGroup.backgroundHyperLink ? vm.playerAdvertisementGroup.backgroundHyperLink : ""
                        },
                        imageButton: vm.playerAdvertisementGroup.imageButton ? vm.playerAdvertisementGroup.imageButton : [],
                        inputDevice: vm.playerAdvertisementWebDevice ? vm.inputDevice["WEB_PLAYER"] : vm.inputDevice["H5_PLAYER"]
                    }

                    if (query.imageButton) {
                        query.imageButton.map(b => {
                            if (b) {
                                if (b.url && b.url.length > 35) {
                                    b.urlDisplay = b.url.substring(0, 30) + "...";
                                } else {
                                    b.urlDisplay = b.url || null;
                                }

                                if (b.hyperLink && b.hyperLink.length > 35) {
                                    b.hyperLinkDisplay = b.hyperLink.substring(0, 30) + "...";
                                } else {
                                    b.hyperLinkDisplay = b.hyperLink || null;
                                }
                            }
                        })
                    }

                    if (query.backgroundBannerImage) {
                        if (query.backgroundBannerImage.url && query.backgroundBannerImage.url.length > 35) {
                            query.backgroundBannerImage.urlDisplay = query.backgroundBannerImage.url.substring(0, 30) + "...";
                        } else {
                            query.backgroundBannerImage.urlDisplay = query.backgroundBannerImage.url || null;
                        }

                        if (query.backgroundBannerImage.hyperLink && query.backgroundBannerImage.hyperLink.length > 35) {
                            query.backgroundBannerImage.hyperLinkDisplay = query.backgroundBannerImage.hyperLink.substring(0, 30) + "...";
                        } else {
                            query.backgroundBannerImage.hyperLinkDisplay = query.backgroundBannerImage.hyperLink || null;
                        }
                    }

                    socketService.$socket($scope.AppSocket, 'createNewPlayerAdvertisementRecord', query, function (data) {
                        if (data) {
                            vm.resetPlayerAddTable();
                        }
                    });
                }

            }
        }

        vm.savePlayerAdvertisementRecordChanges = function () {
            if (!vm.duplicateOrderNo && !vm.duplicateAdCode) {
                if (vm.displayAdvertisementList) {
                    vm.displayAdvertisementList.forEach(record => {

                        let sendData = record;

                        if (sendData.imageButton) {
                            sendData.imageButton.map(b => {
                                if (b) {
                                    if (b.url && b.url.length > 35) {
                                        b.urlDisplay = b.url.substring(0, 30) + "...";
                                    } else {
                                        b.urlDisplay = b.url || null;
                                    }

                                    if (b.hyperLink && b.hyperLink.length > 35) {
                                        b.hyperLinkDisplay = b.hyperLink.substring(0, 30) + "...";
                                    } else {
                                        b.hyperLinkDisplay = b.hyperLink || null;
                                    }
                                }
                            })
                        }

                        if (sendData.backgroundBannerImage) {
                            if (sendData.backgroundBannerImage.url && sendData.backgroundBannerImage.url.length > 35) {
                                sendData.backgroundBannerImage.urlDisplay = sendData.backgroundBannerImage.url.substring(0, 30) + "...";
                            } else {
                                sendData.backgroundBannerImage.urlDisplay = sendData.backgroundBannerImage.url || null;
                            }

                            if (sendData.backgroundBannerImage.hyperLink && sendData.backgroundBannerImage.hyperLink.length > 35) {
                                sendData.backgroundBannerImage.hyperLinkDisplay = sendData.backgroundBannerImage.hyperLink.substring(0, 30) + "...";
                            } else {
                                sendData.backgroundBannerImage.hyperLinkDisplay = sendData.backgroundBannerImage.hyperLink || null;
                            }
                        }

                        socketService.$socket($scope.AppSocket, 'savePlayerAdvertisementRecordChanges', sendData, function (data) {
                            //do nothing
                        });

                        vm.editAdvertisementRecord = false;
                        vm.showAdvertisementRecord = true;
                    });
                }

            }
        }

        vm.deletePlayerAdvertisementRecord = function (advertisementId, index) {
            if (advertisementId) {
                let sendData = {
                    platformId: vm.selectedPlatform.id,
                    advertisementId: advertisementId,
                };

                GeneralModal.confirm({
                    title: $translate('DELETE_ADVERTISEMENT'),
                    text: $translate('Confirm to delete advertisement ?')
                }).then(function () {
                    socketService.$socket($scope.AppSocket, 'deleteAdvertisementRecord', sendData, function (data) {
                        if (data) {
                            if (typeof index !== "undefined") {
                                vm.displayAdvertisementList.splice(index, 1);
                            }
                        }
                    });
                });
            }
        }

        vm.playerAdvertisementList = function () {
            let sendData = {
                platformId: vm.selectedPlatform.id,
                inputDevice: vm.playerAdvertisementWebDevice ? vm.inputDevice["WEB_PLAYER"] : vm.inputDevice["H5_PLAYER"]
            };

            socketService.$socket($scope.AppSocket, 'getPlayerAdvertisementList', sendData, function (data) {
                console.log("player advertisement list", data);
                if (data && data.data) {

                    data.data.map(d => {
                        if (d) {
                            if (d.backgroundBannerImage) {
                                if (d.backgroundBannerImage.url && d.backgroundBannerImage.url.length > 35) {
                                    d.backgroundBannerImage.urlDisplay = d.backgroundBannerImage.url.substring(0, 30) + "...";
                                } else {
                                    d.backgroundBannerImage.urlDisplay = d.backgroundBannerImage.url || null;
                                }

                                if (d.backgroundBannerImage.hyperLink && d.backgroundBannerImage.hyperLink.length > 35) {
                                    d.backgroundBannerImage.hyperLinkDisplay = d.backgroundBannerImage.hyperLink.substring(0, 30) + "...";
                                } else {
                                    d.backgroundBannerImage.hyperLinkDisplay = d.backgroundBannerImage.hyperLink || null;
                                }
                            }

                            d.status = d.status == vm.playerAdvertisementStatus["OPEN"] ? d.status : vm.playerAdvertisementStatus["CLOSE"];
                        }
                    })

                    vm.displayAdvertisementList = data.data;

                    $scope.safeApply();
                }
            });
        }

        vm.selectedAdvListData = function (id, subject) {

            let sendData = {
                platformId: vm.selectedPlatform.id,
                _id: id,
                subject: subject
            };

            socketService.$socket($scope.AppSocket, 'getSelectedAdvList', sendData, function (data) {

                if (data && data.data) {
                    vm.selectedAdvList = data.data;
                    vm.drawUIPlatformCSS(vm.selectedAdvList);
                    console.log("vm.selectedAdvList", vm.selectedAdvList);
                    vm.CSSContentEdit = false;
                    $scope.safeApply();
                }
                else {
                    Q.reject('Advertisement list is not found.');
                }
            });

        };

        vm.drawUIPlatformCSS = function (elem) {
            if (vm.hoverStyle) {
                vm.clearStyle();
            }

            // generate the css
            setTimeout(function () {
                vm.hoverStyle = document.createElement('style');
                if (vm.hoverStyle.styleSheet) {
                    vm.hoverStyle.styleSheet.cssText = '';
                }
                else {
                    vm.hoverStyle.appendChild(document.createTextNode(''));
                }

                let temp = '';
                elem.imageButton.forEach(item => {
                    let css = '#' + item.buttonName + "{" + item.css + "}";
                    temp += css;
                });

                elem.imageButton.forEach(item => {
                    let css = '#' + item.buttonName + item.hoverCss;
                    temp += css;

                });
                vm.hoverStyle.appendChild(document.createTextNode(temp));
                document.getElementsByTagName('head')[0].appendChild(vm.hoverStyle);
                $scope.safeApply();
            }, 0);
        };

        vm.clearStyle = function () {
            document.getElementsByTagName('head')[0].removeChild(vm.hoverStyle);
            vm.hoverStyle = null;
            $scope.safeApply();
        };

        vm.advSettingUpdate = function (elem, subject) {
            if (elem) {
                let sendData = {
                    platformId: vm.selectedPlatform.id,
                    _id: elem._id,
                    imageButton: elem.imageButton,
                    subject: subject
                };
                socketService.$socket($scope.AppSocket, 'updateAdvertisementRecord', sendData, function (data) {
                });
            }
        };

        vm.changeAdvertisementStatus = function (advertisementId, advertisementStatus) {
            if (advertisementId) {
                let sendData = {
                    platformId: vm.selectedPlatform.id,
                    _id: advertisementId,
                    status: advertisementStatus ? advertisementStatus : 0
                }

                let statusChangeConfirmText = "";

                if (advertisementStatus == vm.playerAdvertisementStatus["CLOSE"]) {
                    statusChangeConfirmText = "Confirm to turn advertisement on ?";
                } else {
                    statusChangeConfirmText = "Confirm to turn advertisement off ?";
                }

                GeneralModal.confirm({
                    title: $translate('DELETE_ADVERTISEMENT'),
                    text: $translate(statusChangeConfirmText)
                }).then(function () {
                    socketService.$socket($scope.AppSocket, 'changeAdvertisementStatus', sendData, function (data) {
                        if (data) {
                            vm.playerAdvertisementList();
                        }
                    });
                });
            }
        }

        vm.checkDuplicateOrderNoWithId = function (orderNo, advertisementId) {
            if (advertisementId) {
                let sendData = {
                    platformId: vm.selectedPlatform.id,
                    _id: advertisementId,
                    orderNo: orderNo,
                    inputDevice: vm.playerAdvertisementWebDevice ? vm.inputDevice["WEB_PLAYER"] : vm.inputDevice["H5_PLAYER"]
                }
                socketService.$socket($scope.AppSocket, 'checkDuplicateOrderNoWithId', sendData, function (data) {
                    if (data && data.data) {
                        vm.duplicateOrderNo = true;
                        vm.errMessage = "Order no is duplicated";
                        $scope.safeApply();
                    } else {
                        vm.duplicateOrderNo = false;
                        vm.errMessage = "";
                        $scope.safeApply();
                    }
                });
            }

        }

        vm.checkDuplicateAdCodeWithId = function (advertisementCode, advertisementId) {
            if (advertisementId && advertisementCode) {
                let sendData = {
                    platformId: vm.selectedPlatform.id,
                    _id: advertisementId,
                    advertisementCode: advertisementCode,
                    inputDevice: vm.playerAdvertisementWebDevice ? vm.inputDevice["WEB_PLAYER"] : vm.inputDevice["H5_PLAYER"]
                }
                socketService.$socket($scope.AppSocket, 'checkDuplicateAdCodeWithId', sendData, function (data) {
                    if (data && data.data) {
                        vm.duplicateAdCode = true;
                        vm.errMessage = "Advertisement code is duplicated";
                        $scope.safeApply();
                    } else {
                        vm.duplicateAdCode = false;
                        vm.errMessage = "";
                        $scope.safeApply();
                    }
                });
            }
        }

        vm.checkDuplicateOrderNo = function (orderNo) {
            let sendData = {
                platformId: vm.selectedPlatform.id,
                orderNo: orderNo,
                inputDevice: vm.playerAdvertisementWebDevice ? vm.inputDevice["WEB_PLAYER"] : vm.inputDevice["H5_PLAYER"]
            }
            socketService.$socket($scope.AppSocket, 'checkDuplicateOrderNo', sendData, function (data) {
                if (data && data.data) {
                    vm.duplicateOrderNo = true;
                    vm.errMessage = "Order no is duplicated";
                    $scope.safeApply();
                } else {
                    vm.duplicateOrderNo = false;
                    vm.errMessage = "";
                    $scope.safeApply();
                }
            });
        }

        vm.checkDuplicateAdCode = function (advertisementCode) {
            if (advertisementCode) {
                let sendData = {
                    platformId: vm.selectedPlatform.id,
                    advertisementCode: advertisementCode,
                    inputDevice: vm.playerAdvertisementWebDevice ? vm.inputDevice["WEB_PLAYER"] : vm.inputDevice["H5_PLAYER"]
                }
                socketService.$socket($scope.AppSocket, 'checkDuplicateAdCode', sendData, function (data) {
                    if (data && data.data) {
                        vm.duplicateAdCode = true;
                        vm.errMessage = "Advertisement code is duplicated";
                        $scope.safeApply();
                    } else {
                        vm.duplicateAdCode = false;
                        vm.errMessage = "";
                        $scope.safeApply();
                    }
                });
            }
        }

        vm.setNewImageButtonName = function () {
            let buttonNo = vm.currentImageButtonNo + 1;
            vm.playerAdvertisementGroup.imageButton.push(
                {
                    buttonName: 'activityBtn' + buttonNo,
                    url: '',
                    hyperLink: '',
                    css: "position:absolute; width: auto; height: auto; top:50%; left: 50%",
                    hoverCss: ":hover{filter: contrast(200%);}"
                }
            );

            vm.currentImageButtonNo += 1;
        }

        vm.getNextOrderNo = function () {
            let sendData = {
                platformId: vm.selectedPlatform.id,
                inputDevice: vm.playerAdvertisementWebDevice ? vm.inputDevice["WEB_PLAYER"] : vm.inputDevice["H5_PLAYER"]
            }

            socketService.$socket($scope.AppSocket, 'getNextOrderNo', sendData, function (data) {
                if (data && data.data) {
                    if (data.data.hasOwnProperty("orderNo")) {
                        vm.playerAdvertisementGroup.orderNo = data.data.orderNo + 1;

                        $scope.safeApply();
                    }
                }
            });


        }

        vm.resetPlayerAddTable = function () {
            //reset the adding table
            vm.addNewPlayerAdvertisement = false;
            vm.currentImageButtonNo = 2;
            vm.playerAdvertisementGroup = [];
            vm.playerAdvertisementTitle = [];
            vm.playerAdvertisementGroup.imageButton = [
                {
                    buttonName: "activityBtn1",
                    url: "",
                    hyperLink: "",
                    css: "position:absolute; width: auto; height: auto; top:87%; left: 20%",
                    hoverCss: ":hover{filter: contrast(200%);}"
                },
                {
                    buttonName: "activityBtn2",
                    url: "",
                    hyperLink: "",
                    css: "position:absolute; width: auto; height: auto; top:87%; left: 70%",
                    hoverCss: ":hover{filter: contrast(200%);}"
                }
            ];

            $scope.safeApply();
        }

        vm.getPlayersByAdvanceQueryDebounced = $scope.debounceSearch(vm.getPlayersByAdvanceQuery);

        vm.reArrangeArr = function (oriTXT, targetField, targetArr) {

            if (typeof(oriTXT) == 'string' && oriTXT != '') {
                let convertArr = oriTXT.split(',');
                targetArr[targetField] = convertArr;
                targetArr = targetArr.filter(item => {
                    return item != '';
                })
                console.log(targetArr);
            }
        };
        vm.forcePairingWithReferenceNumber = function() {
            commonService.forcePairingWithReferenceNumber($scope, $translate, socketService, vm.selectedPlatform.data.platformId, vm.selectedProposal._id, vm.selectedProposal.proposalId, vm.forcePairingReferenceNumber);
            vm.forcePairingReferenceNumber = '';
        };

        vm.loadBankCard = function(){
            // 1st dependencies variable
            return Promise.all([
                commonService.getAllBankCard($scope, $translate, vm.selectedPlatform.data.platformId, vm.allBankTypeList).catch(err => Promise.resolve([]))
            ]).then(
                result => {
                    $scope.$evalAsync(() => {
                        if(result && result.length){
                            vm.bankCards = result[0];
                        }
                    });
                }
            );
        };

        vm.loadAliPayAcc = function() {
            return Promise.all([
                commonService.getAllAlipaysByAlipayGroup($scope, $translate, vm.selectedPlatform.data.platformId).catch(err => Promise.resolve([]))
            ]).then(
                result => {
                    $scope.$evalAsync(() => {
                        if(result && result.length){
                            vm.allAlipaysAcc = result[0];
                        }
                    });
                }
            );
        };

        vm.loadWechatPayAcc = function() {
            return Promise.all([
                commonService.getAllWechatpaysByWechatpayGroup($scope, $translate, vm.selectedPlatform.data.platformId).catch(err => Promise.resolve([]))
            ]).then(
                result => {
                    $scope.$evalAsync(() => {
                        if(result && result.length){
                            vm.allWechatpaysAcc = result[0];
                        }
                    });
                }
            );
        };

        $('body').on('click', '#permissionRecordButtonByPlayerTab', function () {
            vm.getPlayerPermissionChangeByPlayerTab("new")
        })

        function initFeedbackAdmin (callback) {
            vm.feedbackAdminQuery = vm.feedbackAdminQuery || {};
            vm.feedbackAdminQuery.total = 0;
            vm.feedbackAdminQuery.cs = '';
            let departmentID = vm.platformDepartmentObjId;
            if (departmentID) {
                socketService.$socket($scope.AppSocket, 'getDepartmentTreeByIdWithUser', {departmentId: departmentID}, function (data) {
                    var result = [];
                    data.data.forEach(function (userData) {
                        userData.users.forEach(function (user) {
                            var singleRecord = {}
                            singleRecord.departmentName = userData.departmentName;
                            singleRecord.adminName = user.adminName;
                            singleRecord._id = user._id;
                            result.push(singleRecord);
                        })
                    });
                    vm.departmentUsers = result;
                    $scope.safeApply();
                });
            }
            vm.feedbackAdminQuery.admin = "any";
            $('#feedbackquerystarttime').datetimepicker({
                language: 'en',
                format: 'dd/MM/yyyy hh:mm:ss',
                pick12HourFormat: true,
                pickTime: true,
            });
            vm.feedbackAdminQuerystartDate = $("#feedbackquerystarttime").data('datetimepicker').setLocalDate(utilService.getYesterdayStartTime());

            $('#feedbackqueryendtime').datetimepicker({
                language: 'en',
                format: 'dd/MM/yyyy hh:mm:ss',
                pick12HourFormat: true
            });
            vm.feedbackAdminQueryendDate = $('#feedbackqueryendtime').data('datetimepicker').setLocalDate(utilService.getTodayEndTime());

            vm.feedbackAdminQuery = {
                result: 'all',
                topic: 'all'
            };
            utilService.actionAfterLoaded("#feedbackAdminTablePage", function () {
                vm.feedbackAdminQuery.pageObj = utilService.createPageForPagingTable("#feedbackAdminTablePage", {}, $translate, function (curP, pageSize) {
                    vm.commonPageChangeHandler(curP, pageSize, "feedbackAdminQuery", vm.submitAdminPlayerFeedbackQuery)
                });
                vm.submitAdminPlayerFeedbackQuery(true);
            })
        }

        vm.selectLevelOnProductChange = function() {
            if (vm.playerAdvanceSearchQuery && vm.playerAdvanceSearchQuery.playerLevel) {
                vm.playerAdvanceSearchQuery.playerLevel = "";
            }

            if (!(vm.playerLevelByAllPlatform && vm.playerAdvanceSearchQuery && vm.playerAdvanceSearchQuery.platformList && vm.playerAdvanceSearchQuery.platformList.length == 1)) {
                return;
            }

            for (let key in vm.playerLevelByAllPlatform) {
                if (vm.playerLevelByAllPlatform[key].platform && vm.playerLevelByAllPlatform[key].playerLevel
                    && vm.playerAdvanceSearchQuery.platformList[0] ==  String(vm.playerLevelByAllPlatform[key].platform)) {
                    vm.playerTableLevelOptions = vm.playerLevelByAllPlatform[key].playerLevel;
                    break;
                }
            }

        }

    };

    let injectParams = [
        '$sce',
        '$compile',
        '$scope',
        '$filter',
        '$location',
        '$log',
        'authService',
        'socketService',
        'utilService',
        'commonService',
        'CONFIG',
        "$cookies",
        "$timeout",
        '$http',
        'uiGridExporterService',
        'uiGridExporterConstants',
        '$interval'
    ];

    playerController.$inject = injectParams;
    myApp.register.controller('playerCtrl', playerController);
}
);
