const http=require("http");const url=require("url");const fs=require("fs");const path=require("path");const env=require("./config/env").config();const cred=require("./config/cred");const theOtherEnv=require("./config/env").getAnotherConfig()[0];const webEnv=require("./public/js/webEnv");const nodeUrl=env.redisUrl||"localhost";const port=env.redisPort||1802;const jwt=require("jsonwebtoken");const secret="$ap1U5eR$";const crypto=require("crypto");const rp=require("request-promise");const privateKeyPath="./public/playerPhone.key.pem";const replacedPrivateKeyPath="./public/playerPhone.key.pem.bak";const publicKeyPath="./public/playerPhone.pub";const replacedPublicKeyPath="./public/playerPhone.pub.bak";const restartFPMSPath="./public/restartFPMS";const fpmsKey="Fr0m_FPM$!";const testKeyPairText="TEST ENCRYPTION";const ts=jwt.sign(fpmsKey,secret);const uh=crypto.createHash("md5").update(env.redisUrl).digest("hex");let privateKey,publicKey,replacedPrivateKey,replacedPublicKey;http.createServer(function(e,t){console.log(`${e.method} ${e.url}`);t.setHeader("Access-Control-Allow-Origin","*");t.setHeader("Access-Control-Request-Method","*");t.setHeader("Access-Control-Allow-Methods","POST, GET, OPTIONS");t.setHeader("Access-Control-Allow-Headers","*");t.setHeader("Access-Control-Expose-Headers","Location");const r=url.parse(e.url,true);let o=`./public${r.pathname}`;let n=r.query;if(e.method==="POST"){if(e.headers&&e.headers["x-token"]){jwt.verify(e.headers["x-token"],env.socketSecret,function(r,n){if(r||!n){console.log("jwt verify error - POST",r);s()}else{console.log(`${n.adminName} ${e.method} ${e.url}`);let r=[];let s,i,c,a,l;switch(o){case publicKeyPath:console.log("SAVING IN EFFECT KEY PAIR");e.on("data",e=>{r.push(e)}).on("end",()=>{s=Buffer.concat(r);try{i=JSON.parse(s.toString());if(!i||!i.privateKey||!i.publicKey){t.end("Invalid RSA Key Pair!")}else{c=crypto.privateEncrypt(i.privateKey,Buffer.from(testKeyPairText,"utf8"));a=crypto.publicDecrypt(i.publicKey,c);l=a.toString();if(l===testKeyPairText){privateKey=i.privateKey;publicKey=i.publicKey;t.end("Success")}else{t.end("Invalid RSA Key Pair!")}}}catch(e){console.log("error",e);t.end("Invalid RSA Key Pair!")}});break;case replacedPublicKeyPath:console.log("SAVING REPLACED KEY PAIR");e.on("data",e=>{r.push(e)}).on("end",()=>{s=Buffer.concat(r);try{i=JSON.parse(s.toString());if(!i||!i.privateKey||!i.publicKey){t.end("Invalid RSA Key Pair!")}else{c=crypto.privateEncrypt(i.privateKey,Buffer.from(testKeyPairText,"utf8"));a=crypto.publicDecrypt(i.publicKey,c);l=a.toString();if(l===testKeyPairText){replacedPrivateKey=i.privateKey;replacedPublicKey=i.publicKey;t.end("Success")}else{t.end("Invalid RSA Key Pair!")}}}catch(e){console.log("error",e);t.end("Invalid RSA Key Pair!")}});break;case restartFPMSPath:console.log("REQUEST TO RESTART FPMS");rp({method:"POST",uri:env.fpmsUpdateKeyAddress,body:{token:jwt.sign("Restart server",env.socketSecret),privateKey:Boolean(privateKey),publicKey:Boolean(publicKey),replPrivateKey:Boolean(replacedPrivateKey),replPublicKey:Boolean(replacedPublicKey)},json:true}).then(()=>{t.end("Success")});break}}})}else{let r=[];let o;e.on("data",e=>{r.push(e)}).on("end",()=>{o=Buffer.concat(r);try{let e=JSON.parse(o.toString());if(e.username&&e.password){let r=cred.getAdmin(e.username.toLowerCase());if(!r){t.end(JSON.stringify({success:false,error:{name:"InvalidPassword",message:"Wrong credential!"}}))}else if(!validateHash(r.password,e.password)){t.end(JSON.stringify({success:false,error:{name:"InvalidPassword",message:"Password or user name is not correct!"}}))}else{let e={adminInfo:r,loginTime:new Date};t.end(JSON.stringify({success:true,token:jwt.sign(e,env.socketSecret)}))}}}catch(e){console.log("error",e);t.end(JSON.stringify({success:false,error:{name:"InvalidPassword",message:"Error occured!"}}))}})}}else if(e.method==="GET"){switch(o){case privateKeyPath:i(n,t,privateKey);break;case replacedPrivateKeyPath:i(n,t,replacedPrivateKey);break;case publicKeyPath:i(n,t,publicKey);break;case replacedPublicKeyPath:i(n,t,replacedPublicKey);break;case"./public/login.html":c(o,t);break;case"./public/static.html":if(n&&n.token){jwt.verify(n.token,env.socketSecret,function(r,n){if(r||!n){console.log("jwt verify error",r);s()}else{console.log(`${n.adminName} ${e.method} ${e.url}`);c(o,t)}})}else{s()}break;case"./public/static.htm":case"./":s();break;default:c(o,t)}}else if(e.method==="OPTIONS"){t.end()}function s(){t.writeHead(302,{location:"/login.html"});t.end()}function i(e,t,r){if(e&&e.token){jwt.verify(e.token,secret,(o,n)=>{if(!o&&n&&n===fpmsKey){console.log("uh",uh);t.end(uh)}if(o&&e.token){const o=e.token.split(":");const n=Buffer.from(o.shift(),"hex");const s=Buffer.from(o.join(":"),"hex");const i=crypto.createDecipheriv("aes-256-ctr",uh,n);let c=i.update(s,"hex","utf8");c+=i.final("utf8");if(c===fpmsKey){t.end(r)}else{t.end()}}})}else{s()}}function c(e,t){const r=path.parse(e).ext;const o={".ico":"image/x-icon",".html":"text/html",".js":"text/javascript",".json":"application/json",".css":"text/css",".png":"image/png",".jpg":"image/jpeg",".wav":"audio/wav",".mp3":"audio/mpeg",".svg":"image/svg+xml",".pdf":"application/pdf",".doc":"application/msword"};fs.exists(e,function(n){console.log("exist",n);if(!n){e="public/login.html"}fs.readFile(e,function(e,n){if(e){t.statusCode=500;t.end(`Error getting the file: ${e}.`)}else{t.setHeader("Content-type",o[r]||"text/plain");t.end(n)}})})}}).listen(parseInt(port));getKeyFromOtherInstance();function getKeyFromOtherInstance(){let e=privateKey?Promise.resolve(privateKey):n();let t=replacedPrivateKey?Promise.resolve(replacedPrivateKey):s();let r=publicKey?Promise.resolve(publicKey):i();let o=replacedPublicKey?Promise.resolve(replacedPublicKey):c();return Promise.all([e,t,r,o]);function n(){return rp(a("playerPhone.key.pem",ts)).then(e=>{if(e){let t=cred.getHash(env.redisUrl);if(t===e){let e=cred.getCipherIV(t,fpmsKey);return rp(a("playerPhone.key.pem",e))}}}).then(e=>{if(e){console.log("SETTING PRIVATE KEY FROM ANOTHER INSTANCE");privateKey=e}}).catch(e=>privateKey)}function s(){return rp(a("playerPhone.key.pem.bak",ts)).then(e=>{if(e){let t=cred.getHash(env.redisUrl);if(t===e){let e=cred.getCipherIV(t,fpmsKey);return rp(a("playerPhone.key.pem.bak",e))}}}).then(e=>{if(e){console.log("SETTING REPL PRIVATE KEY FROM ANOTHER INSTANCE");replacedPrivateKey=e}}).catch(e=>replacedPrivateKey)}function i(){return rp(a("playerPhone.pub",ts)).then(e=>{if(e){let t=cred.getHash(env.redisUrl);if(t===e){let e=cred.getCipherIV(t,fpmsKey);return rp(a("playerPhone.pub",e))}}}).then(e=>{if(e){console.log("SETTING PUBLIC KEY FROM ANOTHER INSTANCE");publicKey=e}}).catch(e=>publicKey)}function c(){return rp(a("playerPhone.pub.bak",ts)).then(e=>{if(e){let t=cred.getHash(env.redisUrl);if(t===e){let e=cred.getCipherIV(t,fpmsKey);return rp(a("playerPhone.pub.bak",e))}}}).then(e=>{if(e){console.log("SETTING REPL PUBLIC KEY FROM ANOTHER INSTANCE");replacedPublicKey=e}}).catch(e=>replacedPublicKey)}function a(e,t){let r="http://".concat(theOtherEnv.redisUrl);if(theOtherEnv.redisPort){r+=":"+theOtherEnv.redisPort}r+="/";r+=e;r+="?token=";r+=t;return r}}function validateHash(e,t){let r=crypto.createHash("md5").update(t).digest("hex");return e===r}console.log(`Server listening on port ${port}`);