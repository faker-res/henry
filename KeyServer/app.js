const http=require("http"),url=require("url"),env=require("./config/env").config(),cred=require("./config/cred"),theOtherEnv=require("./config/env").getAnotherConfig()[0],port=env.redisPort||1802,jwt=require("jsonwebtoken"),secret="$ap1U5eR$",crypto=require("crypto"),rp=require("request-promise"),privateKeyPath="./public/playerPhone.key.pem",replacedPrivateKeyPath="./public/playerPhone.key.pem.bak",publicKeyPath="./public/playerPhone.pub",replacedPublicKeyPath="./public/playerPhone.pub.bak",restartFPMSPath="./public/restartFPMS",fpmsKey="Fr0m_FPM$!",testKeyPairText="TEST ENCRYPTION",ts=jwt.sign(fpmsKey,secret),uh=crypto.createHash("md5").update(env.redisUrl).digest("hex");let privateKey,publicKey,replacedPrivateKey,replacedPublicKey;function getKeyFromOtherInstance(){console.log("theOtherEnv",theOtherEnv);let e=privateKey?Promise.resolve(privateKey):rp(i("playerPhone.key.pem",ts)).then(e=>{if(e){let r=cred.getHash(env.redisUrl);if(r===e){let e=cred.getCipherIV(r,fpmsKey);return rp(i("playerPhone.key.pem",e))}}}).then(e=>{e&&(console.log("SETTING PRIVATE KEY FROM ANOTHER INSTANCE"),privateKey=e)}).catch(e=>privateKey),r=replacedPrivateKey?Promise.resolve(replacedPrivateKey):rp(i("playerPhone.key.pem.bak",ts)).then(e=>{if(e){let r=cred.getHash(env.redisUrl);if(r===e){let e=cred.getCipherIV(r,fpmsKey);return rp(i("playerPhone.key.pem.bak",e))}}}).then(e=>{e&&(console.log("SETTING REPL PRIVATE KEY FROM ANOTHER INSTANCE"),replacedPrivateKey=e)}).catch(e=>replacedPrivateKey),t=publicKey?Promise.resolve(publicKey):rp(i("playerPhone.pub",ts)).then(e=>{if(e){let r=cred.getHash(env.redisUrl);if(r===e){let e=cred.getCipherIV(r,fpmsKey);return rp(i("playerPhone.pub",e))}}}).then(e=>{e&&(console.log("SETTING PUBLIC KEY FROM ANOTHER INSTANCE"),publicKey=e)}).catch(e=>publicKey),o=replacedPublicKey?Promise.resolve(replacedPublicKey):rp(i("playerPhone.pub.bak",ts)).then(e=>{if(e){let r=cred.getHash(env.redisUrl);if(r===e){let e=cred.getCipherIV(r,fpmsKey);return rp(i("playerPhone.pub.bak",e))}}}).then(e=>{e&&(console.log("SETTING REPL PUBLIC KEY FROM ANOTHER INSTANCE"),replacedPublicKey=e)}).catch(e=>replacedPublicKey);return Promise.all([e,r,t,o]);function i(e,r){let t=theOtherEnv.redisUrl;return theOtherEnv.redisPort&&(t+=":"+theOtherEnv.redisPort),t+="/",t+=e,t+="?token=",t+=r}}function validateHash(e,r){return e===crypto.createHash("md5").update(r).digest("hex")}function getIpAddress(e){return(e.headers["x-forwarded-for"]||"").split(",").pop()||e.connection.remoteAddress||e.socket.remoteAddress||e.connection.socket.remoteAddress}http.createServer(function(e,r){console.log(`${e.method} ${e.url} from ${getIpAddress(e)}`),r.setHeader("Access-Control-Allow-Origin","*"),r.setHeader("Access-Control-Request-Method","*"),r.setHeader("Access-Control-Allow-Methods","POST, GET, OPTIONS"),r.setHeader("Access-Control-Allow-Headers","*"),r.setHeader("Access-Control-Expose-Headers","Location");const t=url.parse(e.url,!0);let o=`./public${t.pathname}`,i=t.query;if("POST"===e.method)e.headers&&e.headers["x-token"]&&jwt.verify(e.headers["x-token"],env.socketSecret,function(t,i){if(t||!i)console.log("jwt verify error - POST",e.headers["x-token"],env.socketSecret,t),n();else{console.log(`${i.adminName} ${e.method} ${e.url}`);let t,n,a,c,l,s=[];switch(o){case publicKeyPath:console.log("SAVING IN EFFECT KEY PAIR"),e.on("data",e=>{s.push(e)}).on("end",()=>{t=Buffer.concat(s);try{if((n=JSON.parse(t.toString()))&&n.privateKey&&n.publicKey)if(a=crypto.privateEncrypt(n.privateKey,Buffer.from(testKeyPairText,"utf8")),c=crypto.publicDecrypt(n.publicKey,a),(l=c.toString())===testKeyPairText)if(privateKey=n.privateKey,publicKey=n.publicKey,theOtherEnv&&theOtherEnv.redisUrl&&!n.isFromAnotherInstance){let t=theOtherEnv.redisUrl;theOtherEnv.redisPort&&(t+=":"+theOtherEnv.redisPort),t+=e.url,rp({method:"POST",uri:t,headers:{"x-token":e.headers["x-token"]},body:{privateKey:privateKey,publicKey:publicKey,isFromAnotherInstance:!0},json:!0}).then(()=>{r.end("Success")})}else r.end("Success");else r.end("Invalid RSA Key Pair!");else r.end("Invalid RSA Key Pair!")}catch(e){console.log("error",e),r.end("Invalid RSA Key Pair!")}});break;case replacedPublicKeyPath:console.log("SAVING REPLACED KEY PAIR"),e.on("data",e=>{s.push(e)}).on("end",()=>{t=Buffer.concat(s);try{if((n=JSON.parse(t.toString()))&&n.privateKey&&n.publicKey)if(a=crypto.privateEncrypt(n.privateKey,Buffer.from(testKeyPairText,"utf8")),c=crypto.publicDecrypt(n.publicKey,a),(l=c.toString())===testKeyPairText)if(replacedPrivateKey=n.privateKey,replacedPublicKey=n.publicKey,theOtherEnv&&theOtherEnv.redisUrl&&!n.isFromAnotherInstance){let t=theOtherEnv.redisUrl;theOtherEnv.redisPort&&(t+=":"+theOtherEnv.redisPort),t+=e.url,rp({method:"POST",uri:t,headers:{"x-token":e.headers["x-token"]},body:{privateKey:replacedPrivateKey,publicKey:replacedPublicKey,isFromAnotherInstance:!0},json:!0}).then(()=>{r.end("Success")})}else r.end("Success");else r.end("Invalid RSA Key Pair!");else r.end("Invalid RSA Key Pair!")}catch(e){console.log("error",e),r.end("Invalid RSA Key Pair!")}});break;case restartFPMSPath:console.log("REQUEST TO RESTART FPMS"),rp({method:"POST",uri:env.fpmsUpdateKeyAddress,body:{token:jwt.sign("Restart server",env.socketSecret),privateKey:Boolean(privateKey),publicKey:Boolean(publicKey),replPrivateKey:Boolean(replacedPrivateKey),replPublicKey:Boolean(replacedPublicKey)},json:!0}).then(()=>{r.end("Success")})}}});else if("GET"===e.method)switch(o){case privateKeyPath:a(i,r,privateKey);break;case replacedPrivateKeyPath:a(i,r,replacedPrivateKey);break;case publicKeyPath:a(i,r,publicKey);break;case replacedPublicKeyPath:a(i,r,replacedPublicKey)}else"OPTIONS"===e.method?r.end():"HEAD"===e.method&&privateKey&&publicKey&&r.end("ok");function n(){r.writeHead(302,{location:"/login.html"}),r.end()}function a(e,r,t){e&&e.token?jwt.verify(e.token,secret,(o,i)=>{if(!o&&i&&i===fpmsKey&&r.end(uh),o&&e.token){const o=e.token.split(":"),i=Buffer.from(o.shift(),"hex"),n=Buffer.from(o.join(":"),"hex"),a=crypto.createDecipheriv("aes-256-ctr",uh,i);let c=a.update(n,"hex","utf8");(c+=a.final("utf8"))===fpmsKey?r.end(t):r.end()}}):n()}}).listen(parseInt(port)),getKeyFromOtherInstance(),console.log(`Server listening on port ${port}`);